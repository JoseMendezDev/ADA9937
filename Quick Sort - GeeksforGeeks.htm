<!DOCTYPE html>
<!-- saved from url=(0055)https://www.geeksforgeeks.org/dsa/quick-sort-algorithm/ -->
<html lang="en-US"><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="origin-trial" content="A7vZI3v+Gz7JfuRolKNM4Aff6zaGuT7X0mf3wtoZTnKv6497cVMnhy03KDqX7kBz/q/iidW7srW31oQbBt4VhgoAAACUeyJvcmlnaW4iOiJodHRwczovL3d3dy5nb29nbGUuY29tOjQ0MyIsImZlYXR1cmUiOiJEaXNhYmxlVGhpcmRQYXJ0eVN0b3JhZ2VQYXJ0aXRpb25pbmczIiwiZXhwaXJ5IjoxNzU3OTgwODAwLCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ=="><meta http-equiv="origin-trial" content="A7vZI3v+Gz7JfuRolKNM4Aff6zaGuT7X0mf3wtoZTnKv6497cVMnhy03KDqX7kBz/q/iidW7srW31oQbBt4VhgoAAACUeyJvcmlnaW4iOiJodHRwczovL3d3dy5nb29nbGUuY29tOjQ0MyIsImZlYXR1cmUiOiJEaXNhYmxlVGhpcmRQYXJ0eVN0b3JhZ2VQYXJ0aXRpb25pbmczIiwiZXhwaXJ5IjoxNzU3OTgwODAwLCJpc1N1YmRvbWFpbiI6dHJ1ZSwiaXNUaGlyZFBhcnR5Ijp0cnVlfQ==">


<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=3.0"> 
<meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1"><link rel="shortcut icon" href="https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_favicon.png" type="image/x-icon">

<link rel="preconnect" href="https://fonts.googleapis.com/">
<link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="">


<meta name="theme-color" content="#308D46">
<!-- <meta name='robots' content='index, follow, max-image-preview:large, max-snippet:-1' /> -->

<meta name="image" property="og:image" content="https://media.geeksforgeeks.org/wp-content/cdn-uploads/gfg_200x200-min.png">
<meta property="og:image:type" content="image/png">
<meta property="og:image:width" content="200">
<meta property="og:image:height" content="200">
<meta name="facebook-domain-verification" content="xo7t4ve2wn3ywfkjdvwbrk01pvdond">

<meta property="og:title" content="Quick Sort - GeeksforGeeks">
<meta name="description" content="Your All-in-One Learning Portal: GeeksforGeeks is a comprehensive educational platform that empowers learners across domains-spanning computer science and programming, school education, upskilling, commerce, software tools, competitive exams, and more.">
<meta property="og:url" content="https://www.geeksforgeeks.org/dsa/quick-sort-algorithm/">
<meta name="keywords" content="QuickSort, sorting algorithm, Divide and Conquer, choose a pivot, partition the array, recursive call, Lomuto Partition, Hoare&#39;s Partition, time complexity, space complexity, advantages of QuickSort, disadvantages of QuickSort, applications of QuickSort, efficient sorting, data compression algorithms">
<meta property="og:site_name" content="GeeksforGeeks">
<meta property="og:image" content="https://media.geeksforgeeks.org/wp-content/uploads/20240926172924/Heap-Sort-Recursive-Illustration.webp">
<meta property="article:section" content="Divide and Conquer">
<meta property="article:tag" content="Adobe">
<meta property="article:tag" content="Qualcomm">
<meta property="article:tag" content="Samsung">
<meta property="article:tag" content="Goldman Sachs">
<meta property="article:tag" content="SAP Labs">
<meta property="article:tag" content="Target Corporation">
<meta property="article:tag" content="HSBC">
<meta property="article:tag" content="Quick Sort">
<meta property="article:tag" content="DSA Tutorials">
<meta property="og:type" content="article">
<meta property="og:locale" content="en_US">
<meta property="article:published_time" content="2014-01-07 18:57:29+00:00">
<meta property="article:modified_time" content="2025-10-03 16:43:14+00:00">
<meta property="og:updated_time" content="2025-10-03 16:43:14+00:00">
<meta property="og:image:secure_url" content="https://media.geeksforgeeks.org/wp-content/uploads/20240926172924/Heap-Sort-Recursive-Illustration.webp">
<meta property="og:description" content="Your All-in-One Learning Portal: GeeksforGeeks is a comprehensive educational platform that empowers learners across domains-spanning computer science and programming, school education, upskilling, commerce, software tools, competitive exams, and more.">
<script type="text/javascript" async="" charset="utf-8" src="./Quick Sort - GeeksforGeeks_files/recaptcha__es_419.js.descarga" crossorigin="anonymous" integrity="sha384-0aJ/DvVBJjvC0nG+3i/EtaWmsY/V+o7hLxJ0jNXeimuUi2OMr2B/4mLjzAGrTeEw"></script><script type="text/javascript" async="" charset="utf-8" src="./Quick Sort - GeeksforGeeks_files/recaptcha__es_419.js.descarga" crossorigin="anonymous" integrity="sha384-0aJ/DvVBJjvC0nG+3i/EtaWmsY/V+o7hLxJ0jNXeimuUi2OMr2B/4mLjzAGrTeEw"></script><script async="" src="./Quick Sort - GeeksforGeeks_files/apstag.js.descarga"></script><script async="" src="./Quick Sort - GeeksforGeeks_files/gtm.js.descarga"></script><script src="./Quick Sort - GeeksforGeeks_files/synchronously_gfg_ads.min.js.descarga"></script><script id="6senseWebTag" src="./Quick Sort - GeeksforGeeks_files/1776538f-6649-4839-8792-50339a772c95.js.descarga"></script>
<script defer="" src="./Quick Sort - GeeksforGeeks_files/platform.js.descarga" gapi_processed="true"></script>
<!-- earlier require.js -->
<!-- <script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.14/require.min.js"></script> -->
<!-- <script src="https://assets.geeksforgeeks.org/codetabs-dev/require.js"></script> -->
<!-- Removed the below script from here to prevent loading google translate js at initial load
<script async src="//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"></script> -->

<!-- FIXME:-  To be finalised whether we need to put this gpt script in header or footer  -->
<!-- //gpt.js script -->
<!-- <script async src='https://www.googletagservices.com/tag/js/gpt.js'></script> -->
<script>
   var IHPWT={}; //Initialize Namespace
  var pbjs = pbjs || {};
  pbjs.que = pbjs.que || [];
  var googletag = googletag || {};
  googletag.cmd = googletag.cmd || [];
  var gptRan = false;
</script>
<script defer="" src="./Quick Sort - GeeksforGeeks_files/pwt.js.descarga"></script>
      <script defer="" src="./Quick Sort - GeeksforGeeks_files/f.txt"></script>
  <script defer="" src="./Quick Sort - GeeksforGeeks_files/gfg_ads.min.js.descarga"></script>
<script defer="" src="./Quick Sort - GeeksforGeeks_files/prebid.js.descarga"></script>

                    <script> 
                        var video_api_response = JSON.parse("[{\"id\":10657,\"title\":\"QuickSort Introduction\",\"slug\":\"quicksort-introduction\",\"description\":\"<h2>Quick Sort Algorithm | Comprehensive Guide<\/h2><p><strong>Quick Sort<\/strong> is one of the most efficient and widely-used sorting algorithms based on the <strong>divide-and-conquer<\/strong> strategy. It works by selecting a \\\"pivot\\\" element and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.<\/p><h3>What is Quick Sort?<\/h3><p><strong>Quick Sort<\/strong> is a comparison-based sorting algorithm that efficiently sorts elements by partitioning the array into smaller sub-arrays. The core idea is to pick a pivot element, partition the array around the pivot, and recursively sort the sub-arrays. This results in a time complexity of <strong>O(n log n)<\/strong> on average, making it one of the fastest sorting algorithms.<\/p><h3>How Quick Sort Works<\/h3><p><strong>Choose a Pivot<\/strong>:<\/p><ul><li>Select a pivot element from the array. The pivot can be any element, but common choices include the first element, the last element, or a randomly selected one.<\/li><\/ul><p><strong>Partitioning<\/strong>:<\/p><ul><li>Reorder the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it. The pivot is now in its correct position in the sorted array.<\/li><\/ul><p><strong>Recursively Sort the Sub-arrays<\/strong>:<\/p><ul><li>Apply the same process recursively to the sub-arrays (the elements less than and greater than the pivot). Continue dividing and sorting until the sub-arrays have only one element or are empty.<\/li><\/ul><h3>Example of Quick Sort<\/h3><p>Consider sorting the array [10, 80, 30, 90, 40, 50, 70] using Quick Sort.<\/p><p><strong>Initial Array<\/strong>:<br>[10, 80, 30, 90, 40, 50, 70]<\/p><p><strong>Choose Pivot<\/strong>:<br>Select 70 as the pivot.<\/p><p><strong>Partitioning<\/strong>:<br>Reorder the array so elements less than 70 are on the left and those greater are on the right. After partitioning, the array looks like:<br>[10, 30, 40, 50, 70, 90, 80]<\/p><p><strong>Recursive Steps<\/strong>:<\/p><ul><li>Sort the left sub-array [10, 30, 40, 50] and the right sub-array [90, 80] recursively.<\/li><\/ul><p><strong>Final Sorted Array<\/strong>:<br>After recursively sorting the sub-arrays, the final sorted array will be:<br>[10, 30, 40, 50, 70, 80, 90]<\/p><h3>Time Complexity of Quick Sort<\/h3><p><strong>Best and Average Case<\/strong>:<\/p><ul><li>The time complexity of Quick Sort is <strong>O(n log n)<\/strong> when the pivot splits the array into relatively equal-sized sub-arrays. This is the average-case performance of Quick Sort.<\/li><\/ul><p><strong>Worst Case<\/strong>:<\/p><ul><li>The worst-case time complexity is <strong>O(n\u00b2)<\/strong>, which occurs when the pivot chosen is the smallest or largest element repeatedly, resulting in highly unbalanced partitions.<\/li><\/ul><p><strong>Space Complexity<\/strong>:<\/p><ul><li>The space complexity of Quick Sort is <strong>O(log n)<\/strong> due to the space required for the recursive stack. Unlike other algorithms like Merge Sort, Quick Sort is <strong>in-place<\/strong>, meaning it doesn\u2019t need extra memory for a separate array.<\/li><\/ul><h3>Optimizations for Quick Sort<\/h3><p><strong>Choosing a Good Pivot<\/strong>:<\/p><ul><li>The efficiency of Quick Sort depends heavily on the choice of the pivot. Randomized Quick Sort, where the pivot is chosen randomly, reduces the chances of worst-case performance.<\/li><\/ul><p><strong>Three-way Partitioning<\/strong>:<\/p><ul><li>In cases where the array contains many repeated elements, three-way partitioning can improve performance. This version of Quick Sort divides the array into three sections: elements less than the pivot, equal to the pivot, and greater than the pivot.<\/li><\/ul><p><strong>Hybrid Approaches<\/strong>:<\/p><ul><li>In practice, Quick Sort is often combined with other sorting algorithms like Insertion Sort for smaller sub-arrays. When the sub-arrays become small enough (e.g., 10 elements or fewer), Insertion Sort can be more efficient.<\/li><\/ul><h3>Applications of Quick Sort<\/h3><p><strong>General Sorting<\/strong>:<\/p><ul><li>Quick Sort is widely used in sorting data because of its efficiency in the average case. It is the go-to algorithm in many libraries and frameworks for general-purpose sorting.<\/li><\/ul><p><strong>Search Algorithms<\/strong>:<\/p><ul><li>Quick Sort is often used as a preprocessing step for algorithms that require sorted data, such as binary search.<\/li><\/ul><p><strong>Distributed Systems<\/strong>:<\/p><ul><li>In distributed systems, Quick Sort can be adapted for parallel sorting, taking advantage of multiple processors.<\/li><\/ul><p><strong>External Sorting<\/strong>:<\/p><ul><li>Quick Sort can be used for external sorting algorithms where the data is too large to fit into memory, though other algorithms like Merge Sort may be more suitable in some cases.<\/li><\/ul><h3>Why Learn Quick Sort?<\/h3><p><strong>Quick Sort<\/strong> is one of the most efficient and versatile sorting algorithms, combining both simplicity and power. It introduces key concepts like recursion, divide-and-conquer, and partitioning, which are fundamental to algorithm design. Learning Quick Sort equips you with the tools to solve a wide range of sorting and optimization problems.<\/p><p><strong>Topics Covered<\/strong>:<\/p><ul><li><strong>Definition of Quick Sort<\/strong>: Understanding the algorithm\u2019s structure and how it works.<\/li><li><strong>Time Complexity<\/strong>: Best, worst, and average cases, along with space complexity.<\/li><li><strong>Optimizations<\/strong>: Techniques to improve the efficiency of Quick Sort.<\/li><li><strong>Applications<\/strong>: Where and how Quick Sort is used in real-world scenarios.<\/li><\/ul><p>For more details and further examples, check out the full article on GeeksforGeeks: <a href=\\\"https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/\\\">https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/<\/a>.<\/p>\",\"source\":\"https:\/\/videos.geeksforgeeks.org\/5c668a30a0c3e8e888afbd3a6ee60cacgfg-QuickSortIntroduction20241008115157\/video.m3u8\",\"category\":[{\"term_id__id\":36,\"term_id__term_name\":\"DSA\",\"term_id__term_type\":2,\"term_id__slug\":\"dsa\"},{\"term_id__id\":110,\"term_id__term_name\":\"Sorting\",\"term_id__term_type\":2,\"term_id__slug\":\"sorting-8frfkn\"},{\"term_id__id\":7,\"term_id__term_name\":\"Data Structures\",\"term_id__term_type\":1,\"term_id__slug\":\"data-structures\"},{\"term_id__id\":562,\"term_id__term_name\":\"DSA\",\"term_id__term_type\":1,\"term_id__slug\":\"dsa-lpubwc\"}],\"meta\":{\"thumbnail\":\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-small.png\",\"largeThumbnail\":\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150.png\",\"likes\":2,\"views\":216560,\"isFeatured\":0,\"isPremium\":0,\"isPublic\":0,\"format\":\"video\/mp4\",\"revision\":{}},\"time\":\"08\/10\/2024\",\"subtitle\":\"https:\/\/videos.geeksforgeeks.org\/5c668a30a0c3e8e888afbd3a6ee60cacgfg-QuickSortIntroduction20241008115157\/subtitle.vtt\",\"duration\":372,\"course_link\":null,\"video_schema\":{\"@context\":\"https:\/\/schema.org\",\"@type\":\"VideoObject\",\"name\":\"QuickSort Introduction\",\"description\":\"Quick Sort Algorithm  Comprehensive GuideQuick Sort is one of the most efficient and widely-used sorting algorithms based on the divide-and-conquer strategy. It works by selecting a pivot element and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.What is Quick Sort?Quick Sort is a comparison-based sorting algorithm that efficiently sorts elements by partitioning the array into smaller sub-arrays. The core idea is to pick a pivot element, partition the array around the pivot, and recursively sort the sub-arrays. This results in a time complexity of O(n log n) on average, making it one of the fastest sorting algorithms.How Quick Sort WorksChoose a PivotSelect a pivot element from the array. The pivot can be any element, but common choices include the first element, the last element, or a randomly selected one.PartitioningReorder the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it. The pivot is now in its correct position in the sorted array.Recursively Sort the Sub-arraysApply the same process recursively to the sub-arrays (the elements less than and greater than the pivot). Continue dividing and sorting until the sub-arrays have only one element or are empty.Example of Quick SortConsider sorting the array 10, 80, 30, 90, 40, 50, 70 using Quick Sort.Initial Array10, 80, 30, 90, 40, 50, 70Choose PivotSelect 70 as the pivot.PartitioningReorder the array so elements less than 70 are on the left and those greater are on the right. After partitioning, the array looks like10, 30, 40, 50, 70, 90, 80Recursive StepsSort the left sub-array 10, 30, 40, 50 and the right sub-array 90, 80 recursively.Final Sorted ArrayAfter recursively sorting the sub-arrays, the final sorted array will be10, 30, 40, 50, 70, 80, 90Time Complexity of Quick SortBest and Average CaseThe time complexity of Quick Sort is O(n log n) when the pivot splits the array into relatively equal-sized sub-arrays. This is the average-case performance of Quick Sort.Worst CaseThe worst-case time complexity is O(n), which occurs when the pivot chosen is the smallest or largest element repeatedly, resulting in highly unbalanced partitions.Space ComplexityThe space complexity of Quick Sort is O(log n) due to the space required for the recursive stack. Unlike other algorithms like Merge Sort, Quick Sort is in-place, meaning it doesnt need extra memory for a separate array.Optimizations for Quick SortChoosing a Good PivotThe efficiency of Quick Sort depends heavily on the choice of the pivot. Randomized Quick Sort, where the pivot is chosen randomly, reduces the chances of worst-case performance.Three-way PartitioningIn cases where the array contains many repeated elements, three-way partitioning can improve performance. This version of Quick Sort divides the array into three sections elements less than the pivot, equal to the pivot, and greater than the pivot.Hybrid ApproachesIn practice, Quick Sort is often combined with other sorting algorithms like Insertion Sort for smaller sub-arrays. When the sub-arrays become small enough (e.g., 10 elements or fewer), Insertion Sort can be more efficient.Applications of Quick SortGeneral SortingQuick Sort is widely used in sorting data because of its efficiency in the average case. It is the go-to algorithm in many libraries and frameworks for general-purpose sorting.Search AlgorithmsQuick Sort is often used as a preprocessing step for algorithms that require sorted data, such as binary search.Distributed SystemsIn distributed systems, Quick Sort can be adapted for parallel sorting, taking advantage of multiple processors.External SortingQuick Sort can be used for external sorting algorithms where the data is too large to fit into memory, though other algorithms like Merge Sort may be more suitable in some cases.Why Learn Quick Sort?Quick Sort is one of the most efficient and versatile sorting algorithms, combining both simplicity and power. It introduces key concepts like recursion, divide-and-conquer, and partitioning, which are fundamental to algorithm design. Learning Quick Sort equips you with the tools to solve a wide range of sorting and optimization problems.Topics CoveredDefinition of Quick Sort Understanding the algorithms structure and how it works.Time Complexity Best, worst, and average cases, along with space complexity.Optimizations Techniques to improve the efficiency of Quick Sort.Applications Where and how Quick Sort is used in real-world scenarios.For more details and further examples, check out the full article on GeeksforGeeks httpswww.geeksforgeeks.orgquick-sort-algorithm.\",\"thumbnailUrl\":[\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150.png\",\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-seo.png\",\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-small.png\"],\"uploadDate\":\"2024-10-08T11:57:19Z\",\"duration\":\"PT0H6M12S\",\"contentUrl\":\"https:\/\/www.geeksforgeeks.org\/videos\/quicksort-introduction\/\"}},{\"id\":10658,\"title\":\"QuickSort using Lomuto Partition\",\"slug\":\"quicksort-using-lomuto-partition-1\",\"description\":\"<h2>QuickSort Algorithm Using Lomuto Partition | Comprehensive Guide<\/h2><p><strong>QuickSort<\/strong> is a highly efficient sorting algorithm that uses the <strong>divide and conquer<\/strong> approach to sort elements. One of the key components of the QuickSort algorithm is the <strong>partitioning<\/strong> method, which determines how the array is divided. The <strong>Lomuto partition<\/strong> scheme is a simple and commonly used partitioning technique in QuickSort, making it easier to implement and understand.<\/p><h3>What is QuickSort?<\/h3><p><strong>QuickSort<\/strong> is a sorting algorithm that works by selecting a \\\"pivot\\\" element from the array and partitioning the other elements into two groups:<\/p><ul><li>Elements smaller than the pivot.<\/li><li>Elements larger than the pivot.<\/li><\/ul><p>The process is then recursively applied to the subarrays formed by partitioning. QuickSort has an average time complexity of <strong>O(n log n)<\/strong>, making it one of the most efficient algorithms for large datasets.<\/p><h3>Key Steps in QuickSort Using Lomuto Partition<\/h3><p><strong>Choose a Pivot<\/strong>:<\/p><ul><li>The last element of the array is often chosen as the pivot in Lomuto partitioning.<\/li><\/ul><p><strong>Partition the Array<\/strong>:<\/p><ul><li>The array is rearranged such that all elements smaller than the pivot are on its left, and all elements larger than the pivot are on its right. The pivot is placed in its correct sorted position.<\/li><\/ul><p><strong>Recursively Sort Subarrays<\/strong>:<\/p><ul><li>After partitioning, the left and right subarrays (excluding the pivot) are sorted recursively using the same QuickSort process.<\/li><\/ul><h3>Lomuto Partition Scheme<\/h3><p>The <strong>Lomuto partition<\/strong> scheme is a simple method to partition the array. Here's how it works:<\/p><ol><li>The pivot is chosen as the last element of the array.<\/li><li>A pointer i is initialized to keep track of the smaller elements' position.<\/li><li>The array is scanned, and whenever an element smaller than the pivot is found, it is swapped with the element at position i. The pointer i is then incremented.<\/li><li>At the end of the scan, the pivot is swapped with the element at position i, placing it in its correct sorted position.<\/li><\/ol><h3>Example of Lomuto Partitioning<\/h3><p>Consider the array: <strong>[10, 80, 30, 90, 40, 50, 70]<\/strong><\/p><ul><li>Choose the last element, <strong>70<\/strong>, as the pivot.<\/li><li>During the partitioning process:<ul><li><strong>10<\/strong> is smaller than 70, so no change is made.<\/li><li><strong>80<\/strong> is greater than 70, so nothing is done.<\/li><li><strong>30<\/strong> is smaller than 70, so it's swapped with <strong>80<\/strong>.<\/li><li><strong>90<\/strong> is greater than 70, so nothing is done.<\/li><li><strong>40<\/strong> is smaller than 70, so it's swapped with <strong>80<\/strong>.<\/li><li><strong>50<\/strong> is smaller than 70, so it's swapped with <strong>90<\/strong>.<\/li><\/ul><\/li><\/ul><p>After partitioning, <strong>70<\/strong> is swapped with the element at position i, and the array becomes: <strong>[10, 30, 40, 50, 70, 90, 80]<\/strong><\/p><p>Now, <strong>70<\/strong> is in its correct sorted position, and QuickSort is applied recursively to the subarrays.<\/p><h3>Pseudocode for QuickSort Using Lomuto Partition<\/h3><p>python<\/p><p>Copy code<\/p><p>def quicksort(arr, low, high):\\n &nbsp; &nbsp;if low &lt; high:\\n &nbsp; &nbsp; &nbsp; &nbsp;# pi is partitioning index, arr[pi] is now at right place\\n &nbsp; &nbsp; &nbsp; &nbsp;pi = partition(arr, low, high)\\n\\n &nbsp; &nbsp; &nbsp; &nbsp;# Recursively sort elements before partition and after partition\\n &nbsp; &nbsp; &nbsp; &nbsp;quicksort(arr, low, pi - 1)\\n &nbsp; &nbsp; &nbsp; &nbsp;quicksort(arr, pi + 1, high)\\n\\ndef partition(arr, low, high):\\n &nbsp; &nbsp;pivot = arr[high] &nbsp;# pivot is the last element\\n &nbsp; &nbsp;i = low - 1 &nbsp;# index of smaller element\\n\\n &nbsp; &nbsp;for j in range(low, high):\\n &nbsp; &nbsp; &nbsp; &nbsp;if arr[j] &lt;= pivot:\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i = i + 1\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;arr[i], arr[j] = arr[j], arr[i] &nbsp;# swap\\n\\n &nbsp; &nbsp;arr[i + 1], arr[high] = arr[high], arr[i + 1] &nbsp;# move pivot to correct position\\n &nbsp; &nbsp;return i + 1\\n<\/p><h3>Key Points:<\/h3><ul><li>The pivot is chosen as the last element.<\/li><li>The function partition rearranges the array and returns the pivot's position.<\/li><li>The quicksort function recursively applies the QuickSort to the left and right subarrays.<\/li><\/ul><h3>Time Complexity of QuickSort Using Lomuto Partition<\/h3><ul><li><strong>Best Case<\/strong>: <strong>O(n log n)<\/strong>, which occurs when the pivot consistently divides the array into two nearly equal parts.<\/li><li><strong>Worst Case<\/strong>: <strong>O(n\u00b2)<\/strong>, which happens when the pivot is the smallest or largest element, leading to highly unbalanced partitions.<\/li><li><strong>Average Case<\/strong>: <strong>O(n log n)<\/strong>, making QuickSort efficient for large datasets in most practical scenarios.<\/li><\/ul><h3>Space Complexity<\/h3><ul><li>The space complexity is <strong>O(log n)<\/strong> due to the recursive nature of QuickSort.<\/li><\/ul><h3>Advantages of Using QuickSort with Lomuto Partition<\/h3><ol><li><strong>Efficient<\/strong>: QuickSort has an average time complexity of <strong>O(n log n)<\/strong>, making it one of the most efficient sorting algorithms.<\/li><li><strong>In-Place Sorting<\/strong>: QuickSort does not require additional memory for a new array, as the sorting is done in-place.<\/li><li><strong>Simple Implementation<\/strong>: The Lomuto partition scheme is easy to implement and understand, making it a good choice for learning QuickSort.<\/li><\/ol><h3>Disadvantages of Lomuto Partition<\/h3><ol><li><strong>Not Ideal for Large Duplicate Elements<\/strong>: Lomuto partition performs poorly if the array contains many duplicate elements, as it can lead to unbalanced partitions.<\/li><li><strong>Worst-Case Scenario<\/strong>: The worst-case time complexity of <strong>O(n\u00b2)<\/strong> occurs when the pivot consistently picks the largest or smallest element in the array.<\/li><\/ol><h3>Applications of QuickSort<\/h3><ol><li><strong>Large Datasets<\/strong>: QuickSort is widely used for sorting large datasets efficiently due to its average <strong>O(n log n)<\/strong> time complexity.<\/li><li><strong>Memory-Constrained Environments<\/strong>: Since QuickSort is an in-place sorting algorithm, it is well-suited for environments with limited memory.<\/li><li><strong>Data Processing<\/strong>: QuickSort is used in many data processing algorithms where fast sorting of data is required.<\/li><\/ol><h3>Why Learn QuickSort Using Lomuto Partition?<\/h3><p>Learning QuickSort using the <strong>Lomuto partition<\/strong> scheme introduces you to a highly efficient sorting algorithm that is easy to implement and understand. It helps build a foundation in recursive algorithms, divide-and-conquer strategies, and algorithmic optimizations. QuickSort is widely used in competitive programming, software development, and data processing, making it a must-know algorithm for programmers and developers.<\/p><p><strong>Topics Covered<\/strong>:<\/p><ol><li><strong>QuickSort Overview<\/strong>: Understanding the QuickSort algorithm and how it works.<\/li><li><strong>Lomuto Partition Scheme<\/strong>: How the Lomuto partition works and its implementation in QuickSort.<\/li><li><strong>Time Complexity<\/strong>: Analysis of best, worst, and average-case scenarios for QuickSort.<\/li><li><strong>Applications<\/strong>: Practical uses of QuickSort in large datasets, memory-constrained environments, and data processing.<\/li><\/ol><p>For more details and further examples, check out the full article on GeeksforGeeks: <a href=\\\"https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/\\\">https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/<\/a>.<\/p>\",\"source\":\"https:\/\/videos.geeksforgeeks.org\/e3434a976140115c858c39a24be50b0agfg-QuickSortUsingLomuto20241008115304\/video.m3u8\",\"category\":[{\"term_id__id\":36,\"term_id__term_name\":\"DSA\",\"term_id__term_type\":2,\"term_id__slug\":\"dsa\"},{\"term_id__id\":110,\"term_id__term_name\":\"Sorting\",\"term_id__term_type\":2,\"term_id__slug\":\"sorting-8frfkn\"},{\"term_id__id\":7,\"term_id__term_name\":\"Data Structures\",\"term_id__term_type\":1,\"term_id__slug\":\"data-structures\"},{\"term_id__id\":562,\"term_id__term_name\":\"DSA\",\"term_id__term_type\":1,\"term_id__slug\":\"dsa-lpubwc\"}],\"meta\":{\"thumbnail\":\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortusingLomutoPartition\/QuickSortusingLomutoPartition20241008115629-small.png\",\"largeThumbnail\":\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortusingLomutoPartition\/QuickSortusingLomutoPartition20241008115629.png\",\"likes\":1,\"views\":37940,\"isFeatured\":0,\"isPremium\":0,\"isPublic\":0,\"format\":\"video\/mp4\",\"revision\":{}},\"time\":\"08\/10\/2024\",\"subtitle\":\"https:\/\/videos.geeksforgeeks.org\/e3434a976140115c858c39a24be50b0agfg-QuickSortUsingLomuto20241008115304\/subtitle.vtt\",\"duration\":506,\"course_link\":null}]");
                    </script>
                
<!-- gfg tabs compatablity bundled js -->
  <script defer="" src="./Quick Sort - GeeksforGeeks_files/codetabs.js.descarga" environment="production" domain="gfg" no-scroll=""></script>

<title>Quick Sort - GeeksforGeeks</title>
<link rel="profile" href="http://gmpg.org/xfn/11">
<link rel="pingback" href="https://www.geeksforgeeks.org/dsa/quick-sort-algorithm/">
<!--[if lt IE 9]>
<script src="https://www.geeksforgeeks.org/wp-content/themes/iconic-one/js/html5.js" type="text/javascript"></script>
<![endif]-->


<!-- Video Schema for posts only -->
            <script type="application/ld+json">{"@context":"https://schema.org","@type":"VideoObject","name":"QuickSort Introduction","description":"Quick Sort Algorithm  Comprehensive GuideQuick Sort is one of the most efficient and widely-used sorting algorithms based on the divide-and-conquer strategy. It works by selecting a pivot element and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.What is Quick Sort?Quick Sort is a comparison-based sorting algorithm that efficiently sorts elements by partitioning the array into smaller sub-arrays. The core idea is to pick a pivot element, partition the array around the pivot, and recursively sort the sub-arrays. This results in a time complexity of O(n log n) on average, making it one of the fastest sorting algorithms.How Quick Sort WorksChoose a PivotSelect a pivot element from the array. The pivot can be any element, but common choices include the first element, the last element, or a randomly selected one.PartitioningReorder the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it. The pivot is now in its correct position in the sorted array.Recursively Sort the Sub-arraysApply the same process recursively to the sub-arrays (the elements less than and greater than the pivot). Continue dividing and sorting until the sub-arrays have only one element or are empty.Example of Quick SortConsider sorting the array 10, 80, 30, 90, 40, 50, 70 using Quick Sort.Initial Array10, 80, 30, 90, 40, 50, 70Choose PivotSelect 70 as the pivot.PartitioningReorder the array so elements less than 70 are on the left and those greater are on the right. After partitioning, the array looks like10, 30, 40, 50, 70, 90, 80Recursive StepsSort the left sub-array 10, 30, 40, 50 and the right sub-array 90, 80 recursively.Final Sorted ArrayAfter recursively sorting the sub-arrays, the final sorted array will be10, 30, 40, 50, 70, 80, 90Time Complexity of Quick SortBest and Average CaseThe time complexity of Quick Sort is O(n log n) when the pivot splits the array into relatively equal-sized sub-arrays. This is the average-case performance of Quick Sort.Worst CaseThe worst-case time complexity is O(n), which occurs when the pivot chosen is the smallest or largest element repeatedly, resulting in highly unbalanced partitions.Space ComplexityThe space complexity of Quick Sort is O(log n) due to the space required for the recursive stack. Unlike other algorithms like Merge Sort, Quick Sort is in-place, meaning it doesnt need extra memory for a separate array.Optimizations for Quick SortChoosing a Good PivotThe efficiency of Quick Sort depends heavily on the choice of the pivot. Randomized Quick Sort, where the pivot is chosen randomly, reduces the chances of worst-case performance.Three-way PartitioningIn cases where the array contains many repeated elements, three-way partitioning can improve performance. This version of Quick Sort divides the array into three sections elements less than the pivot, equal to the pivot, and greater than the pivot.Hybrid ApproachesIn practice, Quick Sort is often combined with other sorting algorithms like Insertion Sort for smaller sub-arrays. When the sub-arrays become small enough (e.g., 10 elements or fewer), Insertion Sort can be more efficient.Applications of Quick SortGeneral SortingQuick Sort is widely used in sorting data because of its efficiency in the average case. It is the go-to algorithm in many libraries and frameworks for general-purpose sorting.Search AlgorithmsQuick Sort is often used as a preprocessing step for algorithms that require sorted data, such as binary search.Distributed SystemsIn distributed systems, Quick Sort can be adapted for parallel sorting, taking advantage of multiple processors.External SortingQuick Sort can be used for external sorting algorithms where the data is too large to fit into memory, though other algorithms like Merge Sort may be more suitable in some cases.Why Learn Quick Sort?Quick Sort is one of the most efficient and versatile sorting algorithms, combining both simplicity and power. It introduces key concepts like recursion, divide-and-conquer, and partitioning, which are fundamental to algorithm design. Learning Quick Sort equips you with the tools to solve a wide range of sorting and optimization problems.Topics CoveredDefinition of Quick Sort Understanding the algorithms structure and how it works.Time Complexity Best, worst, and average cases, along with space complexity.Optimizations Techniques to improve the efficiency of Quick Sort.Applications Where and how Quick Sort is used in real-world scenarios.For more details and further examples, check out the full article on GeeksforGeeks httpswww.geeksforgeeks.orgquick-sort-algorithm.","thumbnailUrl":["https://media.geeksforgeeks.org/geeksforgeeks/QuickSortIntroduction/QuickSortIntroduction20241008115150.png","https://media.geeksforgeeks.org/geeksforgeeks/QuickSortIntroduction/QuickSortIntroduction20241008115150-seo.png","https://media.geeksforgeeks.org/geeksforgeeks/QuickSortIntroduction/QuickSortIntroduction20241008115150-small.png"],"uploadDate":"2024-10-08T11:57:19Z","duration":"PT0H6M12S","contentUrl":"https://www.geeksforgeeks.org/videos/quicksort-introduction/"}</script>
      
<!-- adding article schema markup -->


<!--POST SCHEMA through API-->
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "Article",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "id": "https://www.geeksforgeeks.org/dsa/quick-sort-algorithm/"
  },
  "headline": "Quick Sort",
  "datePublished": "2014-01-07 06:57:29",
  "dateModified": "2025-10-03 04:43:14",
  "image": {
    "@type": "ImageObject",
    "url": "https://www.geeksforgeeks.org/wp-content/uploads/gq/2014/01/QuickSort2.png",
    "width": "703",
    "height": "312"
  },
  "author": {
    "@type": "Organization",
    "name": "GeeksforGeeks",
    "url": "https://www.geeksforgeeks.org/",
    "logo": {
      "@type": "ImageObject",
      "url": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/logo-new-2.svg",
      "width": "301",
      "height": "40"
    }
  },
  "publisher": {
    "@type": "Organization",
    "name": "GeeksforGeeks",
    "url": "https://www.geeksforgeeks.org/",
    "logo": {
      "@type": "ImageObject",
      "url": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/logo-new-2.svg",
      "width": "301",
      "height": "40"
    }
  },
  "description": "QuickSort is a sorting algorithm based on the Divide and Conquer that picks an element as a pivot and partitions the given array around the picked pivot by placing the pivot in its correct position in the sorted array. It works on the principle of divide and conquer, breaking down",
  "about": [
    {
      "@type": "Thing",
      "name": "DivideAndConquer"
    },
    {
      "@type": "Thing",
      "name": "Sorting"
    },
    {
      "@type": "Thing",
      "name": "Dsa"
    },
    {
      "@type": "Thing",
      "name": "Adobe"
    },
    {
      "@type": "Thing",
      "name": "Qualcomm"
    },
    {
      "@type": "Thing",
      "name": "Samsung"
    },
    {
      "@type": "Thing",
      "name": "GoldmanSachs"
    },
    {
      "@type": "Thing",
      "name": "SapLabs"
    },
    {
      "@type": "Thing",
      "name": "TargetCorporation"
    },
    {
      "@type": "Thing",
      "name": "Hsbc"
    },
    {
      "@type": "Thing",
      "name": "QuickSort"
    },
    {
      "@type": "Thing",
      "name": "DsaTutorials"
    }
  ]
}</script>
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": "GeeksforGeeks",
  "url": "https://www.geeksforgeeks.org/",
  "potentialAction": {
    "@type": "SearchAction",
    "target": "https://www.geeksforgeeks.org/search/{search_term_string}/",
    "query-input": "required name=search_term_string"
  }
}</script>
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "Organization",
  "name": "GeeksforGeeks",
  "url": "https://www.geeksforgeeks.org/",
  "logo": "https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200817185016/gfg_complete_logo_2x-min.png",
  "description": "Your All-in-One Learning Portal: GeeksforGeeks is a comprehensive educational platform that empowers learners across domains-spanning computer science and programming, school education, upskilling, commerce, software tools, competitive exams, and more.",
  "founder": [
    {
      "@type": "Person",
      "name": "Sandeep Jain",
      "url": "https://in.linkedin.com/in/sandeep-jain-b3940815"
    }
  ],
  "sameAs": [
    "https://www.facebook.com/geeksforgeeks.org/",
    "https://twitter.com/geeksforgeeks",
    "https://www.linkedin.com/company/1299009",
    "https://www.youtube.com/geeksforgeeksvideos/"
  ]
}</script>
<script type="application/ld+json">{
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "DSA",
      "item": {
        "@type": "Thing",
        "@id": "https://www.geeksforgeeks.org/category/dsa/"
      }
    },
    {
      "@type": "ListItem",
      "position": 2,
      "name": "quick-sort-algorithm",
      "item": {
        "@type": "Thing",
        "@id": "https://www.geeksforgeeks.org/dsa/quick-sort-algorithm/"
      }
    }
  ]
}</script>
<script>
    var arrPostCat = new Array();
    var arrPostCatName="DSA";
            arrPostCat.push('1750');
            arrPostCat.push('1752');
            arrPostCat.push('6263');
        var tIds = "1750,1752,6263,148,177,180,590,1414,1517,1734,1954,8104";
    var termsNames = "DivideandConquer,Sorting,DSA,Adobe,Qualcomm,Samsung,GoldmanSachs,SAPLabs,TargetCorporation,HSBC,QuickSort,DSATutorials,Algorithms";
    var tIdsInclusiveParents = "1750,1752,6263,148,177,180,590,1414,1517,1734,1954,8104,1744";
    var domain = 1;
    var arrPost = new Array();
    var post_id = "142309";
    var post_type = "post";
    var post_slug = window.location.href;
    var ip = "64.252.73.32";
    var post_title = `Quick Sort`;
    var post_status = "publish";
    var practiceAPIURL="https://practiceapi.geeksforgeeks.org/";
    var practiceURL="https://practice.geeksforgeeks.org/";
    var post_date = "2014-01-07 13:27:29";
    var commentSysUrl = "https://discuss.geeksforgeeks.org/commentEmbedV2.js";
    var matching_category = "dsa";

    //var postAdApiUrlString = "";
    var link_on_code_run = '';
    var link_search_modal_top = '';
    var country_code_cf = "IL";
    
    
        var postAdApiUrlString = '1744/1750/1752/6263/148/177/180/590/1414/1517/1734/1954/8104/';
</script>


<link rel="canonical" href="https://www.geeksforgeeks.org/dsa/quick-sort-algorithm/">
<link rel="dns-prefetch" href="https://cdn.geeksforgeeks.org/">
<link rel="dns-prefetch" href="https://s.w.org/">
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.geeksforgeeks.org\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.9.8"}};
			!function(a,b,c){function d(a,b){var c=String.fromCharCode;l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,a),0,0);var d=k.toDataURL();l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,b),0,0);var e=k.toDataURL();return d===e}function e(a){var b;if(!l||!l.fillText)return!1;switch(l.textBaseline="top",l.font="600 32px Arial",a){case"flag":return!(b=d([55356,56826,55356,56819],[55356,56826,8203,55356,56819]))&&(b=d([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]),!b);case"emoji":return b=d([55358,56760,9792,65039],[55358,56760,8203,9792,65039]),!b}return!1}function f(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var g,h,i,j,k=b.createElement("canvas"),l=k.getContext&&k.getContext("2d");for(j=Array("flag","emoji"),c.supports={everything:!0,everythingExceptFlag:!0},i=0;i<j.length;i++)c.supports[j[i]]=e(j[i]),c.supports.everything=c.supports.everything&&c.supports[j[i]],"flag"!==j[i]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[j[i]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(h=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",h,!1),a.addEventListener("load",h,!1)):(a.attachEvent("onload",h),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),g=c.source||{},g.concatemoji?f(g.concatemoji):g.wpemoji&&g.twemoji&&(f(g.twemoji),f(g.wpemoji)))}(window,document,window._wpemojiSettings);
		</script><script src="./Quick Sort - GeeksforGeeks_files/wp-emoji-release.min.js.descarga" type="text/javascript" defer=""></script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel="stylesheet" id="custom-style-css" href="./Quick Sort - GeeksforGeeks_files/gfg.min.css" type="text/css" media="all">
<script type="text/javascript" src="./Quick Sort - GeeksforGeeks_files/jquery-3.7.1.min.js.descarga"></script>
<script type="text/javascript" src="./Quick Sort - GeeksforGeeks_files/jquery-migrate-3.5.2.min.js.descarga"></script>
<script type="text/javascript">
/* <![CDATA[ */
var gfgObject = {"authUrl":"https:\/\/auth.geeksforgeeks.org\/","writeApiUrl":"https:\/\/apiwrite.geeksforgeeks.org\/","writeUrl":"https:\/\/write.geeksforgeeks.org\/","utilUrl":"https:\/\/util.geeksforgeeks.org\/","apiUrl":"https:\/\/api.geeksforgeeks.org\/","cfApiUrl":"https:\/\/gfgapi.geeksforgeeks.org\/","baseCompilerURL":"https:\/\/codejudge.geeksforgeeks.org\/","idePageBaseUrl":"https:\/\/ide.geeksforgeeks.org\/","gfgApiScriptUrl":"https:\/\/apiscript.geeksforgeeks.org\/","gfgSiteUrl":"https:\/\/www.geeksforgeeks.org\/","curatedListId":"1","curatedListTitle":"SDE Sheet Problems","utilDjangoCfUrl":"https:\/\/utilapi.geeksforgeeks.org\/","premiumCheckoutSlug":"premium-plans-payment\/","premiumLandingSlug":"premium-plans\/","premiumCssUrl":"https:\/\/www.geeksforgeeks.org\/wp-content\/themes\/iconic-one\/css\/gfgpremium.min.css?ver=1.9","premiumJsUrl":"https:\/\/www.geeksforgeeks.org\/wp-content\/themes\/iconic-one\/js\/gfgpremium.min.js?ver=1.6","utilGoogleUrl":"https:\/\/ugprod.geeksforgeeks.org\/","communityApiUrl":"https:\/\/communityapi.geeksforgeeks.org\/","utilDjangoUrl":"https:\/\/gfgutil.geeksforgeeks.org\/","gfgPracticeUrl":"https:\/\/practiceapi.geeksforgeeks.org\/","gfgMediaUrl":"https:\/\/media.geeksforgeeks.org\/","authDjangoApiUrl":"https:\/\/authapi.geeksforgeeks.org\/","gfgMlApiUrl":"https:\/\/recommendations.geeksforgeeks.org\/","is_home":"","is_category":"","userlevelPremiumPlus":"2","practiceUrl":"https:\/\/practice.geeksforgeeks.org\/","gfgNotificationsApiUrl":"https:\/\/notificationsapi.geeksforgeeks.org\/"};
/* ]]> */
</script>
<script type="text/javascript" async="async" src="./Quick Sort - GeeksforGeeks_files/gfg.min.js.descarga"></script>

<style>
#wpadminbar{
background: #ff0000 !important;
}
</style>
<style type="text/css" id="custom-background-css">
body.custom-background { background-color: #ffffff; }
</style>
<link rel="icon" href="https://www.geeksforgeeks.org/wp-content/uploads/gfg_200X200-100x100.png" sizes="32x32">
<link rel="icon" href="https://www.geeksforgeeks.org/wp-content/uploads/gfg_200X200.png" sizes="192x192">
<link rel="apple-touch-icon-precomposed" href="https://www.geeksforgeeks.org/wp-content/uploads/gfg_200X200.png">
<meta name="msapplication-TileImage" content="https://www.geeksforgeeks.org/wp-content/uploads/gfg_200X200.png">

<!--
<script type='text/javascript'>
  var googletag = googletag || {};
  googletag.cmd = googletag.cmd || [];
  (function() {
    var gads = document.createElement('script');
    gads.async = true;
    gads.type = 'text/javascript';
    var useSSL = 'https:' == document.location.protocol;
    gads.src = (useSSL ? 'https:' : 'http:') +
      '//www.googletagservices.com/tag/js/gpt.js';
    var node = document.getElementsByTagName('script')[0];
    node.parentNode.insertBefore(gads, node);
  })();
</script>

 AutoAds
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<script>
(adsbygoogle = window.adsbygoogle || []).push({
google_ad_client: "ca-pub-9465609616171866",
enable_page_level_ads: true
});
</script>
-->




<style>

    #internal-promo-section{
        display: none !important;
    }
    @media screen and (max-width:1500px) and (min-width:1280px){
        body.single .article-page_flex .leftBar {
            flex-basis: calc(100% - 605px);
            max-width: calc(100% - 605px);
            min-width: calc(100% - 605px);
        }
        
        .sidebar_wrapper{
            max-width: 300px;
            min-width: 300px;
        }
        
        div#secondary {
            min-width: 300px;
            max-width: 300px;
        }
        
        .widget-area{
            padding: 0px;
        }
        
        .article-page_flex .rightBar{
            padding: 20px 0px 0px 0px;
        }
        
        .article--viewer_content .a-wrapper .content {
            padding: 0px 10px 55px 20px;
        }
        
        .oinLeftbar {
            height: calc(100vh - 350px) !important;
        }  
    }
    .autoLeftBar_oin_child{
        height: 100% !important;
    }
    .autoLeftBar_oin_non_sticky{
        height: unset !important;
    }
    .sideBar--wrap.newLeftbar > div[id^='GFG_AD_Leftsidebar_']:nth-of-type(1){
        padding-top: 20px;
    }
    .sideBar--wrap.newLeftbar > div[id^='GFG_AD_Leftsidebar_']{
        padding: 5px 0;
    }

@media (max-width:1043px) and (min-width:992px) {
 .hide-1043992 {
   display: none!important;
 }
}

.mobile-header-list-item{
    padding-left:30px; 
    padding-right:10px;
    margin-top:5px;
}

.mobile-header-list{
    border-bottom: 1px solid rgba(158, 158, 158, 0.3) !important;
}

.mobile-header-list .dropdown-title{
    border-bottom: none !important;
    font-size: 16px!important; 
    padding: 0px!important; 
    padding-left: 45px!important; 
    font-weight: normal;
}

.mobile-header-list .upside::after{
    transform: rotate(180deg);
}

</style>
<!-- End Google Tag Manager -->
<!-- Global site tag (gtag.js) - Google Ads: 474915276 -->
<!-- <script async src="https://www.googletagmanager.com/gtag/js?id=AW-474915276"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'AW-474915276');
</script> -->

<script src="./Quick Sort - GeeksforGeeks_files/index.min.js.descarga" type="text/javascript"></script><link rel="stylesheet" href="./Quick Sort - GeeksforGeeks_files/index.min.css"><script src="./Quick Sort - GeeksforGeeks_files/require.js.descarga" type="text/javascript" environment="production" domain="gfg" no-scroll=""></script><link rel="stylesheet" href="./Quick Sort - GeeksforGeeks_files/index.css"><link rel="stylesheet" href="./Quick Sort - GeeksforGeeks_files/codemirror.css"><script src="./Quick Sort - GeeksforGeeks_files/index.js.descarga" type="text/javascript" environment="production" domain="gfg" no-scroll=""></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="codemirror/lib/codemirror" src="./Quick Sort - GeeksforGeeks_files/codemirror.js.descarga"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="codemirror/addon/mode/loadmode" src="./Quick Sort - GeeksforGeeks_files/loadmode.js.descarga"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="codemirror/addon/selection/active-line" src="./Quick Sort - GeeksforGeeks_files/active-line.js.descarga"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="codemirror/addon/fold/foldcode" src="./Quick Sort - GeeksforGeeks_files/foldcode.js.descarga"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="codemirror/mode/clike/clike" src="./Quick Sort - GeeksforGeeks_files/clike.js.descarga"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="typeahead" src="./Quick Sort - GeeksforGeeks_files/typeahead.jquery.min.js.descarga"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="bloodhound" src="./Quick Sort - GeeksforGeeks_files/bloodhound.min.js.descarga"></script></head>

<body class="post-template-default single single-post postid-142309 single-format-standard custom-background custom-background-white" data-dark-mode="true" data-new-gr-c-s-check-loaded="14.1258.0" data-gr-ext-installed="">



    <script>
        // Dark mode script

        const gfgThemeList = Object.freeze({
            LIGHT: "gfgThemeLight",
            DARK: "gfgThemeDark"
        })
        const getThemeFromCookie = () => {
            let gfg_def_theme = "";
            let cookies = document.cookie;
            let cooks = cookies.split(";");
        
            for (let i = 0; i < cooks.length; i++) {   
                let icook = cooks[i].split("=");
                if (icook[0].trim() == "gfg_theme") {
                    gfg_def_theme = icook[1].trim();
                }
            }
            return gfg_def_theme
        }
        if(!(post_slug.includes('premium-plans-payment/') || post_slug.includes('premium-plans/'))){
            var isDarkMode = getThemeFromCookie() == gfgThemeList.DARK ? true : false;
            document.querySelector("body").setAttribute("data-dark-mode", isDarkMode);
        }
 

        function setSearchBarFocus() {
          const myTimeout = setTimeout(searchBarFocus, 0);
          function searchBarFocus() {
            document.getElementById("gcse-search-input").focus();
          }
        }

        
    </script>

    <!-- <div class="header-main__wrapper not-fixed"> -->
    <nav>
    <div class="header-main__wrapper">
        <a class="gfg-stc" style="top:0" href="https://www.geeksforgeeks.org/dsa/quick-sort-algorithm/#main">Skip to content</a>

        <div class="header-main__container">
            <ul class="header-main-right">
            
                <a href="https://www.geeksforgeeks.org/" aria-label="Logo" class="header-main__logo">
                    <div class="_logo">
                        <img class="gfg_logo_img" style="height: 30px;" src="./Quick Sort - GeeksforGeeks_files/gfg-gg-logo.svg" alt="geeksforgeeks">
                    </div>
                </a>
                
                        <li class="header-main__left-list-item gcse-search_li p-relative" aria-expanded="false" data-expandable="false">
                    <div class="gcse-form-search-suggestion_wrapper" style="margin-left: 6px">
                        <form id="gcse-form" class="gcse-form_class p-relative closeChatScreen gcse-form-web" data-sm="true">
                            <span class="front-search-icon" style="display: block;"><i class="gfg-icon gfg-icon_search gfg-icon_white gcse-search__icon gcse-search-icon_grey"></i> </span>
                            <input class="gcse-search-input__wrapper" id="gcse-search-input" aria-expanded="true" placeholder="Search..." autocomplete="off">
                            <button aria-label="search" type="submit" class="gcse-search__btn" style="display: none;">
                                <i class="gfg-icon gfg-icon_search gfg-icon_white gcse-search__icon"></i>
                            </button>
                        </form>
                        <div class="gfg-search-suggestion_wrapper" style="display:none"></div>
                    <div>
                </div></div></li>
                 
            </ul>

        <!-- For Web view only -->
        <ul class="header-main__list"><li class="header-main__list-item Header_1" data-parent="false" aria-expanded="false" data-expandable="true"><span>Tutorials</span><i class="gfg-icon gfg-icon_arrow-down gfg-icon_header"></i><ul class="mega-dropdown Screen_1"><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/python/python-programming-language-tutorial/" target="_self">Python</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/java/java/" target="_self">Java</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/learn-data-structures-and-algorithms-dsa-tutorial/" target="_self">DSA</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/ai-ml-and-data-science-tutorial-learn-ai-ml-and-data-science/" target="_self">ML &amp; Data Science</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/interview-corner/" target="_self">Interview Corner</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/programming-language-tutorials/" target="_self">Programming Languages</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/web-technology/" target="_self">Web Development</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/articles-on-computer-science-subjects-gq/" target="_self">CS Subjects</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/devops/devops-tutorial/" target="_self">DevOps</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/websites-apps/software-and-tools-a-to-z-list/" target="_self">Software and Tools</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/geeksforgeeks-school/" target="_self">School Learning</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/geeksforgeeks-practice-best-online-coding-platform/" target="_self">Practice Coding Problems</a></li></ul></li><li class="header-main__list-item Header_2" data-parent="false" aria-expanded="false" data-expandable="true"><span>Courses</span><i class="gfg-icon gfg-icon_arrow-down gfg-icon_header"></i><ul class="mega-dropdown Screen_1"><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/category/dsa-placements" target="_self">DSA / Placements</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/category/machine-learning-data-science" target="_self">ML &amp; Data Science</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/category/development-testing" target="_self">Development</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/category/cloud-devops" target="_self">Cloud / DevOps</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/category/programming-languages" target="_self">Programming Languages</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses" target="_self">All Courses</a></li></ul></li><li class="header-main__list-item Header_3" data-parent="false" aria-expanded="false" data-expandable="true"><span>Tracks</span><i class="gfg-icon gfg-icon_arrow-down gfg-icon_header"></i><ul class="mega-dropdown Screen_1"><li class="mega-dropdown__list-item" data-parent="false" aria-expanded="true" data-expandable="true"><span>Languages</span><i class="gfg-icon gfg-icon_arrow-right"></i><ul class="mega-dropdown Screen_2"><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/python-skill-up" target="_self">Python</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/c-skill-up" target="_self">C</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/skill-up-cpp" target="_self">C++</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/java-skill-up" target="_self">Java</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/advanced-java-skill-up" target="_self">Advanced Java</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/sql-skill-up" target="_self">SQL</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/complete-java-script-skill-up" target="_self">JavaScript</a></li></ul></li><li class="mega-dropdown__list-item" data-parent="false" aria-expanded="true" data-expandable="true"><span>Interview Preparation</span><i class="gfg-icon gfg-icon_arrow-right"></i><ul class="mega-dropdown Screen_2"><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/gfg-160-series" target="_self">GfG 160</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/dsa-skill-up" target="_self">GfG 360</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/system-design-skill-up" target="_self">System Design</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/cs-core-subjects-skill-up" target="_self">Core Subjects</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/interview-qna-skill-up" target="_self">Interview Questions</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/100-days-of-interview-puzzles-skill-up" target="_self">Interview Puzzles</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/aptitude-and-reasoning-skill-up" target="_self">Aptitude and Reasoning</a></li></ul></li><li class="mega-dropdown__list-item" data-parent="false" aria-expanded="true" data-expandable="true"><span>Data Science</span><i class="gfg-icon gfg-icon_arrow-right"></i><ul class="mega-dropdown Screen_2"><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/python-skill-up" target="_self">Python</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/data-analytics-skill-up" target="_self">Data Analytics</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/ds-16" target="_self">Complete Data Science</a></li></ul></li><li class="mega-dropdown__list-item" data-parent="false" aria-expanded="true" data-expandable="true"><span>Dev Skills</span><i class="gfg-icon gfg-icon_arrow-right"></i><ul class="mega-dropdown Screen_2"><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/full-stack-web-dev-skill-up" target="_self">Full-Stack Web Dev</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/devops-skill-up" target="_self">DevOps</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/software-testing-skill-up" target="_self">Software Testing</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/cyber-security-skill-up" target="_self">CyberSecurity</a></li></ul></li><li class="mega-dropdown__list-item" data-parent="false" aria-expanded="true" data-expandable="true"><span>Tools</span><i class="gfg-icon gfg-icon_arrow-right"></i><ul class="mega-dropdown Screen_2"><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/computer-fundamentals-skill-up" target="_self">Computer Fundamentals</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/ai-tools-skill-up" target="_self">AI Tools</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/ms-excel-and-google-spreadsheets" target="_self">MS Excel &amp; Google Sheets</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/ms-word-and-google-docs-skill-up" target="_self">MS Word &amp; Google Docs</a></li></ul></li><li class="mega-dropdown__list-item" data-parent="false" aria-expanded="true" data-expandable="true"><span>Maths</span><i class="gfg-icon gfg-icon_arrow-right"></i><ul class="mega-dropdown Screen_2"><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/maths-for-computer-science-skill-up" target="_self">Maths For Computer Science</a></li><li class="mega-dropdown__list-item" data-child="true" aria-expanded="false" data-expandable="false"><a href="https://www.geeksforgeeks.org/courses/engineering-mathematics-skill-up" target="_self">Engineering Mathematics</a></li></ul></li></ul></li></ul>
        <!-- right now only search is visible for mobile view because of css and all are visible for web view -->
            <ul class="header-main__left-list" data-nl="false">
                                            <!-- <li>
                    <div class="darkMode-wrap" data-mode="Switch to Dark Mode">
                        <button aria-label="toggle theme" data-gfg-action="toggleGFGTheme">
                            <div id="darkMode-wrap-red-dot" style="height:12px;width:12px;background-color:#EB2222;border-radius:999999px;position:absolute;top:4px;right:0;display:none;"></div>
                            <i class="gfg-icon gfg-icon_dark-mode"></i>
                        </button>
                        <span id="darkModeTooltipText"></span>
                    </div>
                </li> -->

                <!--                 <li class="header-main__left-list-item google-translate-parent-element" aria-expanded="false" data-expanded="true">
                    <div class="translate" id="g_translater">
                        <div id="google_translate_element" data-show="false"></div>
                    </div>
                    <div class="translator-icon-div">
                        <i class ="gfg-icon gfg-icon_translate googleTranslateToggle" data-gfg-action="google_translate_element"></i>
                    </div> -->
                    <!-- removed below code from here to load google translate js dynamically -->
                    <!-- <script>
                        var m = false;
                        function googleTranslateElementInit() {
                            new google.translate.TranslateElement({pageLanguage: 'en'}, 'google_translate_element');
                            setTimeout(function(){
                                if (jQuery( window ).width() < 768){
                                    m = true;
                                     jQuery('#g_translater').detach().appendTo('#google_translate_mobile');                            
                                }
                            }, 7000);
                        }
                        jQuery( window ).resize(function() {
                            if (jQuery( window ).width() < 768 && m == false){
                                m = true;
                                jQuery('#g_translater').detach().appendTo('#google_translate_mobile');  
                            } else if (jQuery( window ).width() >= 768 && m == true){
                                m = false;
                                jQuery('#g_translater').detach().prependTo('.google-translate-parent-element');                            
                            }
                        });
                    </script> -->
                <!-- </li> -->
                <!--  -->

                <li>
                    <div class="darkMode-wrap" data-mode="Switch to Light Mode">
                        <button aria-label="toggle theme" data-gfg-action="toggleGFGTheme">
                            <div id="darkMode-wrap-red-dot" style="height: 12px; width: 12px; background-color: rgb(235, 34, 34); border-radius: 999999px; position: absolute; top: 4px; right: 0px;"></div>
                            <i class="gfg-icon gfg-icon_dark-mode"></i>
                        </button>
                        <span id="darkModeTooltipText">Switch to Dark Mode</span>
                    </div>
                </li>

                                

                <li id="userProfileId" class="header-main__left-list-item p-relative" aria-expanded="false" data-expandable="false">
                <a type="button" class="header-main__signup login-modal-btn" href="https://www.geeksforgeeks.org/dsa/quick-sort-algorithm/">Sign In</a>
            </li>
                            </ul>
        </div>

        <!-- for mobile only -->
        
        <!-- for mobile only -->
               
       </div>
    </nav>
    <div style="display: none;"></div><div id="header-main__slider-outer-div">
        <div class="header-main__slider">
            <button aria-label="sub header slider previous" class="header-main__slider-arrow previous hideIt">
                <i class="gfg-icon gfg-icon_arrow-left gicon-centered"></i>
            </button>
            <!-- main content for leftbar -->
            <ul id="hslider">
            <li><a href="https://www.geeksforgeeks.org/dsa/dsa-tutorial-learn-data-structures-and-algorithms/">DSA Tutorial</a></li><li><a href="https://www.geeksforgeeks.org/dsa/top-100-data-structure-and-algorithms-dsa-interview-questions-topic-wise/">Interview Questions</a></li><li><a href="https://www.geeksforgeeks.org/dsa/data-structures-and-algorithms-online-quiz/">Quizzes</a></li><li><a href="https://www.geeksforgeeks.org/dsa/must-do-coding-questions-for-companies-like-amazon-microsoft-adobe/">Must Do</a></li><li><a href="https://www.geeksforgeeks.org/dsa/advanced-data-structures/">Advanced DSA</a></li><li><a href="https://www.geeksforgeeks.org/system-design/system-design-tutorial/">System Design</a></li><li><a href="https://www.geeksforgeeks.org/aptitude/aptitude-questions-and-answers/">Aptitude</a></li><li><a href="https://www.geeksforgeeks.org/aptitude/puzzles/">Puzzles</a></li><li><a href="https://www.geeksforgeeks.org/interview-prep/interview-corner/">Interview Corner</a></li><li><a href="https://www.geeksforgeeks.org/dsa/python-data-structures-and-algorithms/">DSA Python</a></li>            </ul>
            <button aria-label="sub header slider next" class="header-main__slider-arrow next hideIt" style="left: 100%;">
                <i class="gfg-icon gfg-icon_arrow-right gicon-centered"></i>
            </button>
            <!-- <a type="button" class="header-main__signup login-modal-btn" href="https://www.geeksforgeeks.org/merge-sort/">Sign In</a> -->
        </div>
         <div class="gcse-form-search-shm" style="display: none;">
    <form id="gcse-form-shm" class="gcse-form_class-shm p-relative " data-sm="false">
        <span class="front-search-shm-icon">
            <i class="gfg-icon gfg-icon_search gfg-icon_white gcse-search__icon gcse-search-icon_grey" style="display: none"></i>
        </span>
        <input class="gcse-search-input-shm" id="gcse-search-input-shm" aria-expanded="false" placeholder="Search..." autocomplete="off" style="display: none">
        <i class="gfg-icon gfg-icon_times gfg-icon_white hide-search-shm" style="display: none"></i>
        <button id="sub-header__search" aria-label="search" type="button" class="gcse-search-shm__btn not-expanded " style="display:none">
            <i class="gfg-icon gfg-icon_search gfg-icon_white gcse-search__icon"></i>
        </button>
    </form>
    <div class="gcse-form-search-shm-modal" style="display: none"></div>
</div>

        <div id="sub-header__signup-outer-div">
            <button id="sub-header__signup" class="login-modal-btn" style="display: none;">Sign In</button>
        </div>
    </div>
    
    <button id="scrollTopBtn" title="Scroll to Top" type="button" class="btn btn-success">▲</button>
    <!-- .top-spacing to give space on single pages-->
    <div id="main" class="wrapper single-page">

<script>
    if(post_slug.includes('premium-plans-payment/') || post_slug.includes('premium-plans/')){
        $(".header-main__slider").remove();
    }
    //getting tags for the page type data
    let mobileView = false;
    let pageTags = JSON.parse('null');
    let allTags = JSON.parse('["DivideandConquer","Sorting","DSA","Adobe","Qualcomm","Samsung","GoldmanSachs","SAPLabs","TargetCorporation","HSBC","QuickSort","DSATutorials","Algorithms"]');
</script>

<script>
    window.have_dsa_term = false;
    // var practiceTab = ; 
</script>

<style>
    .wrapper {
        flex-direction: column !important;
    }
    /* spinner css */
    @keyframes spinner {
        to {transform: rotate(360deg);}
    }
    
    .spinner:before {
        content: '';
        box-sizing: border-box;
        position: absolute;
        top: 50%;
        left: 50%;
        width: 20px;
        height: 20px;
        margin-top: -10px;
        margin-left: -10px;
        border-radius: 50%;
        border: 2px solid #ccc;
        border-top-color: #000;
        animation: spinner .6s linear infinite;
    }

    .report-loader{
        position: relative;
        
    }

    .report-loader.spinner{
        margin-left: 16px;
    }
    .badges{
        display: flex;
        align-items: center;
        position: relative;
    }
    .badges .gfg-badge-icon.md::after{
        transform: scale(0.25);
        position:relative;
        top: 2px;
        left: -2px;
    }
    .sep{
        margin: 0px 5px;
        font-size: 20px;
        color: var(--badge-name-color);
    }
    .pub-count{
        font-size: 14px;
        font-family: var(--font-secondary);
    }
    .badge-details{
        display:none;
    }
    .badges{
        cursor: pointer;
        position: relative;
        /* width: 0px;
        height: 20px;
        top: -32px; */
    }
    .badge-icon{
        display: flex;
        align-items: center;
    }
    .badge-content{
        margin-left: 9px;
    }
    .badge-name{
        color: var(--badge-nam-color);
        font-weight: 600;
        font-size: 16px;
        text-transform: capitalize;
    }
    .badge-data{
        color: #A5A4A4;
        font-size: 10px;
    }
    .badges:hover .badge-details{
        display: block;
        background: var(--badge-bg);
        padding: 10px 18px 10px 18px;
        position: absolute;
        width: 175px;
        top: -10px;
        z-index: 10;
        left: 112%;
        box-shadow: rgb(100 100 111 / 20%) 0px 7px 29px 0px;
        border-radius: 5px;
        /* transform-origin: top right; */
    }
    .badge-details::before {
        content: "";
        position: absolute;
        transform: rotate(90deg);
        /* transform-origin: right; */
        left: -6px;
        top: 50%;
        margin-left: -17px;
        border-width: 12px;
        border-style: solid;
        border-color: var(--badge-bg) transparent transparent transparent;
        margin-top: -12px;
    }
    .badge-icon .icon{
        border: 1px solid var(--icon-border-color);
        padding: 4px 3px;
        border-radius: 4px;
        width: 22px;
        height: 24px;
        position: relative;
    }
    .b-icon-pos{
        position: relative;
        top: -34px;
        left: -34px;
    }
    /* article viewer */
    .article--viewer .a-wrapper{
        margin-top: 0px !important;
    }
    .content{
        padding-top: 10px !important;
    }
    .u-name{
        font-size: 14px;
    }
    .article--viewer_content .a-wrapper .content{
        padding-bottom: 10px !important;
    }
    .likeTooltipBottom{
        font-size: 14px;
    }
    @media (max-width: 434px) {
        .article-buttons.show-bg{
            margin-top: 56px !important;
        }
    }
    @media (max-width: 730px),
            ((min-width: 992px) and (max-width:1100px))  {
        .article--viewer .media{
            position: relative;
        }
        .article--viewer .media{
            margin-bottom: 0px !important;
        }
        .badges:hover .badge-details{
            top: -56px;
            left: 62px;
        }
        .badge-details::before{
            transform: rotate(0deg);
            left: 10%;
            top: 117%;
        }
        .article-buttons.show-bg{
            margin-top: 22px;
            top: 0px !important;
        }
    }
    @media ((min-width:731px) and (max-width:1223px)) {
        .article-buttons.show-bg{
            top: 18px;
        }
    }
    @media ((min-width:993px) and (max-width:1190px)) {
        .article--viewer .media{
            position: relative;
        }
        .article--viewer .media{
            margin-bottom: 25px !important;
        }
    }
</style>
<!-- Survey modal implementation -->
<script>
    function getCookie(name) {
        function escape(s) { return s.replace(/([.*+?\^$(){}|\[\]\/\\])/g, '\\$1'); }
        var match = document.cookie.match(RegExp('(?:^|;\\s*)' + escape(name) + '=([^;]*)'));
        return match ? match[1] : null;
    }
</script>

<!-- END Survey modal implementation-->

<!-- Open in App Button and CSS-->

<!-- Above code is for old openInApp pop-up with open in app and continue buttons-->

<div id="openInApp-modal" class="openInApp">
    <a href="https://geeksforgeeksapp.page.link/?link=https://www.geeksforgeeks.org/quick-sort-algorithm/?type%3Darticle%26id%3D142309&amp;apn=free.programming.programming&amp;isi=1641848816&amp;ibi=org.geeksforgeeks.GeeksforGeeksDev&amp;efr=1" class="openInAppLink">
        <span style="color: #fff;">Open In App</span>
    </a>
</div>
    <script>
        var consentValue = localStorage.getItem("gfg_cc");
        var isIOS = !!navigator.platform && /iPad|iPhone|iPod|MacIntel/.test(navigator.platform) && navigator.maxTouchPoints > 0;
        const isSafari = navigator.userAgent.indexOf("Safari") > -1;
        const isMozilla = navigator.userAgent.indexOf("Mozilla") > -1;
        if(consentValue){
            if(window.innerHeight > window.innerWidth && navigator.maxTouchPoints > 1 && (isSafari || isMozilla || navigator.userAgentData.mobile)){
                $('.openInApp').css({
                    display: "block"
                });
                $('#scrollTopBtn').css({
                    bottom: "44px"
                });
                //adding a new class to check stats for clicks on iOS and Android
                isIOS ? jQuery('.openInAppLink').addClass("oia-iOS") : $('.openInAppLink').addClass("oia-android");      //for openInApp Link
            }
        }
        
    </script>
    <style>
        .openInApp{
            display: none;
            bottom: 0px;
            width: 100%;
            position: fixed;
            z-index: 1025;
            opacity: 0.93;
        }
        .openInAppLink{
            height: 44px;
            background: var(--color-gfg);
            font-weight: bold;
            display: block;
            text-align: center;
            padding: 12px;
            font-size: large;
        }
        .openInAppLink, .openInAppLink:hover, .openInAppLink:active, .openInAppLink:visited, .openInAppLink:focus {
            text-decoration:none;
        }
    </style>
<!-- END Open in App Button and CSS-->

            <script>
                companyTagsArray = JSON.parse('[]');
                categoryTagsArray = JSON.parse('[]');
            </script>
            <div class="container-fluid bg-light" id="home-page" style="position: relative; max-width:100%;">
    <div class="article-page_flex">
            <div class="sidebar_wrapper  manual_leftbar ">
                      <div class="sideBar " style="height: unset !important">
                <!-- <div class="sideBar--wrap newLeftbar oinLeftbar "> -->
                <div class="sideBar--wrap newLeftbar ">
                                        
                        
                        
                        
                    </div>
                               </div>
             <div id="GFG_AD_Desktop_LeftSideBar_Docked_160x600" style="margin-bottom: 5px !important"></div>
        <div style="height: 3396px;"><div style="margin-top: 20px; position: sticky; top: 80px;"><div id="GFG_AD_Leftsidebar_300x250_chained_1" style="margin-bottom: 10px;"></div><div id="GFG_AD_Leftsidebar_300x250_chained_2" style="margin-bottom: 10px;"></div></div></div><div style="height: 3396px; padding-bottom: 20px;"><div style="margin-top: 20px; position: sticky; top: 80px;"><div id="GFG_AD_Leftsidebar_300x250_chained_3" style="margin-bottom: 10px;"></div><div id="GFG_AD_Leftsidebar_300x600_chained_1" style="margin-bottom: 10px;"></div></div></div></div>
                <div class="leftBar">
            <div class="article--viewer">
                <div class="article--viewer_content">
                    <div class="a-wrapper">
                        <div class="" style="z-index:9999 !important;position:relative;">
                        </div>
                         <article class="content post-142309 post type-post status-publish format-standard hentry category-divide-and-conquer category-sorting category-dsa tag-adobe tag-qualcomm tag-samsung tag-goldman-sachs tag-sap-labs tag-target-corporation tag-hsbc tag-quick-sort tag-dsa-tutorials" id="post-142309">
                                                                                   <!-- when comment system will be scalable from practice side then we will display  Article/Discussion tab-->
                            <div class="main_wrapper" style="display:flex;">
                                                                <div style="width: 100%;">
                                        <div class="article-title">
                                            <h1>Quick Sort</h1>
                                        </div>
                                                                                    <div class="last_updated_parent">
                                                <div>
                                                    <span class="strong">Last Updated : </span>
                                                    <span>03 Oct, 2025</span>
                                                </div>

                                                 <!-- three dot menu -->
                                                <div class="three_dot_dropdown"> 
                                                        <div style="display: flex;">
                                                                                        
                                         <div pid="142309" class="article--viewer_share tooltip">
                                                <div class="three_dot_dropdown_div three_dot_dropdown_share" onmouseleave="closeShareModal()" onmouseenter="openShareModal()">
                                                    <div style="display: flex;align-items: center;" class="three_dot_dropdown_inner_div_share" data-gfg-action="share-article" data-bookmark-value="0">
                                                        <i class="gfg-share-icon"></i>
                                                    </div>
                                                </div>
                                            </div>
                                                                                                                                                                                        <div pid="142309" ptitle="Quick Sort" class="article--viewer_comment tooltip top-comment-icon-div">
                                                                    <span class="comment_tooltiptext">Comments</span>
                                                                    <div class="three_dot_dropdown_div" data-gfg-action="loadComments">
                                                                        <div class="comment_header">
                                                                        <i class="discussion_button" style="position: relative; transform: scale(0.9);"></i>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div pid="142309" ptitle="Quick Sort" class="article--viewer_improve tooltip">
                                                                <span class="improve_tooltiptext">Improve</span>
                                                                <div class="three_dot_dropdown_div three_dot_dropdown_improve" onclick="improveArticleCall()">
                                                                    <div class="improve_wrapper_top">
                                                                    <i class="gfg-icon gfg-icon-pencil  gfg-icon_edit" style="position: relative; z-index: 3;"></i>
                                                                    </div>
                                                                </div>
                                                            </div> 
                                                                                                                    <!-- three dots -->
                                                        <ul class="dropbtn icons btn-right showLeft" onclick="showDropdown()">
                                                            <li>
                                                                                                                            </li>
                                                            <li></li>
                                                            <li></li>
                                                        </ul>
                                                    </div>
                                                </div> 
                                            </div>
                                                                            </div>
                                                            </div>
                            <!-- menu -->
                            <div id="myDropdown" class="three_dot_dropdown_content">
                            <div class="article-buttons drop" onmouseleave="closeKebabMenu()">
                                            <!-- If the status of the summary API is true than we are showing the summarize button otherwise not  -->
                                            <!--  -->
                                            <div pid="142309" ptitle="Quick Sort" class="improve_article--viewer tooltip">
                                                <div class="three_dot_dropdown_div three_dot_dropdown_improve" onclick="suggestionArticleCall()" style="margin-top: 1px;">
                                                    <div class="three_dot_dropdown_inner_div improve_dot_dropdown_inner_div">
                                                        <i class="gfg-icon gfg-icon_suggest_changes gfg-icon_edit"></i>
                                                        <span>Suggest changes</span>
                                                    </div>
                                                </div>
                                            </div>
                                                                                        <div pid="142309" class="article--viewer_like tooltip">
                                            <div class="three_dot_dropdown_div three_dot_dropdown_likearticle" onmouseleave="toggleLikeElementVisibility(&quot;showLikesContainer&quot;, false)" onmouseenter="toggleLikeElementVisibility(&quot;showLikesContainer&quot;, true)">
                                                    <div class="showLikesContainer"> 
                                                        <span class="likeTooltip">874 Likes</span>
                                                    </div>
                                                    <div class="three_dot_dropdown_inner_div" data-gfg-action="like-article" data-bookmark-value="0">
                                                        <i class="gfg-icon gfg-icon_thumbs"></i>
                                                        <span>Like</span>
                                                    </div>
                                                </div>
<!-- <button data-gfg-action="like-article" data-bookmark-value="0">
                                                    <i class="gfg-icon gfg-icon_thumbs"></i>
                                                </button> -->
                                            </div>
                                            
                                            <!-- share button is removed from here for web view and placed at the place of summarize on 03/04/25 for task T1G-3293 -->

                                            <!-- <div pid="142309" class="article--viewer_share tooltip">
                                                <div class="three_dot_dropdown_div three_dot_dropdown_share" onmouseleave="closeShareModal()" onmouseenter="openShareModal()">
                                                    <div style="display: flex;align-items: center;" class="three_dot_dropdown_inner_div" data-gfg-action="share-article" data-bookmark-value="0">
                                                        <i class="gfg-share-icon"></i>
                                                        <span>Share</span>
                                                    </div>
                                                </div>
                                            </div> -->
                                            <div class="article--viewer_report tooltip">
                                                <div class="three_dot_dropdown_div three_dot_dropdown_reportarticle">
                                                    <div class="three_dot_dropdown_inner_div" data-gfg-action="report-article" onclick="report_article();">
                                                        <i class="gfg-icon gfg-icon_report"></i>
                                                        <span>Report</span>
                                                    </div>
                                                </div>
<!-- <button data-gfg-action="like-article" data-bookmark-value="0">
                                                    <i class="gfg-icon gfg-icon_thumbs"></i>
                                                </button> -->
                                            </div>
                                            <!-- follow button is removed on 07/04/25 for task T1G-3307 -->
                                            <!-- <div class="article--viewer_Gnews tooltip">
                                                <a class="three_dot_dropdown_inner_div Gnews_wrapper" href ='https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen' target="_blank">
                                                    <img class="gfg-icon_Gnews no-zoom-in-cursor" src=https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg  loading="lazy" alt="News"></img>
                                                    <span class='kebab_menu_news_text'>Follow</span>
                                                </a>
                                            </div> -->
                                        </div>
                                    </div>
                            <div class="text">
                                                                                    <script> 
                        var video_api_response = JSON.parse("[{\"id\":10657,\"title\":\"QuickSort Introduction\",\"slug\":\"quicksort-introduction\",\"description\":\"<h2>Quick Sort Algorithm | Comprehensive Guide<\/h2><p><strong>Quick Sort<\/strong> is one of the most efficient and widely-used sorting algorithms based on the <strong>divide-and-conquer<\/strong> strategy. It works by selecting a \\\"pivot\\\" element and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.<\/p><h3>What is Quick Sort?<\/h3><p><strong>Quick Sort<\/strong> is a comparison-based sorting algorithm that efficiently sorts elements by partitioning the array into smaller sub-arrays. The core idea is to pick a pivot element, partition the array around the pivot, and recursively sort the sub-arrays. This results in a time complexity of <strong>O(n log n)<\/strong> on average, making it one of the fastest sorting algorithms.<\/p><h3>How Quick Sort Works<\/h3><p><strong>Choose a Pivot<\/strong>:<\/p><ul><li>Select a pivot element from the array. The pivot can be any element, but common choices include the first element, the last element, or a randomly selected one.<\/li><\/ul><p><strong>Partitioning<\/strong>:<\/p><ul><li>Reorder the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it. The pivot is now in its correct position in the sorted array.<\/li><\/ul><p><strong>Recursively Sort the Sub-arrays<\/strong>:<\/p><ul><li>Apply the same process recursively to the sub-arrays (the elements less than and greater than the pivot). Continue dividing and sorting until the sub-arrays have only one element or are empty.<\/li><\/ul><h3>Example of Quick Sort<\/h3><p>Consider sorting the array [10, 80, 30, 90, 40, 50, 70] using Quick Sort.<\/p><p><strong>Initial Array<\/strong>:<br>[10, 80, 30, 90, 40, 50, 70]<\/p><p><strong>Choose Pivot<\/strong>:<br>Select 70 as the pivot.<\/p><p><strong>Partitioning<\/strong>:<br>Reorder the array so elements less than 70 are on the left and those greater are on the right. After partitioning, the array looks like:<br>[10, 30, 40, 50, 70, 90, 80]<\/p><p><strong>Recursive Steps<\/strong>:<\/p><ul><li>Sort the left sub-array [10, 30, 40, 50] and the right sub-array [90, 80] recursively.<\/li><\/ul><p><strong>Final Sorted Array<\/strong>:<br>After recursively sorting the sub-arrays, the final sorted array will be:<br>[10, 30, 40, 50, 70, 80, 90]<\/p><h3>Time Complexity of Quick Sort<\/h3><p><strong>Best and Average Case<\/strong>:<\/p><ul><li>The time complexity of Quick Sort is <strong>O(n log n)<\/strong> when the pivot splits the array into relatively equal-sized sub-arrays. This is the average-case performance of Quick Sort.<\/li><\/ul><p><strong>Worst Case<\/strong>:<\/p><ul><li>The worst-case time complexity is <strong>O(n\u00b2)<\/strong>, which occurs when the pivot chosen is the smallest or largest element repeatedly, resulting in highly unbalanced partitions.<\/li><\/ul><p><strong>Space Complexity<\/strong>:<\/p><ul><li>The space complexity of Quick Sort is <strong>O(log n)<\/strong> due to the space required for the recursive stack. Unlike other algorithms like Merge Sort, Quick Sort is <strong>in-place<\/strong>, meaning it doesn\u2019t need extra memory for a separate array.<\/li><\/ul><h3>Optimizations for Quick Sort<\/h3><p><strong>Choosing a Good Pivot<\/strong>:<\/p><ul><li>The efficiency of Quick Sort depends heavily on the choice of the pivot. Randomized Quick Sort, where the pivot is chosen randomly, reduces the chances of worst-case performance.<\/li><\/ul><p><strong>Three-way Partitioning<\/strong>:<\/p><ul><li>In cases where the array contains many repeated elements, three-way partitioning can improve performance. This version of Quick Sort divides the array into three sections: elements less than the pivot, equal to the pivot, and greater than the pivot.<\/li><\/ul><p><strong>Hybrid Approaches<\/strong>:<\/p><ul><li>In practice, Quick Sort is often combined with other sorting algorithms like Insertion Sort for smaller sub-arrays. When the sub-arrays become small enough (e.g., 10 elements or fewer), Insertion Sort can be more efficient.<\/li><\/ul><h3>Applications of Quick Sort<\/h3><p><strong>General Sorting<\/strong>:<\/p><ul><li>Quick Sort is widely used in sorting data because of its efficiency in the average case. It is the go-to algorithm in many libraries and frameworks for general-purpose sorting.<\/li><\/ul><p><strong>Search Algorithms<\/strong>:<\/p><ul><li>Quick Sort is often used as a preprocessing step for algorithms that require sorted data, such as binary search.<\/li><\/ul><p><strong>Distributed Systems<\/strong>:<\/p><ul><li>In distributed systems, Quick Sort can be adapted for parallel sorting, taking advantage of multiple processors.<\/li><\/ul><p><strong>External Sorting<\/strong>:<\/p><ul><li>Quick Sort can be used for external sorting algorithms where the data is too large to fit into memory, though other algorithms like Merge Sort may be more suitable in some cases.<\/li><\/ul><h3>Why Learn Quick Sort?<\/h3><p><strong>Quick Sort<\/strong> is one of the most efficient and versatile sorting algorithms, combining both simplicity and power. It introduces key concepts like recursion, divide-and-conquer, and partitioning, which are fundamental to algorithm design. Learning Quick Sort equips you with the tools to solve a wide range of sorting and optimization problems.<\/p><p><strong>Topics Covered<\/strong>:<\/p><ul><li><strong>Definition of Quick Sort<\/strong>: Understanding the algorithm\u2019s structure and how it works.<\/li><li><strong>Time Complexity<\/strong>: Best, worst, and average cases, along with space complexity.<\/li><li><strong>Optimizations<\/strong>: Techniques to improve the efficiency of Quick Sort.<\/li><li><strong>Applications<\/strong>: Where and how Quick Sort is used in real-world scenarios.<\/li><\/ul><p>For more details and further examples, check out the full article on GeeksforGeeks: <a href=\\\"https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/\\\">https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/<\/a>.<\/p>\",\"source\":\"https:\/\/videos.geeksforgeeks.org\/5c668a30a0c3e8e888afbd3a6ee60cacgfg-QuickSortIntroduction20241008115157\/video.m3u8\",\"category\":[{\"term_id__id\":36,\"term_id__term_name\":\"DSA\",\"term_id__term_type\":2,\"term_id__slug\":\"dsa\"},{\"term_id__id\":110,\"term_id__term_name\":\"Sorting\",\"term_id__term_type\":2,\"term_id__slug\":\"sorting-8frfkn\"},{\"term_id__id\":7,\"term_id__term_name\":\"Data Structures\",\"term_id__term_type\":1,\"term_id__slug\":\"data-structures\"},{\"term_id__id\":562,\"term_id__term_name\":\"DSA\",\"term_id__term_type\":1,\"term_id__slug\":\"dsa-lpubwc\"}],\"meta\":{\"thumbnail\":\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-small.png\",\"largeThumbnail\":\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150.png\",\"likes\":2,\"views\":216560,\"isFeatured\":0,\"isPremium\":0,\"isPublic\":0,\"format\":\"video\/mp4\",\"revision\":{}},\"time\":\"08\/10\/2024\",\"subtitle\":\"https:\/\/videos.geeksforgeeks.org\/5c668a30a0c3e8e888afbd3a6ee60cacgfg-QuickSortIntroduction20241008115157\/subtitle.vtt\",\"duration\":372,\"course_link\":null,\"video_schema\":{\"@context\":\"https:\/\/schema.org\",\"@type\":\"VideoObject\",\"name\":\"QuickSort Introduction\",\"description\":\"Quick Sort Algorithm  Comprehensive GuideQuick Sort is one of the most efficient and widely-used sorting algorithms based on the divide-and-conquer strategy. It works by selecting a pivot element and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.What is Quick Sort?Quick Sort is a comparison-based sorting algorithm that efficiently sorts elements by partitioning the array into smaller sub-arrays. The core idea is to pick a pivot element, partition the array around the pivot, and recursively sort the sub-arrays. This results in a time complexity of O(n log n) on average, making it one of the fastest sorting algorithms.How Quick Sort WorksChoose a PivotSelect a pivot element from the array. The pivot can be any element, but common choices include the first element, the last element, or a randomly selected one.PartitioningReorder the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it. The pivot is now in its correct position in the sorted array.Recursively Sort the Sub-arraysApply the same process recursively to the sub-arrays (the elements less than and greater than the pivot). Continue dividing and sorting until the sub-arrays have only one element or are empty.Example of Quick SortConsider sorting the array 10, 80, 30, 90, 40, 50, 70 using Quick Sort.Initial Array10, 80, 30, 90, 40, 50, 70Choose PivotSelect 70 as the pivot.PartitioningReorder the array so elements less than 70 are on the left and those greater are on the right. After partitioning, the array looks like10, 30, 40, 50, 70, 90, 80Recursive StepsSort the left sub-array 10, 30, 40, 50 and the right sub-array 90, 80 recursively.Final Sorted ArrayAfter recursively sorting the sub-arrays, the final sorted array will be10, 30, 40, 50, 70, 80, 90Time Complexity of Quick SortBest and Average CaseThe time complexity of Quick Sort is O(n log n) when the pivot splits the array into relatively equal-sized sub-arrays. This is the average-case performance of Quick Sort.Worst CaseThe worst-case time complexity is O(n), which occurs when the pivot chosen is the smallest or largest element repeatedly, resulting in highly unbalanced partitions.Space ComplexityThe space complexity of Quick Sort is O(log n) due to the space required for the recursive stack. Unlike other algorithms like Merge Sort, Quick Sort is in-place, meaning it doesnt need extra memory for a separate array.Optimizations for Quick SortChoosing a Good PivotThe efficiency of Quick Sort depends heavily on the choice of the pivot. Randomized Quick Sort, where the pivot is chosen randomly, reduces the chances of worst-case performance.Three-way PartitioningIn cases where the array contains many repeated elements, three-way partitioning can improve performance. This version of Quick Sort divides the array into three sections elements less than the pivot, equal to the pivot, and greater than the pivot.Hybrid ApproachesIn practice, Quick Sort is often combined with other sorting algorithms like Insertion Sort for smaller sub-arrays. When the sub-arrays become small enough (e.g., 10 elements or fewer), Insertion Sort can be more efficient.Applications of Quick SortGeneral SortingQuick Sort is widely used in sorting data because of its efficiency in the average case. It is the go-to algorithm in many libraries and frameworks for general-purpose sorting.Search AlgorithmsQuick Sort is often used as a preprocessing step for algorithms that require sorted data, such as binary search.Distributed SystemsIn distributed systems, Quick Sort can be adapted for parallel sorting, taking advantage of multiple processors.External SortingQuick Sort can be used for external sorting algorithms where the data is too large to fit into memory, though other algorithms like Merge Sort may be more suitable in some cases.Why Learn Quick Sort?Quick Sort is one of the most efficient and versatile sorting algorithms, combining both simplicity and power. It introduces key concepts like recursion, divide-and-conquer, and partitioning, which are fundamental to algorithm design. Learning Quick Sort equips you with the tools to solve a wide range of sorting and optimization problems.Topics CoveredDefinition of Quick Sort Understanding the algorithms structure and how it works.Time Complexity Best, worst, and average cases, along with space complexity.Optimizations Techniques to improve the efficiency of Quick Sort.Applications Where and how Quick Sort is used in real-world scenarios.For more details and further examples, check out the full article on GeeksforGeeks httpswww.geeksforgeeks.orgquick-sort-algorithm.\",\"thumbnailUrl\":[\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150.png\",\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-seo.png\",\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-small.png\"],\"uploadDate\":\"2024-10-08T11:57:19Z\",\"duration\":\"PT0H6M12S\",\"contentUrl\":\"https:\/\/www.geeksforgeeks.org\/videos\/quicksort-introduction\/\"}},{\"id\":10658,\"title\":\"QuickSort using Lomuto Partition\",\"slug\":\"quicksort-using-lomuto-partition-1\",\"description\":\"<h2>QuickSort Algorithm Using Lomuto Partition | Comprehensive Guide<\/h2><p><strong>QuickSort<\/strong> is a highly efficient sorting algorithm that uses the <strong>divide and conquer<\/strong> approach to sort elements. One of the key components of the QuickSort algorithm is the <strong>partitioning<\/strong> method, which determines how the array is divided. The <strong>Lomuto partition<\/strong> scheme is a simple and commonly used partitioning technique in QuickSort, making it easier to implement and understand.<\/p><h3>What is QuickSort?<\/h3><p><strong>QuickSort<\/strong> is a sorting algorithm that works by selecting a \\\"pivot\\\" element from the array and partitioning the other elements into two groups:<\/p><ul><li>Elements smaller than the pivot.<\/li><li>Elements larger than the pivot.<\/li><\/ul><p>The process is then recursively applied to the subarrays formed by partitioning. QuickSort has an average time complexity of <strong>O(n log n)<\/strong>, making it one of the most efficient algorithms for large datasets.<\/p><h3>Key Steps in QuickSort Using Lomuto Partition<\/h3><p><strong>Choose a Pivot<\/strong>:<\/p><ul><li>The last element of the array is often chosen as the pivot in Lomuto partitioning.<\/li><\/ul><p><strong>Partition the Array<\/strong>:<\/p><ul><li>The array is rearranged such that all elements smaller than the pivot are on its left, and all elements larger than the pivot are on its right. The pivot is placed in its correct sorted position.<\/li><\/ul><p><strong>Recursively Sort Subarrays<\/strong>:<\/p><ul><li>After partitioning, the left and right subarrays (excluding the pivot) are sorted recursively using the same QuickSort process.<\/li><\/ul><h3>Lomuto Partition Scheme<\/h3><p>The <strong>Lomuto partition<\/strong> scheme is a simple method to partition the array. Here's how it works:<\/p><ol><li>The pivot is chosen as the last element of the array.<\/li><li>A pointer i is initialized to keep track of the smaller elements' position.<\/li><li>The array is scanned, and whenever an element smaller than the pivot is found, it is swapped with the element at position i. The pointer i is then incremented.<\/li><li>At the end of the scan, the pivot is swapped with the element at position i, placing it in its correct sorted position.<\/li><\/ol><h3>Example of Lomuto Partitioning<\/h3><p>Consider the array: <strong>[10, 80, 30, 90, 40, 50, 70]<\/strong><\/p><ul><li>Choose the last element, <strong>70<\/strong>, as the pivot.<\/li><li>During the partitioning process:<ul><li><strong>10<\/strong> is smaller than 70, so no change is made.<\/li><li><strong>80<\/strong> is greater than 70, so nothing is done.<\/li><li><strong>30<\/strong> is smaller than 70, so it's swapped with <strong>80<\/strong>.<\/li><li><strong>90<\/strong> is greater than 70, so nothing is done.<\/li><li><strong>40<\/strong> is smaller than 70, so it's swapped with <strong>80<\/strong>.<\/li><li><strong>50<\/strong> is smaller than 70, so it's swapped with <strong>90<\/strong>.<\/li><\/ul><\/li><\/ul><p>After partitioning, <strong>70<\/strong> is swapped with the element at position i, and the array becomes: <strong>[10, 30, 40, 50, 70, 90, 80]<\/strong><\/p><p>Now, <strong>70<\/strong> is in its correct sorted position, and QuickSort is applied recursively to the subarrays.<\/p><h3>Pseudocode for QuickSort Using Lomuto Partition<\/h3><p>python<\/p><p>Copy code<\/p><p>def quicksort(arr, low, high):\\n &nbsp; &nbsp;if low &lt; high:\\n &nbsp; &nbsp; &nbsp; &nbsp;# pi is partitioning index, arr[pi] is now at right place\\n &nbsp; &nbsp; &nbsp; &nbsp;pi = partition(arr, low, high)\\n\\n &nbsp; &nbsp; &nbsp; &nbsp;# Recursively sort elements before partition and after partition\\n &nbsp; &nbsp; &nbsp; &nbsp;quicksort(arr, low, pi - 1)\\n &nbsp; &nbsp; &nbsp; &nbsp;quicksort(arr, pi + 1, high)\\n\\ndef partition(arr, low, high):\\n &nbsp; &nbsp;pivot = arr[high] &nbsp;# pivot is the last element\\n &nbsp; &nbsp;i = low - 1 &nbsp;# index of smaller element\\n\\n &nbsp; &nbsp;for j in range(low, high):\\n &nbsp; &nbsp; &nbsp; &nbsp;if arr[j] &lt;= pivot:\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i = i + 1\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;arr[i], arr[j] = arr[j], arr[i] &nbsp;# swap\\n\\n &nbsp; &nbsp;arr[i + 1], arr[high] = arr[high], arr[i + 1] &nbsp;# move pivot to correct position\\n &nbsp; &nbsp;return i + 1\\n<\/p><h3>Key Points:<\/h3><ul><li>The pivot is chosen as the last element.<\/li><li>The function partition rearranges the array and returns the pivot's position.<\/li><li>The quicksort function recursively applies the QuickSort to the left and right subarrays.<\/li><\/ul><h3>Time Complexity of QuickSort Using Lomuto Partition<\/h3><ul><li><strong>Best Case<\/strong>: <strong>O(n log n)<\/strong>, which occurs when the pivot consistently divides the array into two nearly equal parts.<\/li><li><strong>Worst Case<\/strong>: <strong>O(n\u00b2)<\/strong>, which happens when the pivot is the smallest or largest element, leading to highly unbalanced partitions.<\/li><li><strong>Average Case<\/strong>: <strong>O(n log n)<\/strong>, making QuickSort efficient for large datasets in most practical scenarios.<\/li><\/ul><h3>Space Complexity<\/h3><ul><li>The space complexity is <strong>O(log n)<\/strong> due to the recursive nature of QuickSort.<\/li><\/ul><h3>Advantages of Using QuickSort with Lomuto Partition<\/h3><ol><li><strong>Efficient<\/strong>: QuickSort has an average time complexity of <strong>O(n log n)<\/strong>, making it one of the most efficient sorting algorithms.<\/li><li><strong>In-Place Sorting<\/strong>: QuickSort does not require additional memory for a new array, as the sorting is done in-place.<\/li><li><strong>Simple Implementation<\/strong>: The Lomuto partition scheme is easy to implement and understand, making it a good choice for learning QuickSort.<\/li><\/ol><h3>Disadvantages of Lomuto Partition<\/h3><ol><li><strong>Not Ideal for Large Duplicate Elements<\/strong>: Lomuto partition performs poorly if the array contains many duplicate elements, as it can lead to unbalanced partitions.<\/li><li><strong>Worst-Case Scenario<\/strong>: The worst-case time complexity of <strong>O(n\u00b2)<\/strong> occurs when the pivot consistently picks the largest or smallest element in the array.<\/li><\/ol><h3>Applications of QuickSort<\/h3><ol><li><strong>Large Datasets<\/strong>: QuickSort is widely used for sorting large datasets efficiently due to its average <strong>O(n log n)<\/strong> time complexity.<\/li><li><strong>Memory-Constrained Environments<\/strong>: Since QuickSort is an in-place sorting algorithm, it is well-suited for environments with limited memory.<\/li><li><strong>Data Processing<\/strong>: QuickSort is used in many data processing algorithms where fast sorting of data is required.<\/li><\/ol><h3>Why Learn QuickSort Using Lomuto Partition?<\/h3><p>Learning QuickSort using the <strong>Lomuto partition<\/strong> scheme introduces you to a highly efficient sorting algorithm that is easy to implement and understand. It helps build a foundation in recursive algorithms, divide-and-conquer strategies, and algorithmic optimizations. QuickSort is widely used in competitive programming, software development, and data processing, making it a must-know algorithm for programmers and developers.<\/p><p><strong>Topics Covered<\/strong>:<\/p><ol><li><strong>QuickSort Overview<\/strong>: Understanding the QuickSort algorithm and how it works.<\/li><li><strong>Lomuto Partition Scheme<\/strong>: How the Lomuto partition works and its implementation in QuickSort.<\/li><li><strong>Time Complexity<\/strong>: Analysis of best, worst, and average-case scenarios for QuickSort.<\/li><li><strong>Applications<\/strong>: Practical uses of QuickSort in large datasets, memory-constrained environments, and data processing.<\/li><\/ol><p>For more details and further examples, check out the full article on GeeksforGeeks: <a href=\\\"https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/\\\">https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/<\/a>.<\/p>\",\"source\":\"https:\/\/videos.geeksforgeeks.org\/e3434a976140115c858c39a24be50b0agfg-QuickSortUsingLomuto20241008115304\/video.m3u8\",\"category\":[{\"term_id__id\":36,\"term_id__term_name\":\"DSA\",\"term_id__term_type\":2,\"term_id__slug\":\"dsa\"},{\"term_id__id\":110,\"term_id__term_name\":\"Sorting\",\"term_id__term_type\":2,\"term_id__slug\":\"sorting-8frfkn\"},{\"term_id__id\":7,\"term_id__term_name\":\"Data Structures\",\"term_id__term_type\":1,\"term_id__slug\":\"data-structures\"},{\"term_id__id\":562,\"term_id__term_name\":\"DSA\",\"term_id__term_type\":1,\"term_id__slug\":\"dsa-lpubwc\"}],\"meta\":{\"thumbnail\":\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortusingLomutoPartition\/QuickSortusingLomutoPartition20241008115629-small.png\",\"largeThumbnail\":\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortusingLomutoPartition\/QuickSortusingLomutoPartition20241008115629.png\",\"likes\":1,\"views\":37940,\"isFeatured\":0,\"isPremium\":0,\"isPublic\":0,\"format\":\"video\/mp4\",\"revision\":{}},\"time\":\"08\/10\/2024\",\"subtitle\":\"https:\/\/videos.geeksforgeeks.org\/e3434a976140115c858c39a24be50b0agfg-QuickSortUsingLomuto20241008115304\/subtitle.vtt\",\"duration\":506,\"course_link\":null}]");
                    </script>
                <p dir="ltr"><b><strong>QuickSort</strong></b><span> is a sorting algorithm based on the Divide and Conquer that picks an element as a pivot and partitions the given array around the picked pivot by placing the pivot in its correct position in the sorted array. </span></p><p dir="ltr"><span>It works on the principle of </span><b><strong>divide and conquer</strong></b><span>, breaking down the problem into smaller sub-problems.</span></p><p dir="ltr"><span>There are mainly three steps in the algorithm:</span></p><ol><li value="1"><b><strong>Choose a Pivot: </strong></b><span>Select an element from the array as the pivot. The choice of pivot can vary (e.g., first element, last element, random element, or median).</span></li><li value="2"><b><strong>Partition the Array:</strong></b><span> Re arrange the array around the pivot. After partitioning, all elements smaller than the pivot will be on its left, and all elements greater than the pivot will be on its right. The pivot is then in its correct position, and we obtain the index of the pivot.</span></li><li value="3"><b><strong>Recursively Call:</strong></b><span> Recursively apply the same process to the two partitioned sub-arrays (left and right of the pivot).</span></li><li value="4"><b><strong>Base Case:</strong></b><span> The recursion stops when there is only one element left in the sub-array, as a single element is already sorted.</span></li></ol><p dir="ltr"><span>Here’s a basic overview of how the QuickSort algorithm works.</span></p><figure class="image"><img src="./Quick Sort - GeeksforGeeks_files/Heap-Sort-Recursive-Illustration.webp" alt="Heap-Sort-Recursive-Illustration" width="801" height="401" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20240926172924/Heap-Sort-Recursive-Illustration.webp 801w,https://media.geeksforgeeks.org/wp-content/uploads/20240926172924/Heap-Sort-Recursive-Illustration-100.webp 100w,https://media.geeksforgeeks.org/wp-content/uploads/20240926172924/Heap-Sort-Recursive-Illustration-200.webp 200w,https://media.geeksforgeeks.org/wp-content/uploads/20240926172924/Heap-Sort-Recursive-Illustration-300.webp 300w,https://media.geeksforgeeks.org/wp-content/uploads/20240926172924/Heap-Sort-Recursive-Illustration-660.webp 660w,https://media.geeksforgeeks.org/wp-content/uploads/20240926172924/Heap-Sort-Recursive-Illustration-768.webp 768w"><figcaption> </figcaption></figure><h3 id="choice-of-pivot" style="text-align:left"><span>Choice of Pivot</span></h3><p dir="ltr"><span> There are many different choices for picking pivots. </span></p><div id="GFG_AD_Desktop_InContent_ATF_728x280" style="text-align: center; margin: 10px 0px;"></div><ul><li value="1"><a href="https://www.geeksforgeeks.org/dsa/implement-quicksort-with-first-element-as-pivot/" target="_blank" rel="noopener"><span>Always pick the first (or last) element as a pivot</span></a><span>. The below implementation picks the last element as pivot. The problem with this approach is it ends up in the worst case when array is already sorted. </span></li><li value="2"><a href="https://www.geeksforgeeks.org/dsa/quicksort-using-random-pivoting/" target="_blank" rel="noopener"><span>Pick a random element as a pivot</span></a><span>. This is a preferred approach because it does not have a pattern for which the worst case happens.</span></li><li value="3"><span>Pick the median element is pivot. This is an ideal approach in terms of time complexity as </span><a href="https://www.geeksforgeeks.org/dsa/median-of-an-unsorted-array-in-liner-time-on/" target="_blank" rel="noopener"><span>we can find median in linear time</span></a><span> and the partition function will always divide the input array into two halves. But it takes more time on average as median finding has high constants.</span></li></ul><h3 id="partition-algorithm" style="text-align:left"><span>Partition Algorithm</span></h3><p dir="ltr"><span>The key process in </span><b><strong>quickSort </strong></b><span>is a</span><b><strong> partition(). </strong></b><span>There are three common algorithms to partition. All these algorithms have O(n) time complexity.</span></p><ol><li value="1"><a href="https://www.geeksforgeeks.org/dsa/naive-partition-algorithm/" target="_blank" rel="noopener"><b><strong>Naive Partition</strong></b></a><span>: Here we create copy of the array. First put all smaller elements and then all greater. Finally we copy the temporary array back to original array. This requires O(n) extra space.</span></li><li value="2"><a href="https://www.geeksforgeeks.org/dsa/lomuto-partition-algorithm/" target="_blank" rel="noopener"><b><strong>Lomuto Partition</strong></b></a><span>: We have used this partition in this article. This is a simple algorithm, we keep track of index of smaller elements and keep swapping.  We have used it here in this article because of its simplicity.</span></li><li value="3"><a href="https://www.geeksforgeeks.org/dsa/hoare-s-partition-algorithm/" target="_blank" rel="noopener"><b><strong>Hoare's Partition</strong></b></a><span>: This is the fastest of all. Here we traverse array from both sides and keep swapping greater element on left with smaller on right while the array is not partitioned. Please refer </span><a href="https://www.geeksforgeeks.org/dsa/hoares-vs-lomuto-partition-scheme-quicksort/" target="_blank" rel="noopener"><span>Hoare’s vs Lomuto</span></a><span> for details. </span></li></ol><h3 id="working-of-lomuto-partition-algorithm-with-illustration" style="text-align:left"><span>Working of Lomuto Partition Algorithm with Illustration</span></h3><blockquote><p dir="ltr"><span> The logic is simple, we start from the leftmost element and keep track of the index of smaller (or equal) elements as </span><b><strong>i </strong></b><span>. While traversing, if we find a smaller element, we swap the current element with </span><b><strong>arr[i]</strong></b><span>. Otherwise, we ignore the current element. </span></p></blockquote><a id="practiceBanner" class="practiceDivBanner rc0" href="https://www.geeksforgeeks.org/problems/quick-sort/1" target="_blank" style="display: block;">
        <div class="recommended-div">Try it on GfG Practice <div class="icon"> <img loading="lazy" src="./Quick Sort - GeeksforGeeks_files/Group-arrow.svg" alt="redirect icon" class="redirectIcon no-zoom-in-cursor"> </div></div>
        </a><p dir="ltr"><span> Let us understand the working of partition algorithm with the help of the following example:</span></p><gfg-carousel style="white-space: unset; display: flex;"><template shadowrootmode="open"><slot name="carousel"></slot></template><div class="gfg-preview-carousel-wrapper" slot="carousel"><div class="gfg-preview-carousel"><div class="gfg-preview-carousel-content" data-show="true" slot="content" data-index="0"><div class="gfg-preview-carousel-content-wrapper"><img class="gfg-preview-carousel-img bg" src="./Quick Sort - GeeksforGeeks_files/quick-sort-1.webp" data-src="https://media.geeksforgeeks.org/wp-content/uploads/20241111171208918304/quick-sort-1.webp" alt="quick-sort-1.webp"><img class="gfg-preview-carousel-img" src="./Quick Sort - GeeksforGeeks_files/quick-sort-1.webp" data-src="https://media.geeksforgeeks.org/wp-content/uploads/20241111171208918304/quick-sort-1.webp" alt="quick-sort-1.webp"></div></div><div class="gfg-preview-carousel-content" data-show="false" slot="content" data-index="1"><div class="gfg-preview-carousel-content-wrapper"><img class="gfg-preview-carousel-img bg" src="./Quick Sort - GeeksforGeeks_files/quick-sort-1.webp" data-src="https://media.geeksforgeeks.org/wp-content/uploads/20241111171209045220/quick-sort-2.webp" alt="quick-sort-2.webp"><img class="gfg-preview-carousel-img" src="./Quick Sort - GeeksforGeeks_files/quick-sort-1.webp" data-src="https://media.geeksforgeeks.org/wp-content/uploads/20241111171209045220/quick-sort-2.webp" alt="quick-sort-2.webp"></div></div><div class="gfg-preview-carousel-content" data-show="false" slot="content" data-index="2"><div class="gfg-preview-carousel-content-wrapper"><img class="gfg-preview-carousel-img bg" src="./Quick Sort - GeeksforGeeks_files/quick-sort-1.webp" data-src="https://media.geeksforgeeks.org/wp-content/uploads/20241220154252629076/quick-sort-3-1.png" alt="quick-sort-3-1.png"><img class="gfg-preview-carousel-img" src="./Quick Sort - GeeksforGeeks_files/quick-sort-1.webp" data-src="https://media.geeksforgeeks.org/wp-content/uploads/20241220154252629076/quick-sort-3-1.png" alt="quick-sort-3-1.png"></div></div><div class="gfg-preview-carousel-content" data-show="false" slot="content" data-index="3"><div class="gfg-preview-carousel-content-wrapper"><img class="gfg-preview-carousel-img bg" src="./Quick Sort - GeeksforGeeks_files/quick-sort-1.webp" data-src="https://media.geeksforgeeks.org/wp-content/uploads/20241111171209255614/quick-sort-4.webp" alt="quick-sort-4.webp"><img class="gfg-preview-carousel-img" src="./Quick Sort - GeeksforGeeks_files/quick-sort-1.webp" data-src="https://media.geeksforgeeks.org/wp-content/uploads/20241111171209255614/quick-sort-4.webp" alt="quick-sort-4.webp"></div></div><div class="gfg-preview-carousel-content" data-show="false" slot="content" data-index="4"><div class="gfg-preview-carousel-content-wrapper"><img class="gfg-preview-carousel-img bg" src="./Quick Sort - GeeksforGeeks_files/quick-sort-1.webp" data-src="https://media.geeksforgeeks.org/wp-content/uploads/20241213175652062597/quick-sort.png" alt="quick-sort.png"><img class="gfg-preview-carousel-img" src="./Quick Sort - GeeksforGeeks_files/quick-sort-1.webp" data-src="https://media.geeksforgeeks.org/wp-content/uploads/20241213175652062597/quick-sort.png" alt="quick-sort.png"></div></div><div class="gfg-preview-carousel-content" data-show="false" slot="content" data-index="5"><div class="gfg-preview-carousel-content-wrapper"><img class="gfg-preview-carousel-img bg" src="./Quick Sort - GeeksforGeeks_files/quick-sort-1.webp" data-src="https://media.geeksforgeeks.org/wp-content/uploads/20241111171209465155/quick-sort-6.webp" alt="quick-sort-6.webp"><img class="gfg-preview-carousel-img" src="./Quick Sort - GeeksforGeeks_files/quick-sort-1.webp" data-src="https://media.geeksforgeeks.org/wp-content/uploads/20241111171209465155/quick-sort-6.webp" alt="quick-sort-6.webp"></div></div></div><div class="gfg-preview-carousel-toolbar">
        <span class="gfg-preview-carousel-left"><svg width="20" height="20" viewBox="-5.5 0 26 26" version="1.1" fill="currentColor">
    <title>Previous</title>
    <g stroke="none" stroke-width="1">
        <g sketch:type="MSLayerGroup" transform="translate(-423.000000, -1196.000000)" fill="currentColor">
            <path d="M428.115,1209 L437.371,1200.6 C438.202,1199.77 438.202,1198.43 437.371,1197.6 C436.541,1196.76 435.194,1196.76 434.363,1197.6 L423.596,1207.36 C423.146,1207.81 422.948,1208.41 422.985,1209 C422.948,1209.59 423.146,1210.19 423.596,1210.64 L434.363,1220.4 C435.194,1221.24 436.541,1221.24 437.371,1220.4 C438.202,1219.57 438.202,1218.23 437.371,1217.4 L428.115,1209" id="chevron-left" sketch:type="MSShapeGroup"></path>
        </g>
    </g>
</svg>
</span>
        <span class="gfg-preview-carousel-playpause"><svg aria-label="Play" fill="currentColor" height="20" width="20" role="img" viewBox="0 0 24 24"><title>Play</title><path d="M5.888 22.5a3.46 3.46 0 0 1-1.721-.46l-.003-.002a3.451 3.451 0 0 1-1.72-2.982V4.943a3.445 3.445 0 0 1 5.163-2.987l12.226 7.059a3.444 3.444 0 0 1-.001 5.967l-12.22 7.056a3.462 3.462 0 0 1-1.724.462Z"></path></svg></span>
        <span class="gfg-preview-carousel-right"><svg width="20" height="20" viewBox="-5.5 0 26 26" version="1.1" fill="currentColor">
    <title>Next</title>
    <g stroke="none" stroke-width="1">
        <g sketch:type="MSLayerGroup" transform="translate(-423.000000, -1196.000000)" fill="currentColor">
            <path d="M434.885,1209 L425.629,1200.6 C424.798,1199.77 424.798,1198.43 425.629,1197.6 C426.459,1196.76 427.806,1196.76 428.637,1197.6 L439.404,1207.36 C439.854,1207.81 440.052,1208.41 440.015,1209 C440.052,1209.59 439.854,1210.19 439.404,1210.64 L428.637,1220.4 C427.806,1221.24 426.459,1221.24 425.629,1220.4 C424.798,1219.57 424.798,1218.23 425.629,1217.4 L434.885,1209" id="chevron-right" sketch:type="MSShapeGroup"></path>
        </g>
    </g>
</svg>
</span>
        <span class="gfg-preview-carousel-index-count">1 / 6</span>
        </div></div></gfg-carousel><h3 id="illustration-of-quicksort-algorithm" style="text-align:left"><span>Illustration of QuickSort Algorithm</span></h3><p dir="ltr"><span>In the previous step, we looked at how the</span><b><strong> partitioning </strong></b><span>process rearranges the array based on the chosen </span><b><strong>pivot</strong></b><span>. Next, we apply the same method recursively to the smaller sub-arrays on the </span><b><strong>left </strong></b><span>and </span><b><strong>right</strong></b><span> of the pivot. Each time, we select new pivots and partition the arrays again. This process continues until only one element is left, which is always sorted. Once every element is in its correct position, the entire array is sorted.</span></p><p dir="ltr"><span>Below image illustrates, how the recursive method calls for the smaller sub-arrays on the </span><b><strong>left</strong></b><span> and </span><b><strong>right</strong></b><span> of the </span><b><strong>pivot</strong></b><span>:</span></p><figure class="image"><img src="./Quick Sort - GeeksforGeeks_files/quick-sort--images.webp" alt="quick-sort--images" width="801" height="401" srcset="https://media.geeksforgeeks.org/wp-content/uploads/20240925173636/quick-sort--images.webp 801w,https://media.geeksforgeeks.org/wp-content/uploads/20240925173636/quick-sort--images-100.webp 100w,https://media.geeksforgeeks.org/wp-content/uploads/20240925173636/quick-sort--images-200.webp 200w,https://media.geeksforgeeks.org/wp-content/uploads/20240925173636/quick-sort--images-300.webp 300w,https://media.geeksforgeeks.org/wp-content/uploads/20240925173636/quick-sort--images-660.webp 660w,https://media.geeksforgeeks.org/wp-content/uploads/20240925173636/quick-sort--images-768.webp 768w" loading="lazy"><figcaption> </figcaption></figure><gfg-tabs data-run-ide="true" data-mode="dark" role="tablist"><template shadowrootmode="open">
    <style>
      :host {
        display: flex;
        flex-wrap: wrap;
      }
      ::slotted(gfg-panel) {
        flex-basis: 100%;
      }
      .codeblock-container[data-content]::after,
      .codeblock-container[data-danger-content]::after {
        content: attr(data-content);
        display: block;
        position: absolute;
        bottom: 0px;
        right: 0;
        padding: 4px 12px;
        font-size: 12px;
        letter-spacing: 0.05em;
        font-family: inherit;
        background-color: rgb(217, 217, 217);
        color: #424242 !important;
      }
      .codeblock-container[data-danger-content]::after {
        color: rgb(132, 5, 5) !important;
        content: attr(data-danger-content);
      }
      .codeblock-container{
        position: relative;
        width: 100%;
        font-family: sans-serif;
      }
      .code-container{
        display: flex;
        flex-direction: column;
        border: 1px solid #ddd;
        clear: left;
      }
      
      #slot-panel::-webkit-scrollbar-track {
        border-radius: 10px;
        background-color: transparent;
        width: 0px !important;
      }

      #slot-panel::-webkit-scrollbar-thumb {
        border-radius: 10px;
        background-color: #999;
        width: 5px ; 
      }
      #slot-panel::-webkit-scrollbar {
        width: 5px; 
      }
      #slot-panel::-webkit-scrollbar-thumb:hover {
        cursor: pointer;
      }
      .editor-buttons-div,
      .w-56 {
        min-width: 46px;
      }
        .editor-buttons-div{
            display: flex;
            margin-left: auto;
            height: 40px;
            position: sticky; 
            position: -webkit-sticky;
            top: 60px;
            z-index: 4;
            width: fit-content;
            justify-content: flex-end;
            align-items: start;
        }
      .gfg-code{
        padding: 0;
        width: 100%;
        display: block;
      }
      .editor-buttons{
        display:flex;
        width: fit-content;
        gap: 8px;
        margin-top: 8px;
        padding-right: 11px;
        position: relative;
        margin-bottom: 4px;
      }
      .editor-buttons.output-box {
        margin-top: 0px;
      }
      .editor-buttons.output-box button {
        margin-bottom: 0 !important;
      }
        .output-box {
            margin-left: 8px;
        }
      .code-button{
        background: white;
        margin-bottom: 10px;
        border: 2px;
        background: #e5e5e5;
        border-radius: 50px;
        width: 28px !important;
        height: 28px !important;
        cursor: pointer;
        padding: 6px;
      }
        #expand-code-button{
            margin-bottom: 0px;
        }
        #expand-driver-code {
            transform: rotate(90deg);
            transform-origin: center;
        }
      .code-output{
        background: #efefef;
        border-radius: 8px;
        width: 100%;
        margin: 10px 2px 5px 2px;
      }
      .close-output-button{
        margin-bottom: 10px;
      }
      .code-output-content{
        padding: 8px 16px;
        margin: 0;
        position: sticky;
        position: -webkit-sticky;
        margin-top: 10px;
      }
      .code-box {
        display: flex;
        flex-direction: column;
        position: relative !important;
      }
      .code-output-box {
        display: flex;
        align-items: center;
      }
     .compiled-message-box {
        background-color: #308d46;
        border-radius: 6px;
        color: white;
        width: fit-content;
        margin: 10px auto;
        text-align: center;
        flex-basis: 100%;
        display: none;
        justify-content: space-between;
        align-items: center;
        font-weight: 700;
        padding-inline: 10px;
    }
    .compiled-message-box p {
        margin-block: 5px;
    }
    .compiled-message-box-active {
        display: flex;
    }
    .compiled-mess-content {
        font-size: 10px;
        padding-left: 5px;
    }
      .generated-output{
        font-size: 15px;
        white-space: pre-wrap;
      }
      .row-output{
        color: black;
        font-size: 16px;
        padding-left : 10px;
        padding-right: 10px;
        margin-top: -12px;
        margin-bottom: -5x;
      }
      .border {
        width: 28px !important;
        height: 28px !important;
        position: absolute;
        background: transparent;
        border-radius: 50%;
        border: 2px dashed #000;
        margin-left: -8px;
        margin-top: -7px;
        animation-name: rotate;
        animation-duration: 5s;
        animation-iteration-count: infinite;
        animation-timing-function: linear;
      }
      .codeblock-container[data-mode=dark] .border {
        border-color: white !important;
      }
      #icon-tabler-copy{
        margin-bottom: -4px;
        cursor: pointer;
      }
      .gfg-icon{
        margin-left: auto;
        margin-right: auto;
        display: block !important;
      }
      
        @keyframes rotate {
            from{ transform: rotate(-360deg); }
            to{ transform: rotate(360deg); }
        }
        #code-output-element #jsFrame {
            background-color: transparent;
            border: unset;
            width: 100%;
        }
        .loading-container.active {
            width: 150px; 
            height: 50px; 
            background-color: lightgrey; 
            opacity: 70%;
            color: black; 
            position: absolute; 
            display: flex !important;
            justify-content: center;
            align-items: center;
            top: 30%;
            left: 40%;
            z-index: 1;
            white-space: nowrap !important;
            text-align: center; 
            font-size: 13px; 
            border-radius: 8px; 
            border: 1px solid rgba(255, 255, 255, 0.2);
            margin: 2rem;
        }
        .loading-container {
            display: none;
        }
        .playground-loading {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 10px;
        }
        
    @media screen and (max-width: 700px) {
        .editor-buttons-div {
            position: sticky; 
            top: 10px;  
            z-index: 4;
            width: fit-content;
            margin-left: auto;
            height: 38px;
            padding-right: 5px;
        }

        .editor-buttons {
            display: flex;
            width: fit-content;
            flex-direction: row;
            gap: 8px;
        }
        .code-box {
            position: relative;
            flex-direction: column;
        }
        .code-button {
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .compiled-message-box svg {
            display: none;
        }
    }

    @media screen and (max-width: 375px) {
        .compiled-message-box {
            margin-inline: 5px;
        }
    }
    </style>

    <div class="codeblock-container" data-mode="dark">
        <slot name="tab"></slot>
        <div class="code-container">
            <div class="code-box">    
                <div id="editor-buttons-div" class="editor-buttons-div" style="top: 40px;">
                    <div id="editor-buttons" class="editor-buttons">
                        <button id="expand-driver-code" class="expand-driver-code code-button" title="Expand all Diver Codes" style="display: none;"><svg id="expand-icon" width="17" height="17" viewBox="1 5 47 6" stroke-width="1" stroke="#2c3e50" fill="none" stroke-linecap="round" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg">
            <path d="M44.4507 7.91963C44.7062 8.18159 44.8496 8.53199 44.8496 8.89419C44.8496 9.25639 44.7062 9.60088 44.4507 9.8523L38.9862 15.2053C38.8593 15.3296 38.7087 15.4272 38.5429 15.4924C38.3771 15.5577 38.1995 15.5894 38.02 15.5857C37.6577 15.5782 37.3101 15.427 37.0539 15.1655C36.7977 14.9039 36.6537 14.5533 36.6537 14.1909C36.6537 13.8284 36.7977 13.4838 37.0539 13.2328L40.1862 10.1645L30.3697 9.96203C30.0073 9.95456 29.6599 9.80343 29.4037 9.54189C29.1475 9.28035 29.0035 8.92983 29.0035 8.56743C29.0035 8.20503 29.1475 7.86044 29.4037 7.60947C29.6599 7.3585 30.0073 7.22171 30.3697 7.22918L40.1862 7.4316L37.0539 4.23407C36.927 4.10455 36.8264 3.95182 36.7577 3.7846C36.6891 3.61738 36.6537 3.43894 36.6537 3.25948C36.6537 3.08001 36.6891 2.90304 36.7577 2.73865C36.8264 2.57426 36.927 2.42568 37.0539 2.30139C37.1808 2.17711 37.3314 2.07955 37.4972 2.01429C37.6629 1.94903 37.8406 1.91735 38.02 1.92105C38.1995 1.92475 38.3771 1.96376 38.5429 2.03586C38.7087 2.10795 38.8593 2.21172 38.9862 2.34124L44.4507 7.91963Z" fill="black"></path>
            <rect x="24.5859" y="16.8309" width="3.31306" height="16.5653" rx="1.65653" transform="rotate(-180 24.5859 16.8309)" fill="black"></rect>
            <path d="M0.884258 7.91957C0.62878 8.18152 0.485352 8.53193 0.485352 8.89413C0.485352 9.25632 0.62878 9.60082 0.884258 9.85224L6.3488 15.2053C6.47567 15.3295 6.6263 15.4271 6.79207 15.4924C6.95783 15.5576 7.1355 15.5893 7.31493 15.5856C7.6773 15.5781 8.02483 15.427 8.28106 15.1654C8.5373 14.9038 8.68125 14.5533 8.68125 14.1908C8.68125 13.8284 8.5373 13.4837 8.28106 13.2327L5.14879 10.1644L14.9653 9.96197C15.3276 9.9545 15.6751 9.80337 15.9313 9.54183C16.1875 9.28029 16.3314 8.92977 16.3314 8.56737C16.3314 8.20497 16.1875 7.86038 15.9313 7.60941C15.6751 7.35844 15.3276 7.22164 14.9653 7.22912L5.14879 7.43154L8.28106 4.23401C8.40794 4.10449 8.50858 3.95176 8.57724 3.78454C8.64591 3.61732 8.68125 3.43888 8.68125 3.25942C8.68125 3.07995 8.64591 2.90298 8.57724 2.73859C8.50858 2.5742 8.40794 2.42562 8.28106 2.30133C8.15419 2.17705 8.00357 2.07949 7.8378 2.01423C7.67203 1.94897 7.49436 1.91729 7.31493 1.92099C7.1355 1.92469 6.95783 1.9637 6.79207 2.03579C6.6263 2.10789 6.47567 2.21166 6.3488 2.34118L0.884258 7.91957Z" fill="black"></path>
        </svg></button>
                        <button class="code-button" id="edit-close-button" title="Close Editor" buttontype="edit"><svg xmlns="http://www.w3.org/2000/svg" id="edit-close-icon" class="gfg-icon" width="17" height="17" viewBox="0 0 24 24" stroke-width="2.0" stroke="#2c3e50" fill="none" stroke-linecap="round" stroke-linejoin="round">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <path d="M18 6l-12 12"></path>
        <path d="M6 6l12 12"></path>
    </svg></button>
                        <button class="code-button" id="run-code-button" title="Run Code and See Output">
                            <div class="border" id="run-code-loader" hidden=""></div>
                            <svg xmlns="http://www.w3.org/2000/svg" class="gfg-icon" width="17" height="17" viewBox="0 0 24 24" stroke-width="2.0" stroke="#2c3e50" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <path d="M7 4v16l13 -8z"></path>
                            </svg>
                        </button>
                        <button class="code-button" id="copy-code-button" title="Copy Code"> <svg xmlns="http://www.w3.org/2000/svg" class="gfg-icon" width="17" height="17" viewBox="0 0 24 24" stroke-width="2.0" stroke="#2c3e50" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <path d="M8 8m0 2a2 2 0 0 1 2 -2h8a2 2 0 0 1 2 2v8a2 2 0 0 1 -2 2h-8a2 2 0 0 1 -2 -2z"></path>
                                <path d="M16 8v-2a2 2 0 0 0 -2 -2h-8a2 2 0 0 0 -2 2v8a2 2 0 0 0 2 2h2"></path>
                        </svg></button>
                        <button class="code-button" id="mode-button" title="Light Mode" hidden="true" mode="dark"><svg xmlns="http://www.w3.org/2000/svg" class="gfg-icon" width="20" height="20" viewBox="0 0 24 24" stroke-width="1.5" stroke="#2c3e50" fill="none" stroke-linecap="round" stroke-linejoin="round">
        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
        <path d="M14.828 14.828a4 4 0 1 0 -5.656 -5.656a4 4 0 0 0 5.656 5.656z"></path>
        <path d="M6.343 17.657l-1.414 1.414"></path><path d="M6.343 6.343l-1.414 -1.414"></path><path d="M17.657 6.343l1.414 -1.414"></path><path d="M17.657 17.657l1.414 1.414"></path><path d="M4 12h-2"></path><path d="M12 4v-2"></path><path d="M20 12h2"></path><path d="M12 20v2"></path>
    </svg></button>
                        
                    </div>
                </div>
                <div id="slot-panel" class="gfg-code" style="width: calc(100% + 0px); margin-top: -35px;">
                     <div id="playground-loader" class="loading-container">
                        <span class="playground-loading">Loading Playground...</span>
                    </div>
                    <slot name="panel"></slot>
                </div>
            </div>
            <div class="code-output-box" id="code-output-box">
                <div class="editor-buttons w-56 output-box" title="Close Output">
                    <button class="code-button" id="close-output-button" hidden="">
                        <svg xmlns="http://www.w3.org/2000/svg" class="gfg-icon" width="17" height="17" viewBox="0 0 24 24" stroke-width="1.5" stroke="#2c3e50" fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                            <path d="M9 12h-3.586a1 1 0 0 1 -.707 -1.707l6.586 -6.586a1 1 0 0 1 1.414 0l6.586 6.586a1 1 0 0 1 -.707 1.707h-3.586v6h-6v-6z"></path>
                            <path d="M9 21h6"></path>
                        </svg>
                    </button>
                </div> 
                <div class="code-output" id="code-output" hidden="">
                    <div class="row-output">
                        <pre class="generated-output" id="code-output-element"></pre>
                    </div> 
                </div>
            </div>
            </div>
        </div>
    
    </template>
            <gfg-tab slot="tab" role="tab" id="gfg-tab-generated-0" aria-selected="true" tabindex="0" aria-controls="gfg-panel-generated-0" selected="">C++</gfg-tab>
<gfg-panel slot="panel" data-code-lang="cpp" data-main-code-start="None" data-main-code-end="None" role="tabpanel" id="gfg-panel-generated-0" aria-labelledby="gfg-tab-generated-0">
    <code class="language-cpp"><div class="highlight monokai"><pre hidden=""><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;iostream&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;vector&gt;</span>
<span class="k">using</span><span class="w"> </span><span class="k">namespace</span><span class="w"> </span><span class="nn">std</span><span class="p">;</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">partition</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="w"> </span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span>
<span class="w">    </span><span class="c1">// choose the pivot</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">pivot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="p">[</span><span class="n">high</span><span class="p">];</span>
<span class="w">  </span>
<span class="w">    </span><span class="c1">// undex of smaller element and indicates </span>
<span class="w">    </span><span class="c1">// the right position of pivot found so far</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>

<span class="w">    </span><span class="c1">// Traverse arr[low..high] and move all smaller</span>
<span class="w">    </span><span class="c1">// elements on left side. Elements from low to </span>
<span class="w">    </span><span class="c1">// i are smaller after every iteration</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">low</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">pivot</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">i</span><span class="o">++</span><span class="p">;</span>
<span class="w">            </span><span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span>
<span class="w">    </span><span class="c1">// move pivot after smaller elements and</span>
<span class="w">    </span><span class="c1">// return its position</span>
<span class="w">    </span><span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">],</span><span class="w"> </span><span class="n">arr</span><span class="p">[</span><span class="n">high</span><span class="p">]);</span><span class="w">  </span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// the QuickSort function implementation</span>
<span class="kt">void</span><span class="w"> </span><span class="nf">quickSort</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span><span class="w"> </span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">low</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">      </span>
<span class="w">        </span><span class="c1">// pi is the partition return index of pivot</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">pi</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">partition</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="p">);</span>

<span class="w">        </span><span class="c1">// recursion calls for smaller elements</span>
<span class="w">        </span><span class="c1">// and greater or equals elements</span>
<span class="w">        </span><span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="n">pi</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span>
<span class="w">        </span><span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">pi</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="w"> </span><span class="n">arr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="mi">9</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">};</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
<span class="w">    </span><span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span>
<span class="w">  </span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">cout</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="s">" "</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div></code>
<div class="CodeMirror cm-s-monokai"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 4px; left: 15px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" tabindex="-1" cm-not-content="true" style="bottom: 0px;"><div style="min-width: 1px; height: 0px;"></div></div><div class="CodeMirror-hscrollbar" tabindex="-1" cm-not-content="true"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: -15px; border-right-width: 15px; min-height: 1262px; min-width: 493.016px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"><div class="CodeMirror-cursor" style="left: 15px; top: 0px; height: 23.2188px;">&nbsp;</div></div><div class="CodeMirror-code" role="presentation" style=""><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta">#include &lt;iostream&gt;</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta">#include &lt;vector&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">using</span> <span class="cm-keyword">namespace</span> <span class="cm-def">std</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text="">​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-type">int</span> <span class="cm-def">partition</span>(<span class="cm-variable">vector</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;&amp;</span> <span class="cm-variable">arr</span>, <span class="cm-type">int</span> <span class="cm-variable">low</span>, <span class="cm-type">int</span> <span class="cm-variable">high</span>) {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">  </span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-comment">// choose the pivot</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-type">int</span> <span class="cm-variable">pivot</span> <span class="cm-operator">=</span> <span class="cm-variable">arr</span>[<span class="cm-variable">high</span>];</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">  </span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-comment">// undex of smaller element and indicates </span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-comment">// the right position of pivot found so far</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-type">int</span> <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-variable">low</span> <span class="cm-operator">-</span> <span class="cm-number">1</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text="">​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-comment">// Traverse arr[low..high] and move all smaller</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-comment">// elements on left side. Elements from low to </span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-comment">// i are smaller after every iteration</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">for</span> (<span class="cm-type">int</span> <span class="cm-variable">j</span> <span class="cm-operator">=</span> <span class="cm-variable">low</span>; <span class="cm-variable">j</span> <span class="cm-operator">&lt;=</span> <span class="cm-variable">high</span> <span class="cm-operator">-</span> <span class="cm-number">1</span>; <span class="cm-variable">j</span><span class="cm-operator">++</span>) {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">        <span class="cm-keyword">if</span> (<span class="cm-variable">arr</span>[<span class="cm-variable">j</span>] <span class="cm-operator">&lt;</span> <span class="cm-variable">pivot</span>) {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">            <span class="cm-variable">i</span><span class="cm-operator">++</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">            <span class="cm-variable">swap</span>(<span class="cm-variable">arr</span>[<span class="cm-variable">i</span>], <span class="cm-variable">arr</span>[<span class="cm-variable">j</span>]);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">        }</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    }</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    </span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-comment">// move pivot after smaller elements and</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-comment">// return its position</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-variable">swap</span>(<span class="cm-variable">arr</span>[<span class="cm-variable">i</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>], <span class="cm-variable">arr</span>[<span class="cm-variable">high</span>]);  </span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">return</span> <span class="cm-variable">i</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text="">​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// the QuickSort function implementation</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-type">void</span> <span class="cm-def">quickSort</span>(<span class="cm-variable">vector</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;&amp;</span> <span class="cm-variable">arr</span>, <span class="cm-type">int</span> <span class="cm-variable">low</span>, <span class="cm-type">int</span> <span class="cm-variable">high</span>) {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">  </span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">if</span> (<span class="cm-variable">low</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">high</span>) {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">      </span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">        <span class="cm-comment">// pi is the partition return index of pivot</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">        <span class="cm-type">int</span> <span class="cm-variable">pi</span> <span class="cm-operator">=</span> <span class="cm-variable">partition</span>(<span class="cm-variable">arr</span>, <span class="cm-variable">low</span>, <span class="cm-variable">high</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text="">​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">        <span class="cm-comment">// recursion calls for smaller elements</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">        <span class="cm-comment">// and greater or equals elements</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">        <span class="cm-variable">quickSort</span>(<span class="cm-variable">arr</span>, <span class="cm-variable">low</span>, <span class="cm-variable">pi</span> <span class="cm-operator">-</span> <span class="cm-number">1</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">        <span class="cm-variable">quickSort</span>(<span class="cm-variable">arr</span>, <span class="cm-variable">pi</span> <span class="cm-operator">+</span> <span class="cm-number">1</span>, <span class="cm-variable">high</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    }</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text="">​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-type">int</span> <span class="cm-def">main</span>() {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-variable">vector</span><span class="cm-operator">&lt;</span><span class="cm-type">int</span><span class="cm-operator">&gt;</span> <span class="cm-variable">arr</span> <span class="cm-operator">=</span> {<span class="cm-number">10</span>, <span class="cm-number">7</span>, <span class="cm-number">8</span>, <span class="cm-number">9</span>, <span class="cm-number">1</span>, <span class="cm-number">5</span>};</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-type">int</span> <span class="cm-variable">n</span> <span class="cm-operator">=</span> <span class="cm-variable">arr</span>.<span class="cm-variable">size</span>();</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-variable">quickSort</span>(<span class="cm-variable">arr</span>, <span class="cm-number">0</span>, <span class="cm-variable">n</span> <span class="cm-operator">-</span> <span class="cm-number">1</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">  </span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">for</span> (<span class="cm-type">int</span> <span class="cm-variable">i</span> <span class="cm-operator">=</span> <span class="cm-number">0</span>; <span class="cm-variable">i</span> <span class="cm-operator">&lt;</span> <span class="cm-variable">n</span>; <span class="cm-variable">i</span><span class="cm-operator">++</span>) {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">        <span class="cm-variable">cout</span> <span class="cm-operator">&lt;&lt;</span> <span class="cm-variable">arr</span>[<span class="cm-variable">i</span>] <span class="cm-operator">&lt;&lt;</span> <span class="cm-string">" "</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    }</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">    <span class="cm-keyword">return</span> <span class="cm-number">0</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div><div style="position: absolute; height: 15px; width: 1px; border-bottom: 0px solid transparent; top: 1262px;"></div><div class="CodeMirror-gutters" style="display: none; height: 1277px;"></div></div></div></gfg-panel>
            <gfg-tab slot="tab" role="tab" id="gfg-tab-generated-1" aria-selected="false" tabindex="-1" aria-controls="gfg-panel-generated-1">C</gfg-tab>
<gfg-panel slot="panel" data-code-lang="c" data-main-code-start="None" data-main-code-end="None" role="tabpanel" id="gfg-panel-generated-1" aria-labelledby="gfg-tab-generated-1" hidden="">
    <code class="language-c"><div class="highlight monokai"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdio.h&gt;</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">*</span><span class="w"> </span><span class="n">b</span><span class="p">);</span>

<span class="c1">// partition function</span>
<span class="kt">int</span><span class="w"> </span><span class="nf">partition</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">arr</span><span class="p">[],</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span>
<span class="w">    </span><span class="c1">// Choose the pivot</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">pivot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="p">[</span><span class="n">high</span><span class="p">];</span>
<span class="w">    </span>
<span class="w">    </span><span class="c1">// Index of smaller element and indicates </span>
<span class="w">    </span><span class="c1">// the right position of pivot found so far</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>

<span class="w">    </span><span class="c1">// Traverse arr[low..high] and move all smaller</span>
<span class="w">    </span><span class="c1">// elements to the left side. Elements from low to </span>
<span class="w">    </span><span class="c1">// i are smaller after every iteration</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">low</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">pivot</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">i</span><span class="o">++</span><span class="p">;</span>
<span class="w">            </span><span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span>
<span class="w">    </span><span class="c1">// Move pivot after smaller elements and</span>
<span class="w">    </span><span class="c1">// return its position</span>
<span class="w">    </span><span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">],</span><span class="w"> </span><span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">high</span><span class="p">]);</span><span class="w">  </span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// The QuickSort function implementation</span>
<span class="kt">void</span><span class="w"> </span><span class="nf">quickSort</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">arr</span><span class="p">[],</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">low</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span>
<span class="w">        </span><span class="c1">// pi is the partition return index of pivot</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">pi</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">partition</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="p">);</span>

<span class="w">        </span><span class="c1">// recursion calls for smaller elements</span>
<span class="w">        </span><span class="c1">// and greater or equals elements</span>
<span class="w">        </span><span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="n">pi</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span>
<span class="w">        </span><span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">pi</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">*</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="n">a</span><span class="p">;</span>
<span class="w">    </span><span class="o">*</span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="n">b</span><span class="p">;</span>
<span class="w">    </span><span class="o">*</span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">t</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">arr</span><span class="p">[]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="mi">9</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">};</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

<span class="w">    </span><span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">printf</span><span class="p">(</span><span class="s">"%d "</span><span class="p">,</span><span class="w"> </span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div></code>
</gfg-panel>
            <gfg-tab slot="tab" role="tab" id="gfg-tab-generated-2" aria-selected="false" tabindex="-1" aria-controls="gfg-panel-generated-2">Java</gfg-tab>
<gfg-panel slot="panel" data-code-lang="java" data-main-code-start="None" data-main-code-end="None" role="tabpanel" id="gfg-panel-generated-2" aria-labelledby="gfg-tab-generated-2" hidden="">
    <code class="language-java"><div class="highlight monokai"><pre><span></span><span class="kn">import</span><span class="w"> </span><span class="nn">java.util.Arrays</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">GfG</span><span class="w"> </span><span class="p">{</span>

<span class="w">    </span><span class="c1">// partition function</span>
<span class="w">    </span><span class="kd">static</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">partition</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span>
<span class="w">        </span><span class="c1">// choose the pivot</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">pivot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">high</span><span class="o">]</span><span class="p">;</span>
<span class="w">        </span>
<span class="w">        </span><span class="c1">// index of smaller element and indicates </span>
<span class="w">        </span><span class="c1">// the right position of pivot found so far</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>

<span class="w">        </span><span class="c1">// traverse arr[low..high] and move all smaller</span>
<span class="w">        </span><span class="c1">// elements to the left side. Elements from low to </span>
<span class="w">        </span><span class="c1">// i are smaller after every iteration</span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">low</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">pivot</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">                </span><span class="n">i</span><span class="o">++</span><span class="p">;</span>
<span class="w">                </span><span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="p">);</span>
<span class="w">            </span><span class="p">}</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">        </span>
<span class="w">        </span><span class="c1">// Move pivot after smaller elements and</span>
<span class="w">        </span><span class="c1">// return its position</span>
<span class="w">        </span><span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="p">);</span><span class="w">  </span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="c1">// swap function</span>
<span class="w">    </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">;</span>
<span class="w">        </span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">;</span>
<span class="w">        </span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="c1">// the QuickSort function implementation</span>
<span class="w">    </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">quickSort</span><span class="p">(</span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">low</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span>
<span class="w">            </span><span class="c1">// pi is the partition return index of pivot</span>
<span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">pi</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">partition</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="p">);</span>

<span class="w">            </span><span class="c1">// recursion calls for smaller elements</span>
<span class="w">            </span><span class="c1">// and greater or equals elements</span>
<span class="w">            </span><span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="n">pi</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span>
<span class="w">            </span><span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">pi</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="p">);</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="kt">int</span><span class="o">[]</span><span class="w"> </span><span class="n">arr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w"> </span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="mi">9</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">};</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="p">.</span><span class="na">length</span><span class="p">;</span>
<span class="w">      </span>
<span class="w">        </span><span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span>
<span class="w">        </span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">val</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="n">arr</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">print</span><span class="p">(</span><span class="n">val</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">" "</span><span class="p">);</span><span class="w">  </span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
</pre></div></code>
</gfg-panel>
            <gfg-tab slot="tab" role="tab" id="gfg-tab-generated-3" aria-selected="false" tabindex="-1" aria-controls="gfg-panel-generated-3">Python</gfg-tab>
<gfg-panel slot="panel" data-code-lang="python3" data-main-code-start="None" data-main-code-end="None" role="tabpanel" id="gfg-panel-generated-3" aria-labelledby="gfg-tab-generated-3" hidden="">
    <code class="language-python3"><div class="highlight monokai"><pre><span></span><span class="c1"># partition function</span>
<span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">):</span>
    
    <span class="c1"># choose the pivot</span>
    <span class="n">pivot</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">high</span><span class="p">]</span>
    
    <span class="c1"># index of smaller element and indicates </span>
    <span class="c1"># the right position of pivot found so far</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">low</span> <span class="o">-</span> <span class="mi">1</span>
    
    <span class="c1"># traverse arr[low..high] and move all smaller</span>
    <span class="c1"># elements to the left side. Elements from low to </span>
    <span class="c1"># i are smaller after every iteration</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
    
    <span class="c1"># move pivot after smaller elements and</span>
    <span class="c1"># return its position</span>
    <span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>

<span class="c1"># swap function</span>
<span class="k">def</span> <span class="nf">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
    <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

<span class="c1"># the QuickSort function implementation</span>
<span class="k">def</span> <span class="nf">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">:</span>
        
        <span class="c1"># pi is the partition return index of pivot</span>
        <span class="n">pi</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">)</span>
        
        <span class="c1"># recursion calls for smaller elements</span>
        <span class="c1"># and greater or equals elements</span>
        <span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">pi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">pi</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">"__main__"</span><span class="p">:</span>
    <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>

    <span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">" "</span><span class="p">)</span> 
</pre></div></code>
</gfg-panel>
            <gfg-tab slot="tab" role="tab" id="gfg-tab-generated-4" aria-selected="false" tabindex="-1" aria-controls="gfg-panel-generated-4">C#</gfg-tab>
<gfg-panel slot="panel" data-code-lang="csharp" data-main-code-start="None" data-main-code-end="None" role="tabpanel" id="gfg-panel-generated-4" aria-labelledby="gfg-tab-generated-4" hidden="">
    <code class="language-csharp"><div class="highlight monokai"><pre><span></span><span class="k">using</span><span class="w"> </span><span class="nn">System</span><span class="p">;</span>

<span class="k">class</span><span class="w"> </span><span class="nc">GfG</span><span class="w"> </span><span class="p">{</span>

<span class="w">    </span><span class="c1">// partition function</span>
<span class="w">    </span><span class="k">static</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="nf">partition</span><span class="p">(</span><span class="kt">int</span><span class="p">[]</span><span class="w"> </span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span>
<span class="w">        </span><span class="c1">// choose the pivot</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">pivot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="p">[</span><span class="n">high</span><span class="p">];</span>
<span class="w">        </span>
<span class="w">        </span><span class="c1">// index of smaller element and indicates </span>
<span class="w">        </span><span class="c1">// the right position of pivot found so far</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">low</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">1</span><span class="p">;</span>

<span class="w">        </span><span class="c1">// traverse arr[low..high] and move all smaller</span>
<span class="w">        </span><span class="c1">// elements to the left side. Elements from low to </span>
<span class="w">        </span><span class="c1">// i are smaller after every iteration</span>
<span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">low</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="n">high</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">1</span><span class="p">;</span><span class="w"> </span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">pivot</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">                </span><span class="n">i</span><span class="o">++</span><span class="p">;</span>
<span class="w">                </span><span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="p">);</span>
<span class="w">            </span><span class="p">}</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">        </span>
<span class="w">        </span><span class="c1">// move pivot after smaller elements and</span>
<span class="w">        </span><span class="c1">// return its position</span>
<span class="w">        </span><span class="n">swap</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="p">);</span><span class="w">  </span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="c1">// swap function</span>
<span class="w">    </span><span class="k">static</span><span class="w"> </span><span class="k">void</span><span class="w"> </span><span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="p">[]</span><span class="w"> </span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">j</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
<span class="w">        </span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
<span class="w">        </span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="c1">// The QuickSort function implementation</span>
<span class="w">    </span><span class="k">static</span><span class="w"> </span><span class="k">void</span><span class="w"> </span><span class="nf">quickSort</span><span class="p">(</span><span class="kt">int</span><span class="p">[]</span><span class="w"> </span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">low</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span>
<span class="w">            </span><span class="c1">// pi is the partition return index of pivot</span>
<span class="w">            </span><span class="kt">int</span><span class="w"> </span><span class="n">pi</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">partition</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="p">);</span>

<span class="w">            </span><span class="c1">// recursion calls for smaller elements</span>
<span class="w">            </span><span class="c1">// and greater or equals elements</span>
<span class="w">            </span><span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">low</span><span class="p">,</span><span class="w"> </span><span class="n">pi</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">1</span><span class="p">);</span>
<span class="w">            </span><span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="n">pi</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">high</span><span class="p">);</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="k">static</span><span class="w"> </span><span class="k">void</span><span class="w"> </span><span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="kt">int</span><span class="p">[]</span><span class="w"> </span><span class="n">arr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="m">8</span><span class="p">,</span><span class="w"> </span><span class="m">9</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="p">};</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">arr</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>

<span class="w">        </span><span class="n">quickSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="m">1</span><span class="p">);</span>
<span class="w">        </span><span class="k">foreach</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">val</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">arr</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="n">val</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s">" "</span><span class="p">);</span><span class="w"> </span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
</pre></div></code>
</gfg-panel>
            <gfg-tab slot="tab" role="tab" id="gfg-tab-generated-5" aria-selected="false" tabindex="-1" aria-controls="gfg-panel-generated-5">JavaScript</gfg-tab>
<gfg-panel slot="panel" data-code-lang="javascript" data-main-code-start="None" data-main-code-end="None" role="tabpanel" id="gfg-panel-generated-5" aria-labelledby="gfg-tab-generated-5" hidden="">
    <code class="language-javascript"><div class="highlight monokai"><pre><span></span><span class="c1">// partition function</span>
<span class="kd">function</span><span class="w"> </span><span class="nx">partition</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="w"> </span><span class="nx">low</span><span class="p">,</span><span class="w"> </span><span class="nx">high</span><span class="p">)</span>
<span class="p">{</span>

<span class="w">    </span><span class="c1">// choose the pivot</span>
<span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="nx">pivot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">arr</span><span class="p">[</span><span class="nx">high</span><span class="p">];</span>

<span class="w">    </span><span class="c1">// index of smaller element and indicates</span>
<span class="w">    </span><span class="c1">// the right position of pivot found so far</span>
<span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="nx">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">low</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mf">1</span><span class="p">;</span>

<span class="w">    </span><span class="c1">// traverse arr[low..high] and move all smaller</span>
<span class="w">    </span><span class="c1">// elements to the left side. Elements from low to</span>
<span class="w">    </span><span class="c1">// i are smaller after every iteration</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kd">let</span><span class="w"> </span><span class="nx">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">low</span><span class="p">;</span><span class="w"> </span><span class="nx">j</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="nx">high</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mf">1</span><span class="p">;</span><span class="w"> </span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="nx">pivot</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="nx">i</span><span class="o">++</span><span class="p">;</span>
<span class="w">            </span><span class="nx">swap</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="w"> </span><span class="nx">i</span><span class="p">,</span><span class="w"> </span><span class="nx">j</span><span class="p">);</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="c1">// move pivot after smaller elements and</span>
<span class="w">    </span><span class="c1">// return its position</span>
<span class="w">    </span><span class="nx">swap</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="w"> </span><span class="nx">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="nx">high</span><span class="p">);</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="nx">i</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mf">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// swap function</span>
<span class="kd">function</span><span class="w"> </span><span class="nx">swap</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="w"> </span><span class="nx">i</span><span class="p">,</span><span class="w"> </span><span class="nx">j</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="nx">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
<span class="w">    </span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
<span class="w">    </span><span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">temp</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// the QuickSort function implementation</span>
<span class="kd">function</span><span class="w"> </span><span class="nx">quickSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="w"> </span><span class="nx">low</span><span class="p">,</span><span class="w"> </span><span class="nx">high</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nx">low</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="nx">high</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>

<span class="w">        </span><span class="c1">// pi is the partition return index of pivot</span>
<span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="nx">pi</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">partition</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="w"> </span><span class="nx">low</span><span class="p">,</span><span class="w"> </span><span class="nx">high</span><span class="p">);</span>

<span class="w">        </span><span class="c1">// recursion calls for smaller elements</span>
<span class="w">        </span><span class="c1">// and greater or equals elements</span>
<span class="w">        </span><span class="nx">quickSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="w"> </span><span class="nx">low</span><span class="p">,</span><span class="w"> </span><span class="nx">pi</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mf">1</span><span class="p">);</span>
<span class="w">        </span><span class="nx">quickSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="w"> </span><span class="nx">pi</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="nx">high</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>


<span class="c1">// Driver Code</span>
<span class="kd">let</span><span class="w"> </span><span class="nx">arr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="mf">10</span><span class="p">,</span><span class="w"> </span><span class="mf">7</span><span class="p">,</span><span class="w"> </span><span class="mf">8</span><span class="p">,</span><span class="w"> </span><span class="mf">9</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">,</span><span class="w"> </span><span class="mf">5</span><span class="w"> </span><span class="p">];</span>
<span class="kd">let</span><span class="w"> </span><span class="nx">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>

<span class="c1">// call QuickSort on the entire array</span>
<span class="nx">quickSort</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="w"> </span><span class="mf">0</span><span class="p">,</span><span class="w"> </span><span class="nx">n</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mf">1</span><span class="p">);</span>
<span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kd">let</span><span class="w"> </span><span class="nx">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">0</span><span class="p">;</span><span class="w"> </span><span class="nx">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="w"> </span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s2">" "</span><span class="p">);</span>
<span class="p">}</span>
</pre></div></code>
</gfg-panel></gfg-tabs><div class="code-output"><br><strong>Output</strong><pre>1 5 7 8 9 10 </pre></div><h3 id="complexity-analysis-of-quick-sort" style="text-align:left"><span>Complexity Analysis of Quick Sort</span></h3><p dir="ltr"><b><strong>Time Complexity:</strong></b></p><div id="GFG_AD_Incontent_2" style="text-align: center; margin: 10px 0px;"></div><ul><li value="1"><b><strong>Best Case: </strong></b><span>(Ω(n log n)), Occurs when the pivot element divides the array into two equal halves.</span></li><li value="2"><b><strong>Average Case </strong></b><span>(θ(n log n)), On average, the pivot divides the array into two parts, but not necessarily equal.</span></li><li value="3"><b><strong>Worst Case: </strong></b><span>(O(n²)), Occurs when the smallest or largest element is always chosen as the pivot (e.g., sorted arrays). </span></li></ul><p dir="ltr"><b><strong>Auxiliary Space:</strong></b></p><ul><li value="1"><b><strong>Worst-case scenario:</strong></b><span>&nbsp;</span><b><strong>O(n)&nbsp;</strong></b><span>due to unbalanced partitioning leading to a skewed recursion tree requiring a call stack of size O(n).</span></li><li value="2"><b><strong>Best-case scenario: O(log n)</strong></b><span>&nbsp;as a result of balanced partitioning leading to a balanced recursion tree with a call stack of size O(log n).</span></li></ul><p dir="ltr"><span>Please refer </span><a href="https://www.geeksforgeeks.org/dsa/time-and-space-complexity-analysis-of-quick-sort/" target="_blank" rel="noopener"><span>Time and Space Complexity Analysis of Quick Sort</span></a><span> for more details.</span></p><h3 id="advantages-of-quick-sort" style="text-align:left"><b><strong> </strong></b><span>Advantages of Quick Sort</span></h3><ul><li value="1"><span>It is a divide-and-conquer algorithm that makes it easier to solve problems. </span></li><li value="2"><span>It is efficient on large data sets. </span></li><li value="3"><span>It has a low overhead, as it only requires a small amount of memory to function. </span></li><li value="4"><span>It is Cache Friendly as we work on the same array to sort and do not copy data to any auxiliary array.</span></li><li value="5"><span>Fastest general purpose algorithm for large data when stability is not required. </span></li><li value="6"><span>It is </span><a href="https://www.geeksforgeeks.org/dsa/tail-recursion/" target="_blank" rel="noopener"><b><strong>tail recursive</strong></b></a><span> and hence all the </span><a href="https://www.geeksforgeeks.org/dsa/quicksort-tail-call-optimization-reducing-worst-case-space-log-n/" target="_blank" rel="noopener"><span>tail call optimization</span></a><span> can be done.</span></li></ul><h3 id="disadvantages-of-quick-sort" style="text-align:left"><span> Disadvantages of Quick Sort</span></h3><ul><li value="1"><span> It has a worst-case time complexity of O(n</span><sup><span>2</span></sup><span>), which occurs when the pivot is chosen poorly. </span></li><li value="2"><span> It is not a good choice for small data sets. </span></li><li value="3"><span> It is not a stable sort, meaning that if two elements have the same key, their relative order will not be preserved in the sorted output in case of quick sort, because here we are swapping elements according to the pivot's position (without considering their original positions). </span></li></ul><h3 id="applications-of-quick-sort" style="text-align:left"><span>Applications of Quick Sort</span></h3><ul><li value="1"><span>Sorting large datasets efficiently in memory.</span></li><li value="2"><span>Used in library sort functions (like C++ std::sort and Java Arrays.sort for primitives).</span></li><li value="3"><span>Arranging records in databases for faster searching.</span></li><li value="4"><span>Preprocessing step in algorithms requiring sorted input (e.g., binary search, two-pointer techniques).</span></li><li value="5"><span>Finding the kth smallest/largest element using Quickselect (a variant of quicksort).</span></li><li value="6"><span>Sorting arrays of objects based on multiple keys (custom comparators).</span></li><li value="7"><span>Data compression algorithms (like Huffman coding preprocessing).</span></li><li value="8"><span>Graphics and computational geometry (e.g., convex hull algorithms).</span></li></ul><p dir="ltr"><span>Please refer </span><a href="https://www.geeksforgeeks.org/dsa/application-and-uses-of-quicksort/" target="_blank" rel="noopener"><span>Application of Quicksort</span></a><span> for more details.</span></p>                                <script>
                                    const rawVideoDataMap = {"10657":{"id":10657,"title":"QuickSort Introduction","slug":"quicksort-introduction","description":"<h2>Quick Sort Algorithm | Comprehensive Guide<\/h2><p><strong>Quick Sort<\/strong> is one of the most efficient and widely-used sorting algorithms based on the <strong>divide-and-conquer<\/strong> strategy. It works by selecting a \"pivot\" element and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.<\/p><h3>What is Quick Sort?<\/h3><p><strong>Quick Sort<\/strong> is a comparison-based sorting algorithm that efficiently sorts elements by partitioning the array into smaller sub-arrays. The core idea is to pick a pivot element, partition the array around the pivot, and recursively sort the sub-arrays. This results in a time complexity of <strong>O(n log n)<\/strong> on average, making it one of the fastest sorting algorithms.<\/p><h3>How Quick Sort Works<\/h3><p><strong>Choose a Pivot<\/strong>:<\/p><ul><li>Select a pivot element from the array. The pivot can be any element, but common choices include the first element, the last element, or a randomly selected one.<\/li><\/ul><p><strong>Partitioning<\/strong>:<\/p><ul><li>Reorder the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it. The pivot is now in its correct position in the sorted array.<\/li><\/ul><p><strong>Recursively Sort the Sub-arrays<\/strong>:<\/p><ul><li>Apply the same process recursively to the sub-arrays (the elements less than and greater than the pivot). Continue dividing and sorting until the sub-arrays have only one element or are empty.<\/li><\/ul><h3>Example of Quick Sort<\/h3><p>Consider sorting the array [10, 80, 30, 90, 40, 50, 70] using Quick Sort.<\/p><p><strong>Initial Array<\/strong>:<br>[10, 80, 30, 90, 40, 50, 70]<\/p><p><strong>Choose Pivot<\/strong>:<br>Select 70 as the pivot.<\/p><p><strong>Partitioning<\/strong>:<br>Reorder the array so elements less than 70 are on the left and those greater are on the right. After partitioning, the array looks like:<br>[10, 30, 40, 50, 70, 90, 80]<\/p><p><strong>Recursive Steps<\/strong>:<\/p><ul><li>Sort the left sub-array [10, 30, 40, 50] and the right sub-array [90, 80] recursively.<\/li><\/ul><p><strong>Final Sorted Array<\/strong>:<br>After recursively sorting the sub-arrays, the final sorted array will be:<br>[10, 30, 40, 50, 70, 80, 90]<\/p><h3>Time Complexity of Quick Sort<\/h3><p><strong>Best and Average Case<\/strong>:<\/p><ul><li>The time complexity of Quick Sort is <strong>O(n log n)<\/strong> when the pivot splits the array into relatively equal-sized sub-arrays. This is the average-case performance of Quick Sort.<\/li><\/ul><p><strong>Worst Case<\/strong>:<\/p><ul><li>The worst-case time complexity is <strong>O(n\u00b2)<\/strong>, which occurs when the pivot chosen is the smallest or largest element repeatedly, resulting in highly unbalanced partitions.<\/li><\/ul><p><strong>Space Complexity<\/strong>:<\/p><ul><li>The space complexity of Quick Sort is <strong>O(log n)<\/strong> due to the space required for the recursive stack. Unlike other algorithms like Merge Sort, Quick Sort is <strong>in-place<\/strong>, meaning it doesn\u2019t need extra memory for a separate array.<\/li><\/ul><h3>Optimizations for Quick Sort<\/h3><p><strong>Choosing a Good Pivot<\/strong>:<\/p><ul><li>The efficiency of Quick Sort depends heavily on the choice of the pivot. Randomized Quick Sort, where the pivot is chosen randomly, reduces the chances of worst-case performance.<\/li><\/ul><p><strong>Three-way Partitioning<\/strong>:<\/p><ul><li>In cases where the array contains many repeated elements, three-way partitioning can improve performance. This version of Quick Sort divides the array into three sections: elements less than the pivot, equal to the pivot, and greater than the pivot.<\/li><\/ul><p><strong>Hybrid Approaches<\/strong>:<\/p><ul><li>In practice, Quick Sort is often combined with other sorting algorithms like Insertion Sort for smaller sub-arrays. When the sub-arrays become small enough (e.g., 10 elements or fewer), Insertion Sort can be more efficient.<\/li><\/ul><h3>Applications of Quick Sort<\/h3><p><strong>General Sorting<\/strong>:<\/p><ul><li>Quick Sort is widely used in sorting data because of its efficiency in the average case. It is the go-to algorithm in many libraries and frameworks for general-purpose sorting.<\/li><\/ul><p><strong>Search Algorithms<\/strong>:<\/p><ul><li>Quick Sort is often used as a preprocessing step for algorithms that require sorted data, such as binary search.<\/li><\/ul><p><strong>Distributed Systems<\/strong>:<\/p><ul><li>In distributed systems, Quick Sort can be adapted for parallel sorting, taking advantage of multiple processors.<\/li><\/ul><p><strong>External Sorting<\/strong>:<\/p><ul><li>Quick Sort can be used for external sorting algorithms where the data is too large to fit into memory, though other algorithms like Merge Sort may be more suitable in some cases.<\/li><\/ul><h3>Why Learn Quick Sort?<\/h3><p><strong>Quick Sort<\/strong> is one of the most efficient and versatile sorting algorithms, combining both simplicity and power. It introduces key concepts like recursion, divide-and-conquer, and partitioning, which are fundamental to algorithm design. Learning Quick Sort equips you with the tools to solve a wide range of sorting and optimization problems.<\/p><p><strong>Topics Covered<\/strong>:<\/p><ul><li><strong>Definition of Quick Sort<\/strong>: Understanding the algorithm\u2019s structure and how it works.<\/li><li><strong>Time Complexity<\/strong>: Best, worst, and average cases, along with space complexity.<\/li><li><strong>Optimizations<\/strong>: Techniques to improve the efficiency of Quick Sort.<\/li><li><strong>Applications<\/strong>: Where and how Quick Sort is used in real-world scenarios.<\/li><\/ul><p>For more details and further examples, check out the full article on GeeksforGeeks: <a href=\"https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/\">https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/<\/a>.<\/p>","source":"https:\/\/videos.geeksforgeeks.org\/5c668a30a0c3e8e888afbd3a6ee60cacgfg-QuickSortIntroduction20241008115157\/video.m3u8","category":[{"term_id__id":36,"term_id__term_name":"DSA","term_id__term_type":2,"term_id__slug":"dsa"},{"term_id__id":110,"term_id__term_name":"Sorting","term_id__term_type":2,"term_id__slug":"sorting-8frfkn"},{"term_id__id":7,"term_id__term_name":"Data Structures","term_id__term_type":1,"term_id__slug":"data-structures"},{"term_id__id":562,"term_id__term_name":"DSA","term_id__term_type":1,"term_id__slug":"dsa-lpubwc"}],"meta":{"thumbnail":"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-small.png","largeThumbnail":"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150.png","likes":2,"views":216560,"isFeatured":0,"isPremium":0,"isPublic":0,"format":"video\/mp4","revision":[]},"time":"08\/10\/2024","subtitle":"https:\/\/videos.geeksforgeeks.org\/5c668a30a0c3e8e888afbd3a6ee60cacgfg-QuickSortIntroduction20241008115157\/subtitle.vtt","duration":372,"course_link":null,"video_schema":{"@context":"https:\/\/schema.org","@type":"VideoObject","name":"QuickSort Introduction","description":"Quick Sort Algorithm  Comprehensive GuideQuick Sort is one of the most efficient and widely-used sorting algorithms based on the divide-and-conquer strategy. It works by selecting a pivot element and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.What is Quick Sort?Quick Sort is a comparison-based sorting algorithm that efficiently sorts elements by partitioning the array into smaller sub-arrays. The core idea is to pick a pivot element, partition the array around the pivot, and recursively sort the sub-arrays. This results in a time complexity of O(n log n) on average, making it one of the fastest sorting algorithms.How Quick Sort WorksChoose a PivotSelect a pivot element from the array. The pivot can be any element, but common choices include the first element, the last element, or a randomly selected one.PartitioningReorder the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it. The pivot is now in its correct position in the sorted array.Recursively Sort the Sub-arraysApply the same process recursively to the sub-arrays (the elements less than and greater than the pivot). Continue dividing and sorting until the sub-arrays have only one element or are empty.Example of Quick SortConsider sorting the array 10, 80, 30, 90, 40, 50, 70 using Quick Sort.Initial Array10, 80, 30, 90, 40, 50, 70Choose PivotSelect 70 as the pivot.PartitioningReorder the array so elements less than 70 are on the left and those greater are on the right. After partitioning, the array looks like10, 30, 40, 50, 70, 90, 80Recursive StepsSort the left sub-array 10, 30, 40, 50 and the right sub-array 90, 80 recursively.Final Sorted ArrayAfter recursively sorting the sub-arrays, the final sorted array will be10, 30, 40, 50, 70, 80, 90Time Complexity of Quick SortBest and Average CaseThe time complexity of Quick Sort is O(n log n) when the pivot splits the array into relatively equal-sized sub-arrays. This is the average-case performance of Quick Sort.Worst CaseThe worst-case time complexity is O(n), which occurs when the pivot chosen is the smallest or largest element repeatedly, resulting in highly unbalanced partitions.Space ComplexityThe space complexity of Quick Sort is O(log n) due to the space required for the recursive stack. Unlike other algorithms like Merge Sort, Quick Sort is in-place, meaning it doesnt need extra memory for a separate array.Optimizations for Quick SortChoosing a Good PivotThe efficiency of Quick Sort depends heavily on the choice of the pivot. Randomized Quick Sort, where the pivot is chosen randomly, reduces the chances of worst-case performance.Three-way PartitioningIn cases where the array contains many repeated elements, three-way partitioning can improve performance. This version of Quick Sort divides the array into three sections elements less than the pivot, equal to the pivot, and greater than the pivot.Hybrid ApproachesIn practice, Quick Sort is often combined with other sorting algorithms like Insertion Sort for smaller sub-arrays. When the sub-arrays become small enough (e.g., 10 elements or fewer), Insertion Sort can be more efficient.Applications of Quick SortGeneral SortingQuick Sort is widely used in sorting data because of its efficiency in the average case. It is the go-to algorithm in many libraries and frameworks for general-purpose sorting.Search AlgorithmsQuick Sort is often used as a preprocessing step for algorithms that require sorted data, such as binary search.Distributed SystemsIn distributed systems, Quick Sort can be adapted for parallel sorting, taking advantage of multiple processors.External SortingQuick Sort can be used for external sorting algorithms where the data is too large to fit into memory, though other algorithms like Merge Sort may be more suitable in some cases.Why Learn Quick Sort?Quick Sort is one of the most efficient and versatile sorting algorithms, combining both simplicity and power. It introduces key concepts like recursion, divide-and-conquer, and partitioning, which are fundamental to algorithm design. Learning Quick Sort equips you with the tools to solve a wide range of sorting and optimization problems.Topics CoveredDefinition of Quick Sort Understanding the algorithms structure and how it works.Time Complexity Best, worst, and average cases, along with space complexity.Optimizations Techniques to improve the efficiency of Quick Sort.Applications Where and how Quick Sort is used in real-world scenarios.For more details and further examples, check out the full article on GeeksforGeeks httpswww.geeksforgeeks.orgquick-sort-algorithm.","thumbnailUrl":["https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150.png","https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-seo.png","https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-small.png"],"uploadDate":"2024-10-08T11:57:19Z","duration":"PT0H6M12S","contentUrl":"https:\/\/www.geeksforgeeks.org\/videos\/quicksort-introduction\/"}},"10658":{"id":10658,"title":"QuickSort using Lomuto Partition","slug":"quicksort-using-lomuto-partition-1","description":"<h2>QuickSort Algorithm Using Lomuto Partition | Comprehensive Guide<\/h2><p><strong>QuickSort<\/strong> is a highly efficient sorting algorithm that uses the <strong>divide and conquer<\/strong> approach to sort elements. One of the key components of the QuickSort algorithm is the <strong>partitioning<\/strong> method, which determines how the array is divided. The <strong>Lomuto partition<\/strong> scheme is a simple and commonly used partitioning technique in QuickSort, making it easier to implement and understand.<\/p><h3>What is QuickSort?<\/h3><p><strong>QuickSort<\/strong> is a sorting algorithm that works by selecting a \"pivot\" element from the array and partitioning the other elements into two groups:<\/p><ul><li>Elements smaller than the pivot.<\/li><li>Elements larger than the pivot.<\/li><\/ul><p>The process is then recursively applied to the subarrays formed by partitioning. QuickSort has an average time complexity of <strong>O(n log n)<\/strong>, making it one of the most efficient algorithms for large datasets.<\/p><h3>Key Steps in QuickSort Using Lomuto Partition<\/h3><p><strong>Choose a Pivot<\/strong>:<\/p><ul><li>The last element of the array is often chosen as the pivot in Lomuto partitioning.<\/li><\/ul><p><strong>Partition the Array<\/strong>:<\/p><ul><li>The array is rearranged such that all elements smaller than the pivot are on its left, and all elements larger than the pivot are on its right. The pivot is placed in its correct sorted position.<\/li><\/ul><p><strong>Recursively Sort Subarrays<\/strong>:<\/p><ul><li>After partitioning, the left and right subarrays (excluding the pivot) are sorted recursively using the same QuickSort process.<\/li><\/ul><h3>Lomuto Partition Scheme<\/h3><p>The <strong>Lomuto partition<\/strong> scheme is a simple method to partition the array. Here's how it works:<\/p><ol><li>The pivot is chosen as the last element of the array.<\/li><li>A pointer i is initialized to keep track of the smaller elements' position.<\/li><li>The array is scanned, and whenever an element smaller than the pivot is found, it is swapped with the element at position i. The pointer i is then incremented.<\/li><li>At the end of the scan, the pivot is swapped with the element at position i, placing it in its correct sorted position.<\/li><\/ol><h3>Example of Lomuto Partitioning<\/h3><p>Consider the array: <strong>[10, 80, 30, 90, 40, 50, 70]<\/strong><\/p><ul><li>Choose the last element, <strong>70<\/strong>, as the pivot.<\/li><li>During the partitioning process:<ul><li><strong>10<\/strong> is smaller than 70, so no change is made.<\/li><li><strong>80<\/strong> is greater than 70, so nothing is done.<\/li><li><strong>30<\/strong> is smaller than 70, so it's swapped with <strong>80<\/strong>.<\/li><li><strong>90<\/strong> is greater than 70, so nothing is done.<\/li><li><strong>40<\/strong> is smaller than 70, so it's swapped with <strong>80<\/strong>.<\/li><li><strong>50<\/strong> is smaller than 70, so it's swapped with <strong>90<\/strong>.<\/li><\/ul><\/li><\/ul><p>After partitioning, <strong>70<\/strong> is swapped with the element at position i, and the array becomes: <strong>[10, 30, 40, 50, 70, 90, 80]<\/strong><\/p><p>Now, <strong>70<\/strong> is in its correct sorted position, and QuickSort is applied recursively to the subarrays.<\/p><h3>Pseudocode for QuickSort Using Lomuto Partition<\/h3><p>python<\/p><p>Copy code<\/p><p>def quicksort(arr, low, high):\n &nbsp; &nbsp;if low &lt; high:\n &nbsp; &nbsp; &nbsp; &nbsp;# pi is partitioning index, arr[pi] is now at right place\n &nbsp; &nbsp; &nbsp; &nbsp;pi = partition(arr, low, high)\n\n &nbsp; &nbsp; &nbsp; &nbsp;# Recursively sort elements before partition and after partition\n &nbsp; &nbsp; &nbsp; &nbsp;quicksort(arr, low, pi - 1)\n &nbsp; &nbsp; &nbsp; &nbsp;quicksort(arr, pi + 1, high)\n\ndef partition(arr, low, high):\n &nbsp; &nbsp;pivot = arr[high] &nbsp;# pivot is the last element\n &nbsp; &nbsp;i = low - 1 &nbsp;# index of smaller element\n\n &nbsp; &nbsp;for j in range(low, high):\n &nbsp; &nbsp; &nbsp; &nbsp;if arr[j] &lt;= pivot:\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i = i + 1\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;arr[i], arr[j] = arr[j], arr[i] &nbsp;# swap\n\n &nbsp; &nbsp;arr[i + 1], arr[high] = arr[high], arr[i + 1] &nbsp;# move pivot to correct position\n &nbsp; &nbsp;return i + 1\n<\/p><h3>Key Points:<\/h3><ul><li>The pivot is chosen as the last element.<\/li><li>The function partition rearranges the array and returns the pivot's position.<\/li><li>The quicksort function recursively applies the QuickSort to the left and right subarrays.<\/li><\/ul><h3>Time Complexity of QuickSort Using Lomuto Partition<\/h3><ul><li><strong>Best Case<\/strong>: <strong>O(n log n)<\/strong>, which occurs when the pivot consistently divides the array into two nearly equal parts.<\/li><li><strong>Worst Case<\/strong>: <strong>O(n\u00b2)<\/strong>, which happens when the pivot is the smallest or largest element, leading to highly unbalanced partitions.<\/li><li><strong>Average Case<\/strong>: <strong>O(n log n)<\/strong>, making QuickSort efficient for large datasets in most practical scenarios.<\/li><\/ul><h3>Space Complexity<\/h3><ul><li>The space complexity is <strong>O(log n)<\/strong> due to the recursive nature of QuickSort.<\/li><\/ul><h3>Advantages of Using QuickSort with Lomuto Partition<\/h3><ol><li><strong>Efficient<\/strong>: QuickSort has an average time complexity of <strong>O(n log n)<\/strong>, making it one of the most efficient sorting algorithms.<\/li><li><strong>In-Place Sorting<\/strong>: QuickSort does not require additional memory for a new array, as the sorting is done in-place.<\/li><li><strong>Simple Implementation<\/strong>: The Lomuto partition scheme is easy to implement and understand, making it a good choice for learning QuickSort.<\/li><\/ol><h3>Disadvantages of Lomuto Partition<\/h3><ol><li><strong>Not Ideal for Large Duplicate Elements<\/strong>: Lomuto partition performs poorly if the array contains many duplicate elements, as it can lead to unbalanced partitions.<\/li><li><strong>Worst-Case Scenario<\/strong>: The worst-case time complexity of <strong>O(n\u00b2)<\/strong> occurs when the pivot consistently picks the largest or smallest element in the array.<\/li><\/ol><h3>Applications of QuickSort<\/h3><ol><li><strong>Large Datasets<\/strong>: QuickSort is widely used for sorting large datasets efficiently due to its average <strong>O(n log n)<\/strong> time complexity.<\/li><li><strong>Memory-Constrained Environments<\/strong>: Since QuickSort is an in-place sorting algorithm, it is well-suited for environments with limited memory.<\/li><li><strong>Data Processing<\/strong>: QuickSort is used in many data processing algorithms where fast sorting of data is required.<\/li><\/ol><h3>Why Learn QuickSort Using Lomuto Partition?<\/h3><p>Learning QuickSort using the <strong>Lomuto partition<\/strong> scheme introduces you to a highly efficient sorting algorithm that is easy to implement and understand. It helps build a foundation in recursive algorithms, divide-and-conquer strategies, and algorithmic optimizations. QuickSort is widely used in competitive programming, software development, and data processing, making it a must-know algorithm for programmers and developers.<\/p><p><strong>Topics Covered<\/strong>:<\/p><ol><li><strong>QuickSort Overview<\/strong>: Understanding the QuickSort algorithm and how it works.<\/li><li><strong>Lomuto Partition Scheme<\/strong>: How the Lomuto partition works and its implementation in QuickSort.<\/li><li><strong>Time Complexity<\/strong>: Analysis of best, worst, and average-case scenarios for QuickSort.<\/li><li><strong>Applications<\/strong>: Practical uses of QuickSort in large datasets, memory-constrained environments, and data processing.<\/li><\/ol><p>For more details and further examples, check out the full article on GeeksforGeeks: <a href=\"https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/\">https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/<\/a>.<\/p>","source":"https:\/\/videos.geeksforgeeks.org\/e3434a976140115c858c39a24be50b0agfg-QuickSortUsingLomuto20241008115304\/video.m3u8","category":[{"term_id__id":36,"term_id__term_name":"DSA","term_id__term_type":2,"term_id__slug":"dsa"},{"term_id__id":110,"term_id__term_name":"Sorting","term_id__term_type":2,"term_id__slug":"sorting-8frfkn"},{"term_id__id":7,"term_id__term_name":"Data Structures","term_id__term_type":1,"term_id__slug":"data-structures"},{"term_id__id":562,"term_id__term_name":"DSA","term_id__term_type":1,"term_id__slug":"dsa-lpubwc"}],"meta":{"thumbnail":"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortusingLomutoPartition\/QuickSortusingLomutoPartition20241008115629-small.png","largeThumbnail":"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortusingLomutoPartition\/QuickSortusingLomutoPartition20241008115629.png","likes":1,"views":37940,"isFeatured":0,"isPremium":0,"isPublic":0,"format":"video\/mp4","revision":[]},"time":"08\/10\/2024","subtitle":"https:\/\/videos.geeksforgeeks.org\/e3434a976140115c858c39a24be50b0agfg-QuickSortUsingLomuto20241008115304\/subtitle.vtt","duration":506,"course_link":null}};

                                    // Convert it into a JS Map
                                    const videoDataMap = new Map(Object.entries(rawVideoDataMap));

                                    document.addEventListener('DOMContentLoaded', function () {
                                        let currentlySelectedTile = document.getElementById("video-info-container-title");
                                        let firstVideoH2;
                                        let firstSelectedVideo
                                        var videoPlayer = document.getElementById('video-iframe-container');
                                        if (!videoPlayer) return;

                                        var videoIframe = videoPlayer.querySelector('iframe');
                                        if (!videoIframe) return;

                                        // Safely inject PHP data as JSON into JavaScript
                                        var resp = [{"id":10657,"title":"QuickSort Introduction","slug":"quicksort-introduction","description":"<h2>Quick Sort Algorithm | Comprehensive Guide<\/h2><p><strong>Quick Sort<\/strong> is one of the most efficient and widely-used sorting algorithms based on the <strong>divide-and-conquer<\/strong> strategy. It works by selecting a \"pivot\" element and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.<\/p><h3>What is Quick Sort?<\/h3><p><strong>Quick Sort<\/strong> is a comparison-based sorting algorithm that efficiently sorts elements by partitioning the array into smaller sub-arrays. The core idea is to pick a pivot element, partition the array around the pivot, and recursively sort the sub-arrays. This results in a time complexity of <strong>O(n log n)<\/strong> on average, making it one of the fastest sorting algorithms.<\/p><h3>How Quick Sort Works<\/h3><p><strong>Choose a Pivot<\/strong>:<\/p><ul><li>Select a pivot element from the array. The pivot can be any element, but common choices include the first element, the last element, or a randomly selected one.<\/li><\/ul><p><strong>Partitioning<\/strong>:<\/p><ul><li>Reorder the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it. The pivot is now in its correct position in the sorted array.<\/li><\/ul><p><strong>Recursively Sort the Sub-arrays<\/strong>:<\/p><ul><li>Apply the same process recursively to the sub-arrays (the elements less than and greater than the pivot). Continue dividing and sorting until the sub-arrays have only one element or are empty.<\/li><\/ul><h3>Example of Quick Sort<\/h3><p>Consider sorting the array [10, 80, 30, 90, 40, 50, 70] using Quick Sort.<\/p><p><strong>Initial Array<\/strong>:<br>[10, 80, 30, 90, 40, 50, 70]<\/p><p><strong>Choose Pivot<\/strong>:<br>Select 70 as the pivot.<\/p><p><strong>Partitioning<\/strong>:<br>Reorder the array so elements less than 70 are on the left and those greater are on the right. After partitioning, the array looks like:<br>[10, 30, 40, 50, 70, 90, 80]<\/p><p><strong>Recursive Steps<\/strong>:<\/p><ul><li>Sort the left sub-array [10, 30, 40, 50] and the right sub-array [90, 80] recursively.<\/li><\/ul><p><strong>Final Sorted Array<\/strong>:<br>After recursively sorting the sub-arrays, the final sorted array will be:<br>[10, 30, 40, 50, 70, 80, 90]<\/p><h3>Time Complexity of Quick Sort<\/h3><p><strong>Best and Average Case<\/strong>:<\/p><ul><li>The time complexity of Quick Sort is <strong>O(n log n)<\/strong> when the pivot splits the array into relatively equal-sized sub-arrays. This is the average-case performance of Quick Sort.<\/li><\/ul><p><strong>Worst Case<\/strong>:<\/p><ul><li>The worst-case time complexity is <strong>O(n\u00b2)<\/strong>, which occurs when the pivot chosen is the smallest or largest element repeatedly, resulting in highly unbalanced partitions.<\/li><\/ul><p><strong>Space Complexity<\/strong>:<\/p><ul><li>The space complexity of Quick Sort is <strong>O(log n)<\/strong> due to the space required for the recursive stack. Unlike other algorithms like Merge Sort, Quick Sort is <strong>in-place<\/strong>, meaning it doesn\u2019t need extra memory for a separate array.<\/li><\/ul><h3>Optimizations for Quick Sort<\/h3><p><strong>Choosing a Good Pivot<\/strong>:<\/p><ul><li>The efficiency of Quick Sort depends heavily on the choice of the pivot. Randomized Quick Sort, where the pivot is chosen randomly, reduces the chances of worst-case performance.<\/li><\/ul><p><strong>Three-way Partitioning<\/strong>:<\/p><ul><li>In cases where the array contains many repeated elements, three-way partitioning can improve performance. This version of Quick Sort divides the array into three sections: elements less than the pivot, equal to the pivot, and greater than the pivot.<\/li><\/ul><p><strong>Hybrid Approaches<\/strong>:<\/p><ul><li>In practice, Quick Sort is often combined with other sorting algorithms like Insertion Sort for smaller sub-arrays. When the sub-arrays become small enough (e.g., 10 elements or fewer), Insertion Sort can be more efficient.<\/li><\/ul><h3>Applications of Quick Sort<\/h3><p><strong>General Sorting<\/strong>:<\/p><ul><li>Quick Sort is widely used in sorting data because of its efficiency in the average case. It is the go-to algorithm in many libraries and frameworks for general-purpose sorting.<\/li><\/ul><p><strong>Search Algorithms<\/strong>:<\/p><ul><li>Quick Sort is often used as a preprocessing step for algorithms that require sorted data, such as binary search.<\/li><\/ul><p><strong>Distributed Systems<\/strong>:<\/p><ul><li>In distributed systems, Quick Sort can be adapted for parallel sorting, taking advantage of multiple processors.<\/li><\/ul><p><strong>External Sorting<\/strong>:<\/p><ul><li>Quick Sort can be used for external sorting algorithms where the data is too large to fit into memory, though other algorithms like Merge Sort may be more suitable in some cases.<\/li><\/ul><h3>Why Learn Quick Sort?<\/h3><p><strong>Quick Sort<\/strong> is one of the most efficient and versatile sorting algorithms, combining both simplicity and power. It introduces key concepts like recursion, divide-and-conquer, and partitioning, which are fundamental to algorithm design. Learning Quick Sort equips you with the tools to solve a wide range of sorting and optimization problems.<\/p><p><strong>Topics Covered<\/strong>:<\/p><ul><li><strong>Definition of Quick Sort<\/strong>: Understanding the algorithm\u2019s structure and how it works.<\/li><li><strong>Time Complexity<\/strong>: Best, worst, and average cases, along with space complexity.<\/li><li><strong>Optimizations<\/strong>: Techniques to improve the efficiency of Quick Sort.<\/li><li><strong>Applications<\/strong>: Where and how Quick Sort is used in real-world scenarios.<\/li><\/ul><p>For more details and further examples, check out the full article on GeeksforGeeks: <a href=\"https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/\">https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/<\/a>.<\/p>","source":"https:\/\/videos.geeksforgeeks.org\/5c668a30a0c3e8e888afbd3a6ee60cacgfg-QuickSortIntroduction20241008115157\/video.m3u8","category":[{"term_id__id":36,"term_id__term_name":"DSA","term_id__term_type":2,"term_id__slug":"dsa"},{"term_id__id":110,"term_id__term_name":"Sorting","term_id__term_type":2,"term_id__slug":"sorting-8frfkn"},{"term_id__id":7,"term_id__term_name":"Data Structures","term_id__term_type":1,"term_id__slug":"data-structures"},{"term_id__id":562,"term_id__term_name":"DSA","term_id__term_type":1,"term_id__slug":"dsa-lpubwc"}],"meta":{"thumbnail":"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-small.png","largeThumbnail":"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150.png","likes":2,"views":216560,"isFeatured":0,"isPremium":0,"isPublic":0,"format":"video\/mp4","revision":[]},"time":"08\/10\/2024","subtitle":"https:\/\/videos.geeksforgeeks.org\/5c668a30a0c3e8e888afbd3a6ee60cacgfg-QuickSortIntroduction20241008115157\/subtitle.vtt","duration":372,"course_link":null,"video_schema":{"@context":"https:\/\/schema.org","@type":"VideoObject","name":"QuickSort Introduction","description":"Quick Sort Algorithm  Comprehensive GuideQuick Sort is one of the most efficient and widely-used sorting algorithms based on the divide-and-conquer strategy. It works by selecting a pivot element and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.What is Quick Sort?Quick Sort is a comparison-based sorting algorithm that efficiently sorts elements by partitioning the array into smaller sub-arrays. The core idea is to pick a pivot element, partition the array around the pivot, and recursively sort the sub-arrays. This results in a time complexity of O(n log n) on average, making it one of the fastest sorting algorithms.How Quick Sort WorksChoose a PivotSelect a pivot element from the array. The pivot can be any element, but common choices include the first element, the last element, or a randomly selected one.PartitioningReorder the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it. The pivot is now in its correct position in the sorted array.Recursively Sort the Sub-arraysApply the same process recursively to the sub-arrays (the elements less than and greater than the pivot). Continue dividing and sorting until the sub-arrays have only one element or are empty.Example of Quick SortConsider sorting the array 10, 80, 30, 90, 40, 50, 70 using Quick Sort.Initial Array10, 80, 30, 90, 40, 50, 70Choose PivotSelect 70 as the pivot.PartitioningReorder the array so elements less than 70 are on the left and those greater are on the right. After partitioning, the array looks like10, 30, 40, 50, 70, 90, 80Recursive StepsSort the left sub-array 10, 30, 40, 50 and the right sub-array 90, 80 recursively.Final Sorted ArrayAfter recursively sorting the sub-arrays, the final sorted array will be10, 30, 40, 50, 70, 80, 90Time Complexity of Quick SortBest and Average CaseThe time complexity of Quick Sort is O(n log n) when the pivot splits the array into relatively equal-sized sub-arrays. This is the average-case performance of Quick Sort.Worst CaseThe worst-case time complexity is O(n), which occurs when the pivot chosen is the smallest or largest element repeatedly, resulting in highly unbalanced partitions.Space ComplexityThe space complexity of Quick Sort is O(log n) due to the space required for the recursive stack. Unlike other algorithms like Merge Sort, Quick Sort is in-place, meaning it doesnt need extra memory for a separate array.Optimizations for Quick SortChoosing a Good PivotThe efficiency of Quick Sort depends heavily on the choice of the pivot. Randomized Quick Sort, where the pivot is chosen randomly, reduces the chances of worst-case performance.Three-way PartitioningIn cases where the array contains many repeated elements, three-way partitioning can improve performance. This version of Quick Sort divides the array into three sections elements less than the pivot, equal to the pivot, and greater than the pivot.Hybrid ApproachesIn practice, Quick Sort is often combined with other sorting algorithms like Insertion Sort for smaller sub-arrays. When the sub-arrays become small enough (e.g., 10 elements or fewer), Insertion Sort can be more efficient.Applications of Quick SortGeneral SortingQuick Sort is widely used in sorting data because of its efficiency in the average case. It is the go-to algorithm in many libraries and frameworks for general-purpose sorting.Search AlgorithmsQuick Sort is often used as a preprocessing step for algorithms that require sorted data, such as binary search.Distributed SystemsIn distributed systems, Quick Sort can be adapted for parallel sorting, taking advantage of multiple processors.External SortingQuick Sort can be used for external sorting algorithms where the data is too large to fit into memory, though other algorithms like Merge Sort may be more suitable in some cases.Why Learn Quick Sort?Quick Sort is one of the most efficient and versatile sorting algorithms, combining both simplicity and power. It introduces key concepts like recursion, divide-and-conquer, and partitioning, which are fundamental to algorithm design. Learning Quick Sort equips you with the tools to solve a wide range of sorting and optimization problems.Topics CoveredDefinition of Quick Sort Understanding the algorithms structure and how it works.Time Complexity Best, worst, and average cases, along with space complexity.Optimizations Techniques to improve the efficiency of Quick Sort.Applications Where and how Quick Sort is used in real-world scenarios.For more details and further examples, check out the full article on GeeksforGeeks httpswww.geeksforgeeks.orgquick-sort-algorithm.","thumbnailUrl":["https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150.png","https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-seo.png","https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-small.png"],"uploadDate":"2024-10-08T11:57:19Z","duration":"PT0H6M12S","contentUrl":"https:\/\/www.geeksforgeeks.org\/videos\/quicksort-introduction\/"}},{"id":10658,"title":"QuickSort using Lomuto Partition","slug":"quicksort-using-lomuto-partition-1","description":"<h2>QuickSort Algorithm Using Lomuto Partition | Comprehensive Guide<\/h2><p><strong>QuickSort<\/strong> is a highly efficient sorting algorithm that uses the <strong>divide and conquer<\/strong> approach to sort elements. One of the key components of the QuickSort algorithm is the <strong>partitioning<\/strong> method, which determines how the array is divided. The <strong>Lomuto partition<\/strong> scheme is a simple and commonly used partitioning technique in QuickSort, making it easier to implement and understand.<\/p><h3>What is QuickSort?<\/h3><p><strong>QuickSort<\/strong> is a sorting algorithm that works by selecting a \"pivot\" element from the array and partitioning the other elements into two groups:<\/p><ul><li>Elements smaller than the pivot.<\/li><li>Elements larger than the pivot.<\/li><\/ul><p>The process is then recursively applied to the subarrays formed by partitioning. QuickSort has an average time complexity of <strong>O(n log n)<\/strong>, making it one of the most efficient algorithms for large datasets.<\/p><h3>Key Steps in QuickSort Using Lomuto Partition<\/h3><p><strong>Choose a Pivot<\/strong>:<\/p><ul><li>The last element of the array is often chosen as the pivot in Lomuto partitioning.<\/li><\/ul><p><strong>Partition the Array<\/strong>:<\/p><ul><li>The array is rearranged such that all elements smaller than the pivot are on its left, and all elements larger than the pivot are on its right. The pivot is placed in its correct sorted position.<\/li><\/ul><p><strong>Recursively Sort Subarrays<\/strong>:<\/p><ul><li>After partitioning, the left and right subarrays (excluding the pivot) are sorted recursively using the same QuickSort process.<\/li><\/ul><h3>Lomuto Partition Scheme<\/h3><p>The <strong>Lomuto partition<\/strong> scheme is a simple method to partition the array. Here's how it works:<\/p><ol><li>The pivot is chosen as the last element of the array.<\/li><li>A pointer i is initialized to keep track of the smaller elements' position.<\/li><li>The array is scanned, and whenever an element smaller than the pivot is found, it is swapped with the element at position i. The pointer i is then incremented.<\/li><li>At the end of the scan, the pivot is swapped with the element at position i, placing it in its correct sorted position.<\/li><\/ol><h3>Example of Lomuto Partitioning<\/h3><p>Consider the array: <strong>[10, 80, 30, 90, 40, 50, 70]<\/strong><\/p><ul><li>Choose the last element, <strong>70<\/strong>, as the pivot.<\/li><li>During the partitioning process:<ul><li><strong>10<\/strong> is smaller than 70, so no change is made.<\/li><li><strong>80<\/strong> is greater than 70, so nothing is done.<\/li><li><strong>30<\/strong> is smaller than 70, so it's swapped with <strong>80<\/strong>.<\/li><li><strong>90<\/strong> is greater than 70, so nothing is done.<\/li><li><strong>40<\/strong> is smaller than 70, so it's swapped with <strong>80<\/strong>.<\/li><li><strong>50<\/strong> is smaller than 70, so it's swapped with <strong>90<\/strong>.<\/li><\/ul><\/li><\/ul><p>After partitioning, <strong>70<\/strong> is swapped with the element at position i, and the array becomes: <strong>[10, 30, 40, 50, 70, 90, 80]<\/strong><\/p><p>Now, <strong>70<\/strong> is in its correct sorted position, and QuickSort is applied recursively to the subarrays.<\/p><h3>Pseudocode for QuickSort Using Lomuto Partition<\/h3><p>python<\/p><p>Copy code<\/p><p>def quicksort(arr, low, high):\n &nbsp; &nbsp;if low &lt; high:\n &nbsp; &nbsp; &nbsp; &nbsp;# pi is partitioning index, arr[pi] is now at right place\n &nbsp; &nbsp; &nbsp; &nbsp;pi = partition(arr, low, high)\n\n &nbsp; &nbsp; &nbsp; &nbsp;# Recursively sort elements before partition and after partition\n &nbsp; &nbsp; &nbsp; &nbsp;quicksort(arr, low, pi - 1)\n &nbsp; &nbsp; &nbsp; &nbsp;quicksort(arr, pi + 1, high)\n\ndef partition(arr, low, high):\n &nbsp; &nbsp;pivot = arr[high] &nbsp;# pivot is the last element\n &nbsp; &nbsp;i = low - 1 &nbsp;# index of smaller element\n\n &nbsp; &nbsp;for j in range(low, high):\n &nbsp; &nbsp; &nbsp; &nbsp;if arr[j] &lt;= pivot:\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i = i + 1\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;arr[i], arr[j] = arr[j], arr[i] &nbsp;# swap\n\n &nbsp; &nbsp;arr[i + 1], arr[high] = arr[high], arr[i + 1] &nbsp;# move pivot to correct position\n &nbsp; &nbsp;return i + 1\n<\/p><h3>Key Points:<\/h3><ul><li>The pivot is chosen as the last element.<\/li><li>The function partition rearranges the array and returns the pivot's position.<\/li><li>The quicksort function recursively applies the QuickSort to the left and right subarrays.<\/li><\/ul><h3>Time Complexity of QuickSort Using Lomuto Partition<\/h3><ul><li><strong>Best Case<\/strong>: <strong>O(n log n)<\/strong>, which occurs when the pivot consistently divides the array into two nearly equal parts.<\/li><li><strong>Worst Case<\/strong>: <strong>O(n\u00b2)<\/strong>, which happens when the pivot is the smallest or largest element, leading to highly unbalanced partitions.<\/li><li><strong>Average Case<\/strong>: <strong>O(n log n)<\/strong>, making QuickSort efficient for large datasets in most practical scenarios.<\/li><\/ul><h3>Space Complexity<\/h3><ul><li>The space complexity is <strong>O(log n)<\/strong> due to the recursive nature of QuickSort.<\/li><\/ul><h3>Advantages of Using QuickSort with Lomuto Partition<\/h3><ol><li><strong>Efficient<\/strong>: QuickSort has an average time complexity of <strong>O(n log n)<\/strong>, making it one of the most efficient sorting algorithms.<\/li><li><strong>In-Place Sorting<\/strong>: QuickSort does not require additional memory for a new array, as the sorting is done in-place.<\/li><li><strong>Simple Implementation<\/strong>: The Lomuto partition scheme is easy to implement and understand, making it a good choice for learning QuickSort.<\/li><\/ol><h3>Disadvantages of Lomuto Partition<\/h3><ol><li><strong>Not Ideal for Large Duplicate Elements<\/strong>: Lomuto partition performs poorly if the array contains many duplicate elements, as it can lead to unbalanced partitions.<\/li><li><strong>Worst-Case Scenario<\/strong>: The worst-case time complexity of <strong>O(n\u00b2)<\/strong> occurs when the pivot consistently picks the largest or smallest element in the array.<\/li><\/ol><h3>Applications of QuickSort<\/h3><ol><li><strong>Large Datasets<\/strong>: QuickSort is widely used for sorting large datasets efficiently due to its average <strong>O(n log n)<\/strong> time complexity.<\/li><li><strong>Memory-Constrained Environments<\/strong>: Since QuickSort is an in-place sorting algorithm, it is well-suited for environments with limited memory.<\/li><li><strong>Data Processing<\/strong>: QuickSort is used in many data processing algorithms where fast sorting of data is required.<\/li><\/ol><h3>Why Learn QuickSort Using Lomuto Partition?<\/h3><p>Learning QuickSort using the <strong>Lomuto partition<\/strong> scheme introduces you to a highly efficient sorting algorithm that is easy to implement and understand. It helps build a foundation in recursive algorithms, divide-and-conquer strategies, and algorithmic optimizations. QuickSort is widely used in competitive programming, software development, and data processing, making it a must-know algorithm for programmers and developers.<\/p><p><strong>Topics Covered<\/strong>:<\/p><ol><li><strong>QuickSort Overview<\/strong>: Understanding the QuickSort algorithm and how it works.<\/li><li><strong>Lomuto Partition Scheme<\/strong>: How the Lomuto partition works and its implementation in QuickSort.<\/li><li><strong>Time Complexity<\/strong>: Analysis of best, worst, and average-case scenarios for QuickSort.<\/li><li><strong>Applications<\/strong>: Practical uses of QuickSort in large datasets, memory-constrained environments, and data processing.<\/li><\/ol><p>For more details and further examples, check out the full article on GeeksforGeeks: <a href=\"https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/\">https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/<\/a>.<\/p>","source":"https:\/\/videos.geeksforgeeks.org\/e3434a976140115c858c39a24be50b0agfg-QuickSortUsingLomuto20241008115304\/video.m3u8","category":[{"term_id__id":36,"term_id__term_name":"DSA","term_id__term_type":2,"term_id__slug":"dsa"},{"term_id__id":110,"term_id__term_name":"Sorting","term_id__term_type":2,"term_id__slug":"sorting-8frfkn"},{"term_id__id":7,"term_id__term_name":"Data Structures","term_id__term_type":1,"term_id__slug":"data-structures"},{"term_id__id":562,"term_id__term_name":"DSA","term_id__term_type":1,"term_id__slug":"dsa-lpubwc"}],"meta":{"thumbnail":"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortusingLomutoPartition\/QuickSortusingLomutoPartition20241008115629-small.png","largeThumbnail":"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortusingLomutoPartition\/QuickSortusingLomutoPartition20241008115629.png","likes":1,"views":37940,"isFeatured":0,"isPremium":0,"isPublic":0,"format":"video\/mp4","revision":[]},"time":"08\/10\/2024","subtitle":"https:\/\/videos.geeksforgeeks.org\/e3434a976140115c858c39a24be50b0agfg-QuickSortUsingLomuto20241008115304\/subtitle.vtt","duration":506,"course_link":null}];

                                        function postToIframeWhenReady(iframe, data, maxAttempts = 20, intervalTime = 100) {
                                            let attempts = 0;
                                            const interval = setInterval(() => {
                                                if (iframe && iframe.contentWindow) {
                                                    try {
                                                        iframe.contentWindow.postMessage(data, '*');
                                                        clearInterval(interval);
                                                    } catch (err) {
                                                        console.warn("❌ Failed to postMessage, retrying...");
                                                    }
                                                }
                                                if (++attempts >= maxAttempts) {
                                                    console.warn("⚠️ postMessage failed: iframe not ready after multiple attempts.");
                                                    clearInterval(interval);
                                                }
                                            }, intervalTime);
                                        }

                                        // Call the function right after iframe is confirmed to exist
                                        videoIframe.onload = function () {
                                            postToIframeWhenReady(videoIframe, { resp: resp, inView: false });
                                        };

                                        const playlistContainer = document.getElementById("video-playlist-container");
                                        if(playlistContainer) {
                                            firstSelectedVideo = playlistContainer.querySelectorAll('.playlist-video-tile')[0];
                                            if(firstSelectedVideo) {
                                                firstVideoH2 = firstSelectedVideo.querySelector('h2');
                                                firstVideoH2.style.setProperty('color', 'var(--discussion-button-color)', 'important');
                                            }
                                        }

                                        function changeCurrentPlayingVideoTitle(tile, autoplayed = true) {
                                            const playlistVideoTileHeading = tile.querySelector('h2');
                                            if (playlistVideoTileHeading) {
                                                if(!autoplayed && firstVideoH2.innerText !== playlistVideoTileHeading.innerText) {
                                                    firstVideoH2.style.setProperty('color', '#EC4E20', 'important');
                                                }
                                                if(autoplayed) {
                                                    let siblingElement = tile.previousElementSibling;
                                                    const siblingElementH2 = siblingElement.querySelector('h2');
                                                    siblingElementH2.style.setProperty('color', '#EC4E20', 'important');
                                                    firstVideoH2 = playlistVideoTileHeading;
                                                }
                                                playlistVideoTileHeading.style.setProperty('color', 'var(--discussion-button-color)', 'important');
                                                if (currentlySelectedTile) {
                                                    currentlySelectedTile.innerText = playlistVideoTileHeading.innerText;
                                                }
                                            }
                                        }
                                        // Inject the video data map as a JS object
                                        window.addEventListener('message', function (event) {
                                            if (event.data.type === 'AUTOPLAYED_NEXT_VIDEO' && event.data.autoplayPlaylistEnabled) {

                                                // Changing the current video index on autoplaying the next video from playlist
                                                const allVideoTiles = Array.from(document.querySelectorAll('.playlist-video-tile'));
                                                changeCurrentPlayingVideoTitle(allVideoTiles[event.data.currentVideoIndex]);
                                            }
                                        });

                                        if(playlistContainer) {
                                            playlistContainer.addEventListener('click', (event) => {
                                                const tile = event.target.closest('.playlist-video-tile');

                                                // Find the index of the clicked tile
                                                const allTiles = Array.from(playlistContainer.querySelectorAll('.playlist-video-tile'));
                                                const currentIndex = allTiles.findIndex((el) => el === tile);

                                                if (tile) {
                                                    const videoId = tile.getAttribute('data-video-id');
                                                    const videoData = videoDataMap.get(videoId);
                                                    videoIframe.contentWindow.postMessage({ playlist: [videoData], inView: true, clickedVideoFromPlaylist: true, currentIndex: currentIndex }, '*');

                                                    // handleVideoTitle([videoData]);
                                                    changeCurrentPlayingVideoTitle(tile, false);
                                                    firstVideoH2 = tile.querySelector('h2');
                                                }
                                            });
                                        }
                                    });
                                </script>
                                

                            <!-- Quiz Carousel -->
                                                                                <div class="article_bottom_text"></div><br>
                                                            <div id="video-tab-content">
                                                    <script> 
                        var video_api_response = JSON.parse("[{\"id\":10657,\"title\":\"QuickSort Introduction\",\"slug\":\"quicksort-introduction\",\"description\":\"<h2>Quick Sort Algorithm | Comprehensive Guide<\/h2><p><strong>Quick Sort<\/strong> is one of the most efficient and widely-used sorting algorithms based on the <strong>divide-and-conquer<\/strong> strategy. It works by selecting a \\\"pivot\\\" element and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.<\/p><h3>What is Quick Sort?<\/h3><p><strong>Quick Sort<\/strong> is a comparison-based sorting algorithm that efficiently sorts elements by partitioning the array into smaller sub-arrays. The core idea is to pick a pivot element, partition the array around the pivot, and recursively sort the sub-arrays. This results in a time complexity of <strong>O(n log n)<\/strong> on average, making it one of the fastest sorting algorithms.<\/p><h3>How Quick Sort Works<\/h3><p><strong>Choose a Pivot<\/strong>:<\/p><ul><li>Select a pivot element from the array. The pivot can be any element, but common choices include the first element, the last element, or a randomly selected one.<\/li><\/ul><p><strong>Partitioning<\/strong>:<\/p><ul><li>Reorder the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it. The pivot is now in its correct position in the sorted array.<\/li><\/ul><p><strong>Recursively Sort the Sub-arrays<\/strong>:<\/p><ul><li>Apply the same process recursively to the sub-arrays (the elements less than and greater than the pivot). Continue dividing and sorting until the sub-arrays have only one element or are empty.<\/li><\/ul><h3>Example of Quick Sort<\/h3><p>Consider sorting the array [10, 80, 30, 90, 40, 50, 70] using Quick Sort.<\/p><p><strong>Initial Array<\/strong>:<br>[10, 80, 30, 90, 40, 50, 70]<\/p><p><strong>Choose Pivot<\/strong>:<br>Select 70 as the pivot.<\/p><p><strong>Partitioning<\/strong>:<br>Reorder the array so elements less than 70 are on the left and those greater are on the right. After partitioning, the array looks like:<br>[10, 30, 40, 50, 70, 90, 80]<\/p><p><strong>Recursive Steps<\/strong>:<\/p><ul><li>Sort the left sub-array [10, 30, 40, 50] and the right sub-array [90, 80] recursively.<\/li><\/ul><p><strong>Final Sorted Array<\/strong>:<br>After recursively sorting the sub-arrays, the final sorted array will be:<br>[10, 30, 40, 50, 70, 80, 90]<\/p><h3>Time Complexity of Quick Sort<\/h3><p><strong>Best and Average Case<\/strong>:<\/p><ul><li>The time complexity of Quick Sort is <strong>O(n log n)<\/strong> when the pivot splits the array into relatively equal-sized sub-arrays. This is the average-case performance of Quick Sort.<\/li><\/ul><p><strong>Worst Case<\/strong>:<\/p><ul><li>The worst-case time complexity is <strong>O(n\u00b2)<\/strong>, which occurs when the pivot chosen is the smallest or largest element repeatedly, resulting in highly unbalanced partitions.<\/li><\/ul><p><strong>Space Complexity<\/strong>:<\/p><ul><li>The space complexity of Quick Sort is <strong>O(log n)<\/strong> due to the space required for the recursive stack. Unlike other algorithms like Merge Sort, Quick Sort is <strong>in-place<\/strong>, meaning it doesn\u2019t need extra memory for a separate array.<\/li><\/ul><h3>Optimizations for Quick Sort<\/h3><p><strong>Choosing a Good Pivot<\/strong>:<\/p><ul><li>The efficiency of Quick Sort depends heavily on the choice of the pivot. Randomized Quick Sort, where the pivot is chosen randomly, reduces the chances of worst-case performance.<\/li><\/ul><p><strong>Three-way Partitioning<\/strong>:<\/p><ul><li>In cases where the array contains many repeated elements, three-way partitioning can improve performance. This version of Quick Sort divides the array into three sections: elements less than the pivot, equal to the pivot, and greater than the pivot.<\/li><\/ul><p><strong>Hybrid Approaches<\/strong>:<\/p><ul><li>In practice, Quick Sort is often combined with other sorting algorithms like Insertion Sort for smaller sub-arrays. When the sub-arrays become small enough (e.g., 10 elements or fewer), Insertion Sort can be more efficient.<\/li><\/ul><h3>Applications of Quick Sort<\/h3><p><strong>General Sorting<\/strong>:<\/p><ul><li>Quick Sort is widely used in sorting data because of its efficiency in the average case. It is the go-to algorithm in many libraries and frameworks for general-purpose sorting.<\/li><\/ul><p><strong>Search Algorithms<\/strong>:<\/p><ul><li>Quick Sort is often used as a preprocessing step for algorithms that require sorted data, such as binary search.<\/li><\/ul><p><strong>Distributed Systems<\/strong>:<\/p><ul><li>In distributed systems, Quick Sort can be adapted for parallel sorting, taking advantage of multiple processors.<\/li><\/ul><p><strong>External Sorting<\/strong>:<\/p><ul><li>Quick Sort can be used for external sorting algorithms where the data is too large to fit into memory, though other algorithms like Merge Sort may be more suitable in some cases.<\/li><\/ul><h3>Why Learn Quick Sort?<\/h3><p><strong>Quick Sort<\/strong> is one of the most efficient and versatile sorting algorithms, combining both simplicity and power. It introduces key concepts like recursion, divide-and-conquer, and partitioning, which are fundamental to algorithm design. Learning Quick Sort equips you with the tools to solve a wide range of sorting and optimization problems.<\/p><p><strong>Topics Covered<\/strong>:<\/p><ul><li><strong>Definition of Quick Sort<\/strong>: Understanding the algorithm\u2019s structure and how it works.<\/li><li><strong>Time Complexity<\/strong>: Best, worst, and average cases, along with space complexity.<\/li><li><strong>Optimizations<\/strong>: Techniques to improve the efficiency of Quick Sort.<\/li><li><strong>Applications<\/strong>: Where and how Quick Sort is used in real-world scenarios.<\/li><\/ul><p>For more details and further examples, check out the full article on GeeksforGeeks: <a href=\\\"https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/\\\">https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/<\/a>.<\/p>\",\"source\":\"https:\/\/videos.geeksforgeeks.org\/5c668a30a0c3e8e888afbd3a6ee60cacgfg-QuickSortIntroduction20241008115157\/video.m3u8\",\"category\":[{\"term_id__id\":36,\"term_id__term_name\":\"DSA\",\"term_id__term_type\":2,\"term_id__slug\":\"dsa\"},{\"term_id__id\":110,\"term_id__term_name\":\"Sorting\",\"term_id__term_type\":2,\"term_id__slug\":\"sorting-8frfkn\"},{\"term_id__id\":7,\"term_id__term_name\":\"Data Structures\",\"term_id__term_type\":1,\"term_id__slug\":\"data-structures\"},{\"term_id__id\":562,\"term_id__term_name\":\"DSA\",\"term_id__term_type\":1,\"term_id__slug\":\"dsa-lpubwc\"}],\"meta\":{\"thumbnail\":\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-small.png\",\"largeThumbnail\":\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150.png\",\"likes\":2,\"views\":216560,\"isFeatured\":0,\"isPremium\":0,\"isPublic\":0,\"format\":\"video\/mp4\",\"revision\":{}},\"time\":\"08\/10\/2024\",\"subtitle\":\"https:\/\/videos.geeksforgeeks.org\/5c668a30a0c3e8e888afbd3a6ee60cacgfg-QuickSortIntroduction20241008115157\/subtitle.vtt\",\"duration\":372,\"course_link\":null,\"video_schema\":{\"@context\":\"https:\/\/schema.org\",\"@type\":\"VideoObject\",\"name\":\"QuickSort Introduction\",\"description\":\"Quick Sort Algorithm  Comprehensive GuideQuick Sort is one of the most efficient and widely-used sorting algorithms based on the divide-and-conquer strategy. It works by selecting a pivot element and partitioning the other elements into two sub-arrays according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.What is Quick Sort?Quick Sort is a comparison-based sorting algorithm that efficiently sorts elements by partitioning the array into smaller sub-arrays. The core idea is to pick a pivot element, partition the array around the pivot, and recursively sort the sub-arrays. This results in a time complexity of O(n log n) on average, making it one of the fastest sorting algorithms.How Quick Sort WorksChoose a PivotSelect a pivot element from the array. The pivot can be any element, but common choices include the first element, the last element, or a randomly selected one.PartitioningReorder the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it. The pivot is now in its correct position in the sorted array.Recursively Sort the Sub-arraysApply the same process recursively to the sub-arrays (the elements less than and greater than the pivot). Continue dividing and sorting until the sub-arrays have only one element or are empty.Example of Quick SortConsider sorting the array 10, 80, 30, 90, 40, 50, 70 using Quick Sort.Initial Array10, 80, 30, 90, 40, 50, 70Choose PivotSelect 70 as the pivot.PartitioningReorder the array so elements less than 70 are on the left and those greater are on the right. After partitioning, the array looks like10, 30, 40, 50, 70, 90, 80Recursive StepsSort the left sub-array 10, 30, 40, 50 and the right sub-array 90, 80 recursively.Final Sorted ArrayAfter recursively sorting the sub-arrays, the final sorted array will be10, 30, 40, 50, 70, 80, 90Time Complexity of Quick SortBest and Average CaseThe time complexity of Quick Sort is O(n log n) when the pivot splits the array into relatively equal-sized sub-arrays. This is the average-case performance of Quick Sort.Worst CaseThe worst-case time complexity is O(n), which occurs when the pivot chosen is the smallest or largest element repeatedly, resulting in highly unbalanced partitions.Space ComplexityThe space complexity of Quick Sort is O(log n) due to the space required for the recursive stack. Unlike other algorithms like Merge Sort, Quick Sort is in-place, meaning it doesnt need extra memory for a separate array.Optimizations for Quick SortChoosing a Good PivotThe efficiency of Quick Sort depends heavily on the choice of the pivot. Randomized Quick Sort, where the pivot is chosen randomly, reduces the chances of worst-case performance.Three-way PartitioningIn cases where the array contains many repeated elements, three-way partitioning can improve performance. This version of Quick Sort divides the array into three sections elements less than the pivot, equal to the pivot, and greater than the pivot.Hybrid ApproachesIn practice, Quick Sort is often combined with other sorting algorithms like Insertion Sort for smaller sub-arrays. When the sub-arrays become small enough (e.g., 10 elements or fewer), Insertion Sort can be more efficient.Applications of Quick SortGeneral SortingQuick Sort is widely used in sorting data because of its efficiency in the average case. It is the go-to algorithm in many libraries and frameworks for general-purpose sorting.Search AlgorithmsQuick Sort is often used as a preprocessing step for algorithms that require sorted data, such as binary search.Distributed SystemsIn distributed systems, Quick Sort can be adapted for parallel sorting, taking advantage of multiple processors.External SortingQuick Sort can be used for external sorting algorithms where the data is too large to fit into memory, though other algorithms like Merge Sort may be more suitable in some cases.Why Learn Quick Sort?Quick Sort is one of the most efficient and versatile sorting algorithms, combining both simplicity and power. It introduces key concepts like recursion, divide-and-conquer, and partitioning, which are fundamental to algorithm design. Learning Quick Sort equips you with the tools to solve a wide range of sorting and optimization problems.Topics CoveredDefinition of Quick Sort Understanding the algorithms structure and how it works.Time Complexity Best, worst, and average cases, along with space complexity.Optimizations Techniques to improve the efficiency of Quick Sort.Applications Where and how Quick Sort is used in real-world scenarios.For more details and further examples, check out the full article on GeeksforGeeks httpswww.geeksforgeeks.orgquick-sort-algorithm.\",\"thumbnailUrl\":[\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150.png\",\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-seo.png\",\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortIntroduction\/QuickSortIntroduction20241008115150-small.png\"],\"uploadDate\":\"2024-10-08T11:57:19Z\",\"duration\":\"PT0H6M12S\",\"contentUrl\":\"https:\/\/www.geeksforgeeks.org\/videos\/quicksort-introduction\/\"}},{\"id\":10658,\"title\":\"QuickSort using Lomuto Partition\",\"slug\":\"quicksort-using-lomuto-partition-1\",\"description\":\"<h2>QuickSort Algorithm Using Lomuto Partition | Comprehensive Guide<\/h2><p><strong>QuickSort<\/strong> is a highly efficient sorting algorithm that uses the <strong>divide and conquer<\/strong> approach to sort elements. One of the key components of the QuickSort algorithm is the <strong>partitioning<\/strong> method, which determines how the array is divided. The <strong>Lomuto partition<\/strong> scheme is a simple and commonly used partitioning technique in QuickSort, making it easier to implement and understand.<\/p><h3>What is QuickSort?<\/h3><p><strong>QuickSort<\/strong> is a sorting algorithm that works by selecting a \\\"pivot\\\" element from the array and partitioning the other elements into two groups:<\/p><ul><li>Elements smaller than the pivot.<\/li><li>Elements larger than the pivot.<\/li><\/ul><p>The process is then recursively applied to the subarrays formed by partitioning. QuickSort has an average time complexity of <strong>O(n log n)<\/strong>, making it one of the most efficient algorithms for large datasets.<\/p><h3>Key Steps in QuickSort Using Lomuto Partition<\/h3><p><strong>Choose a Pivot<\/strong>:<\/p><ul><li>The last element of the array is often chosen as the pivot in Lomuto partitioning.<\/li><\/ul><p><strong>Partition the Array<\/strong>:<\/p><ul><li>The array is rearranged such that all elements smaller than the pivot are on its left, and all elements larger than the pivot are on its right. The pivot is placed in its correct sorted position.<\/li><\/ul><p><strong>Recursively Sort Subarrays<\/strong>:<\/p><ul><li>After partitioning, the left and right subarrays (excluding the pivot) are sorted recursively using the same QuickSort process.<\/li><\/ul><h3>Lomuto Partition Scheme<\/h3><p>The <strong>Lomuto partition<\/strong> scheme is a simple method to partition the array. Here's how it works:<\/p><ol><li>The pivot is chosen as the last element of the array.<\/li><li>A pointer i is initialized to keep track of the smaller elements' position.<\/li><li>The array is scanned, and whenever an element smaller than the pivot is found, it is swapped with the element at position i. The pointer i is then incremented.<\/li><li>At the end of the scan, the pivot is swapped with the element at position i, placing it in its correct sorted position.<\/li><\/ol><h3>Example of Lomuto Partitioning<\/h3><p>Consider the array: <strong>[10, 80, 30, 90, 40, 50, 70]<\/strong><\/p><ul><li>Choose the last element, <strong>70<\/strong>, as the pivot.<\/li><li>During the partitioning process:<ul><li><strong>10<\/strong> is smaller than 70, so no change is made.<\/li><li><strong>80<\/strong> is greater than 70, so nothing is done.<\/li><li><strong>30<\/strong> is smaller than 70, so it's swapped with <strong>80<\/strong>.<\/li><li><strong>90<\/strong> is greater than 70, so nothing is done.<\/li><li><strong>40<\/strong> is smaller than 70, so it's swapped with <strong>80<\/strong>.<\/li><li><strong>50<\/strong> is smaller than 70, so it's swapped with <strong>90<\/strong>.<\/li><\/ul><\/li><\/ul><p>After partitioning, <strong>70<\/strong> is swapped with the element at position i, and the array becomes: <strong>[10, 30, 40, 50, 70, 90, 80]<\/strong><\/p><p>Now, <strong>70<\/strong> is in its correct sorted position, and QuickSort is applied recursively to the subarrays.<\/p><h3>Pseudocode for QuickSort Using Lomuto Partition<\/h3><p>python<\/p><p>Copy code<\/p><p>def quicksort(arr, low, high):\\n &nbsp; &nbsp;if low &lt; high:\\n &nbsp; &nbsp; &nbsp; &nbsp;# pi is partitioning index, arr[pi] is now at right place\\n &nbsp; &nbsp; &nbsp; &nbsp;pi = partition(arr, low, high)\\n\\n &nbsp; &nbsp; &nbsp; &nbsp;# Recursively sort elements before partition and after partition\\n &nbsp; &nbsp; &nbsp; &nbsp;quicksort(arr, low, pi - 1)\\n &nbsp; &nbsp; &nbsp; &nbsp;quicksort(arr, pi + 1, high)\\n\\ndef partition(arr, low, high):\\n &nbsp; &nbsp;pivot = arr[high] &nbsp;# pivot is the last element\\n &nbsp; &nbsp;i = low - 1 &nbsp;# index of smaller element\\n\\n &nbsp; &nbsp;for j in range(low, high):\\n &nbsp; &nbsp; &nbsp; &nbsp;if arr[j] &lt;= pivot:\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;i = i + 1\\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;arr[i], arr[j] = arr[j], arr[i] &nbsp;# swap\\n\\n &nbsp; &nbsp;arr[i + 1], arr[high] = arr[high], arr[i + 1] &nbsp;# move pivot to correct position\\n &nbsp; &nbsp;return i + 1\\n<\/p><h3>Key Points:<\/h3><ul><li>The pivot is chosen as the last element.<\/li><li>The function partition rearranges the array and returns the pivot's position.<\/li><li>The quicksort function recursively applies the QuickSort to the left and right subarrays.<\/li><\/ul><h3>Time Complexity of QuickSort Using Lomuto Partition<\/h3><ul><li><strong>Best Case<\/strong>: <strong>O(n log n)<\/strong>, which occurs when the pivot consistently divides the array into two nearly equal parts.<\/li><li><strong>Worst Case<\/strong>: <strong>O(n\u00b2)<\/strong>, which happens when the pivot is the smallest or largest element, leading to highly unbalanced partitions.<\/li><li><strong>Average Case<\/strong>: <strong>O(n log n)<\/strong>, making QuickSort efficient for large datasets in most practical scenarios.<\/li><\/ul><h3>Space Complexity<\/h3><ul><li>The space complexity is <strong>O(log n)<\/strong> due to the recursive nature of QuickSort.<\/li><\/ul><h3>Advantages of Using QuickSort with Lomuto Partition<\/h3><ol><li><strong>Efficient<\/strong>: QuickSort has an average time complexity of <strong>O(n log n)<\/strong>, making it one of the most efficient sorting algorithms.<\/li><li><strong>In-Place Sorting<\/strong>: QuickSort does not require additional memory for a new array, as the sorting is done in-place.<\/li><li><strong>Simple Implementation<\/strong>: The Lomuto partition scheme is easy to implement and understand, making it a good choice for learning QuickSort.<\/li><\/ol><h3>Disadvantages of Lomuto Partition<\/h3><ol><li><strong>Not Ideal for Large Duplicate Elements<\/strong>: Lomuto partition performs poorly if the array contains many duplicate elements, as it can lead to unbalanced partitions.<\/li><li><strong>Worst-Case Scenario<\/strong>: The worst-case time complexity of <strong>O(n\u00b2)<\/strong> occurs when the pivot consistently picks the largest or smallest element in the array.<\/li><\/ol><h3>Applications of QuickSort<\/h3><ol><li><strong>Large Datasets<\/strong>: QuickSort is widely used for sorting large datasets efficiently due to its average <strong>O(n log n)<\/strong> time complexity.<\/li><li><strong>Memory-Constrained Environments<\/strong>: Since QuickSort is an in-place sorting algorithm, it is well-suited for environments with limited memory.<\/li><li><strong>Data Processing<\/strong>: QuickSort is used in many data processing algorithms where fast sorting of data is required.<\/li><\/ol><h3>Why Learn QuickSort Using Lomuto Partition?<\/h3><p>Learning QuickSort using the <strong>Lomuto partition<\/strong> scheme introduces you to a highly efficient sorting algorithm that is easy to implement and understand. It helps build a foundation in recursive algorithms, divide-and-conquer strategies, and algorithmic optimizations. QuickSort is widely used in competitive programming, software development, and data processing, making it a must-know algorithm for programmers and developers.<\/p><p><strong>Topics Covered<\/strong>:<\/p><ol><li><strong>QuickSort Overview<\/strong>: Understanding the QuickSort algorithm and how it works.<\/li><li><strong>Lomuto Partition Scheme<\/strong>: How the Lomuto partition works and its implementation in QuickSort.<\/li><li><strong>Time Complexity<\/strong>: Analysis of best, worst, and average-case scenarios for QuickSort.<\/li><li><strong>Applications<\/strong>: Practical uses of QuickSort in large datasets, memory-constrained environments, and data processing.<\/li><\/ol><p>For more details and further examples, check out the full article on GeeksforGeeks: <a href=\\\"https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/\\\">https:\/\/www.geeksforgeeks.org\/quick-sort-algorithm\/<\/a>.<\/p>\",\"source\":\"https:\/\/videos.geeksforgeeks.org\/e3434a976140115c858c39a24be50b0agfg-QuickSortUsingLomuto20241008115304\/video.m3u8\",\"category\":[{\"term_id__id\":36,\"term_id__term_name\":\"DSA\",\"term_id__term_type\":2,\"term_id__slug\":\"dsa\"},{\"term_id__id\":110,\"term_id__term_name\":\"Sorting\",\"term_id__term_type\":2,\"term_id__slug\":\"sorting-8frfkn\"},{\"term_id__id\":7,\"term_id__term_name\":\"Data Structures\",\"term_id__term_type\":1,\"term_id__slug\":\"data-structures\"},{\"term_id__id\":562,\"term_id__term_name\":\"DSA\",\"term_id__term_type\":1,\"term_id__slug\":\"dsa-lpubwc\"}],\"meta\":{\"thumbnail\":\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortusingLomutoPartition\/QuickSortusingLomutoPartition20241008115629-small.png\",\"largeThumbnail\":\"https:\/\/media.geeksforgeeks.org\/geeksforgeeks\/QuickSortusingLomutoPartition\/QuickSortusingLomutoPartition20241008115629.png\",\"likes\":1,\"views\":37940,\"isFeatured\":0,\"isPremium\":0,\"isPublic\":0,\"format\":\"video\/mp4\",\"revision\":{}},\"time\":\"08\/10\/2024\",\"subtitle\":\"https:\/\/videos.geeksforgeeks.org\/e3434a976140115c858c39a24be50b0agfg-QuickSortUsingLomuto20241008115304\/subtitle.vtt\",\"duration\":506,\"course_link\":null}]");
                    </script>
                <div id="#GFG_AD_InContent_Desktop_728x280" style="display: flex; width: 100%; justify-content: center;">
    <div id="video-iframe-container" style="display: flex; flex-direction: column; align-items: center;">
        <iframe id="video-iframe" src="./Quick Sort - GeeksforGeeks_files/video.html" width="640" height="380" frameborder="0" allowfullscreen="" allow="autoplay" referrerpolicy="origin"></iframe>
        
        <!-- This part is dynamically created by JavaScript -->
        <div id="video-info-container">
            <!-- Video title -->
            <div id="video-info-container-title" style="width:100%; text-align: left; color: var(--similar-read-title-color); font-size: 20px; font-family: var(--font-primary); padding-right: 10px;">QuickSort Introduction</div>
        </div>
    </div>
        <div id="video-playlist-container" style="width: 350px; height: 360px; overflow-y: scroll; margin-top: 8px; padding-left: 5px;">
        
            <div id="playlist-video-tile-10657" class="playlist-video-tile" data-video-id="10657" style="display: flex; align-items: center; margin-bottom: 10px; cursor: pointer;">
                <img class="restrict-popup-gfg" src="./Quick Sort - GeeksforGeeks_files/QuickSortIntroduction20241008115150-small.png" alt="Video Thumbnail" style="width: 160px; height: 90px; border-radius: 12px; margin-right: 10px;">
                <h2 style="font-size: 14px; padding: 5px; color: var(--discussion-button-color) !important;">QuickSort Introduction</h2>
            </div>
            
            <div id="playlist-video-tile-10658" class="playlist-video-tile" data-video-id="10658" style="display: flex; align-items: center; margin-bottom: 10px; cursor: pointer;">
                <img class="restrict-popup-gfg" src="./Quick Sort - GeeksforGeeks_files/QuickSortusingLomutoPartition20241008115629-small.png" alt="Video Thumbnail" style="width: 160px; height: 90px; border-radius: 12px; margin-right: 10px;">
                <h2 style="font-size: 14px; padding: 5px;">QuickSort using Lomuto Partition</h2>
            </div>
            </div></div>                                </div>
                                                        <div class="d-row content-bw " style="margin-top: 20px;">
                            <div class="article-pgnavi_prev"><div class="comment_div" data-title="Comments"><button class="author_footer_btn" data-gfg-action="loadComments">
    <div class="discussion_panel">
        <i class="discussion_button">
        </i>
        Comment
    </div></button></div>
                                    <div class="author-inline-details">
                                        <div class="article-meta-author-details">
                                            <div class="article-meta-author-details-block">
                                                <div class="article-meta-author-details-profile-display">
                                                    <div class="author_info">
                                                        <div class="article-meta-author-details-profile-display-icon"><a href="https://www.geeksforgeeks.org/user/kartik/" style="text-decoration: none;"><div class="image-wrap" style="position: relative"><p class="profileCard-profile-picture" style="background-color:#B3EFD3;  margin:0px;">K</p>
        <div style="position: absolute;top: -35px; left: -13px;">
            <i class="gfg-badge-icon md master"></i>
        </div>
        </div>
</a></div>
                                                        <div class="article-meta-author-details-profile-display-name"><a aria-label="author profile" href="https://www.geeksforgeeks.org/user/kartik/" style="display: block;overflow: hidden;width: 65px;text-decoration: none;text-overflow: ellipsis;color: var(--gfg-title-color);font-weight: bold;white-space: nowrap;">kartik</a></div>
                                                    </div><div class="author_follow_btn">
                                             <div class="article-meta-author-details-follow-button">
            <div class="follow-container">
            <div class="follow-btn">
<button id="followAuthor" type="button" onclick="followOrUnfollowAuthor()" value="kartik">
<span role="img" aria-label="plus" class="plus-icon"><svg viewBox="64 64 896 896" focusable="false" data-icon="plus" width="1em" height="1em" fill="currentColor" aria-hidden="true"><defs><style></style></defs><path d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"></path><path d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"></path></svg></span> <span style="
    font-family: Nunito,sans-serif;
">Follow</span></button></div></div></div>
                                           </div></div>
                                            </div>
                                            <div class="article_bottom_suggestion_wrapper">
                                                <div pid="142309" class="article--viewer_like tooltip tooltipBottom" data-title="Like Article">
                                                    <button id="likeButton" aria-label="like article" data-gfg-action="like-article" data-bookmark-value="0" data-liked="false" style="color: #5B5A5A !important; display: flex; align-items: center; background-color: unset; margin: 0px !important; padding: 5px 0px;">
                                                        <i class="author-badge-like-button"></i>
                                                        <figure id="likeCount" style="margin-left: 3px; margin-top: 4px; color: var(--like-count-color); font-family: Nunito,sans-serif;  font-size: 14px; font-weight: 600;" class="favoriteText">874</figure>
                                                    </button>
                                                </div><div class="article_bottom_suggestion" onclick="improveArticleCall()" data-title="Improve">
                                             <span class="improveTooltipBottom">Improve</span>
                                             <i class="author-badge-improvement-button"></i>
                                           </div></div>
                                        </div>
                                    </div>                            </div>
                        <div class="more-info" style="display: flex;flex-direction: column;">
                            <div class="article-meta-author-details" style="display: none">
                                        <div class="article-meta-author-details-block">
                                            <div class="article-meta-author-details-profile-display">
                                                <div class="author_info">
                                                <div class="article-meta-author-details-profile-display-icon">
                                                    <a href="https://www.geeksforgeeks.org/user/kartik/" style="text-decoration: none;"><div class="image-wrap" style="position: relative"><p class="profileCard-profile-picture" style="background-color:#B3EFD3;  margin:0px;">K</p>
        <div style="position: absolute;top: -35px; left: -13px;">
            <i class="gfg-badge-icon md master"></i>
        </div>
        </div>
</a>                                                </div>
                                                <div class="article-meta-author-details-profile-display-name">
                                                    <a aria-label="author profile" href="https://www.geeksforgeeks.org/user/kartik/" style="display: block;overflow: hidden;width: 65px;text-decoration: none;text-overflow: ellipsis;color: var(--gfg-title-color);font-weight: bold;white-space: nowrap;">kartik</a>                                                </div>
                                                </div>
                                                <div class="author_follow_btn"><div class="article-meta-author-details-follow-button">
            <div class="follow-container">
            <div class="follow-btn">
<button id="followAuthor" type="button" onclick="followOrUnfollowAuthor()" value="kartik">
<span role="img" aria-label="plus" class="plus-icon"><svg viewBox="64 64 896 896" focusable="false" data-icon="plus" width="1em" height="1em" fill="currentColor" aria-hidden="true"><defs><style></style></defs><path d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"></path><path d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"></path></svg></span> <span style="
    font-family: Nunito,sans-serif;
">Follow</span></button></div></div></div></div>                                            </div>
                                            
                                        </div>
                                        <div class="article_bottom_suggestion_wrapper">
                                            <!-- <div class="article_bottom_suggestion" data-title="Follow">
                                                <a href='https://news.google.com/publications/CAAqBwgKMLTrzwsw44bnAw?hl=en-IN&gl=IN&ceid=IN%3Aen' target="_blank">
                                                    <img class="gfg-icon_Gnews no-zoom-in-cursor" src=https://media.geeksforgeeks.org/auth-dashboard-uploads/Google-news.svg  loading="lazy" alt="News"></img>
                                                </a>
                                            </div>  -->
                                            <script>
                                                
                                            </script>
                                            <div pid="142309" class="article--viewer_like tooltip tooltipBottom" data-title="Like Article">
                                                <!-- <span class="tooltiptext likeTooltipBottom">Like Article</span> -->
                                                <button id="likeButton" aria-label="like article" data-gfg-action="like-article" data-bookmark-value="0" data-liked="false" style="color: #5B5A5A !important; display: flex; align-items: center; background-color: unset; margin: 0px !important; padding: 5px 0px;">
                                                    <i class="author-badge-like-button"></i>
                                                    <figure id="likeCount" style="margin-left: 3px; margin-top: 4px; color: var(--like-count-color); font-size: 14px; font-weight: 600;" class="favoriteText">874</figure>
                                                </button>
                                            </div>
                                            
                                                                            <div class="article_bottom_suggestion" onclick="improveArticleCall()" data-title="Improve">
                                    <span class="improveTooltipBottom">Improve</span>
                                    <i class="author-badge-improvement-button"></i>
                                </div>
                            
                                        </div>
                        </div>
                        
                                                <div class="bottom-wrap" style="">
                                                            <div class="improved">
                                    <div class="t-head">Article Tags : </div>
                                    <ul>
                                        
            <li style="border-radius: 25px;" class="">
                <a href="https://www.geeksforgeeks.org/category/dsa/algorithm/divide-and-conquer/">Divide and Conquer</a>
            </li>
            <li style="border-radius: 25px;" class="">
                <a href="https://www.geeksforgeeks.org/category/dsa/algorithm/sorting/">Sorting</a>
            </li>
            <li style="border-radius: 25px;" class="">
                <a href="https://www.geeksforgeeks.org/category/dsa/">DSA</a>
            </li>
            <li style="border-radius: 25px;" class="">
                <a href="https://www.geeksforgeeks.org/tag/adobe/">Adobe</a>
            </li>
            <li style="border-radius: 25px;display:none;" class="articles-hidden-tags">
                <a href="https://www.geeksforgeeks.org/tag/qualcomm/">Qualcomm</a>
            </li>
            <li style="border-radius: 25px;display:none;" class="articles-hidden-tags">
                <a href="https://www.geeksforgeeks.org/tag/samsung/">Samsung</a>
            </li>
            <li style="border-radius: 25px;display:none;" class="articles-hidden-tags">
                <a href="https://www.geeksforgeeks.org/tag/goldman-sachs/">Goldman Sachs</a>
            </li>
            <li style="border-radius: 25px;display:none;" class="articles-hidden-tags">
                <a href="https://www.geeksforgeeks.org/tag/sap-labs/">SAP Labs</a>
            </li>
            <li style="border-radius: 25px;display:none;" class="articles-hidden-tags">
                <a href="https://www.geeksforgeeks.org/tag/target-corporation/">Target Corporation</a>
            </li>
            <li style="border-radius: 25px;display:none;" class="articles-hidden-tags">
                <a href="https://www.geeksforgeeks.org/tag/hsbc/">HSBC</a>
            </li>
            <li style="border-radius: 25px;display:none;" class="articles-hidden-tags">
                <a href="https://www.geeksforgeeks.org/tag/quick-sort/">Quick Sort</a>
            </li>
            <li style="border-radius: 25px;display:none;" class="articles-hidden-tags">
                <a href="https://www.geeksforgeeks.org/tag/dsa-tutorials/">DSA Tutorials</a>
            </li>                                    </ul>
                                                                            <button id="showMoreTagsBtn" class="show-more-recommendation-button">+8 More</button>
                                                                    </div>
                                                                                </div>
                                                </div>

                                                </div></div></article>
                        
                                                                                    <div class="article--recommended article--recommended_wrapper" id="similar-reads">
                                                                <h3 class="new-top-bar top-bar-title">Explore</h3>
                                    <div class="gfg-similar-reads-list">
                                        <ul class="similarReadLeftBarList"><div class="second"><h2 class="dropdown-title">DSA Fundamentals<span class="gfg-icon gfg-icon_arrow-down-thin"></span></h2><div class="dropdown-item" style="display:none;"><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/logic-building-problems/"><p class="title-text">Logic Building Problems</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">2 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/analysis-of-algorithms/"><p class="title-text">Analysis of Algorithms</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">1 min read</span>
                </div></a></div><h2 class="dropdown-title">Data Structures<span class="gfg-icon gfg-icon_arrow-down-thin"></span></h2><div class="dropdown-item" style="display:none;"><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/array-data-structure-guide/"><p class="title-text">Array Data Structure</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">3 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/string-data-structure/"><p class="title-text">String in Data Structure</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">2 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/hashing-data-structure/"><p class="title-text">Hashing in Data Structure</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">2 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/linked-list-data-structure/"><p class="title-text">Linked List Data Structure</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">2 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/stack-data-structure/"><p class="title-text">Stack Data Structure</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">2 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/queue-data-structure/"><p class="title-text">Queue Data Structure</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">2 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/tree-data-structure/"><p class="title-text">Tree Data Structure</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">2 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/graph-data-structure/"><p class="title-text">Graph Data Structure</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">3 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/trie-insert-and-search/"><p class="title-text">Trie Data Structure</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">15+ min read</span>
                </div></a></div><h2 class="dropdown-title">Algorithms<span class="gfg-icon gfg-icon_arrow-down-thin"></span></h2><div class="dropdown-item" style="display:none;"><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/searching-algorithms/"><p class="title-text">Searching Algorithms</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">2 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/sorting-algorithms/"><p class="title-text">Sorting Algorithms</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">3 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/introduction-to-recursion-2/"><p class="title-text">Introduction to Recursion</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">14 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/greedy-algorithms/"><p class="title-text">Greedy Algorithms</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">3 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/graph-data-structure-and-algorithms/"><p class="title-text">Graph  Algorithms</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">3 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/competitive-programming/dynamic-programming/"><p class="title-text">Dynamic Programming or DP</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">3 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/bitwise-algorithms/"><p class="title-text">Bitwise Algorithms</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">4 min read</span>
                </div></a></div><h2 class="dropdown-title">Advanced<span class="gfg-icon gfg-icon_arrow-down-thin"></span></h2><div class="dropdown-item" style="display:none;"><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/segment-tree-data-structure/"><p class="title-text">Segment Tree</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">2 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/binary-indexed-tree-or-fenwick-tree-2/"><p class="title-text">Binary Indexed Tree or Fenwick Tree</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">15 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/square-root-sqrt-decomposition-algorithm/"><p class="title-text">Square Root (Sqrt) Decomposition Algorithm</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">15+ min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/competitive-programming/binary-lifting-guide-for-competitive-programming/"><p class="title-text">Binary Lifting</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">15+ min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/maths/geometry/"><p class="title-text">Geometry</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">2 min read</span>
                </div></a></div><h2 class="dropdown-title">Interview Preparation<span class="gfg-icon gfg-icon_arrow-down-thin"></span></h2><div class="dropdown-item" style="display:none;"><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/interview-corner/"><p class="title-text">Interview Corner</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">3 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/blogs/gfg160-160-days-of-problem-solving/"><p class="title-text">GfG160</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">3 min read</span>
                </div></a></div><h2 class="dropdown-title">Practice Problem<span class="gfg-icon gfg-icon_arrow-down-thin"></span></h2><div class="dropdown-item" style="display:none;"><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/dsa/geeksforgeeks-practice-best-online-coding-platform/"><p class="title-text">GeeksforGeeks Practice - Leading Online Coding Platform</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">6 min read</span>
                </div></a><a class="similarReadDropdownItem" href="https://www.geeksforgeeks.org/blogs/problem-of-the-day-develop-the-habit-of-coding/"><p class="title-text">Problem of The Day - Develop the Habit of Coding</p><div class="reading-time">
                    <i class="reading-time-icon" data-gfg-action="readingtime"></i>
                    <span style="color: var(--recommendation-card-text-color);font-size: 14px;font-weight: 500;line-height: 17px;">5 min read</span>
                </div></a></div></div></ul>
                                    </div>
                                </div>
                        


                                                <div class="vote-wrap">
                                <div style="display:none;align-items:center;justify-content:center;width:100%;">
                                    <button aria-label="like" data-type="like" class="vote-this" style="margin-right: 0; margin-left:0 ;">
                                        <i class="gfg-icon gfg-icon_like favoriteIcon"></i>
                                        <span class="favoriteLike">Like</span>
                                        <figure class="favoriteText"></figure>
                                    </button>
                                                                    </div>
                            </div>

                        </div>
                            <div class="article-meta">
                                                                                    <div class="bottom-wrap">
                              <div id="GFG_AD_InContent_Desktop_BTF_650x250" style="text-align:center;max-height: 300px;"></div>
                            </div>
                                                        <!-- end -->
                        </div>
                    </div>
                </div>
            </div>
                <div id="report_modal_content" class="report_modal_content" style="display:hidden;"></div>
        <div class="onopen-discussion-panel">
            <div class="discussion-tab">
                <div class="discussion_heading">
                    <div></div>
                    <i class="gfg-icon close-tab-icon"></i>
                </div> 
                <div class="discussion_content">                            <div style="height:100%">
                                <div style="height:100%" id="comment-system"></div>
                            </div>

                            
</div>
            </div>
        </div>  

        <div class="rightBar" style="padding-right: 5px;">
                
<style>
	.article--container_content{
		align-items: unset !important;
	}
	.sideBar {
		position: sticky !important;
	}
	.gfg-icon_switch::after {
		background-position: -40px -281px !important;
	}
	.gfg-icon_transaction::after {
		background-position: -40px -321px !important;
	}
	.header-main__profile.selected+.mega-dropdown{
		width: 225px !important;
	}
	#courses-container .course-price{
		display:none;
	}
	/* .side--container_wscard .card-content .content .meta:empty, .practiceBannerFromPlugin{
		display:none !important;
	} */
	.side--container_wscard .card-content .content .meta{
		display:block !important;
	}
	.side--container_wscard .card-content .content .meta p{
		background-color: rgba(254, 212, 91, 0.6);
		font-size: 10pt;
		font-weight: bold;
		display: inline-block;
		color: var(--color-black);
		margin-top: 15px;
		padding: 0px 5px;
	}
	#try-it{
		display:initial !important;
	}
	#try-it .try-it-div{
		line-height: 34px;
	}
	.gfg-icon_dark-mode::after {
		background-position: -40px -680px;
	}
	.side--container_wscard .head{
		font-size: 14px !important;
	}
	.nineDot-menu, .gfg-icon_ndot{
		display: none;
	}
	#text-15{
		flex-direction: column;
	}
	.mtq_correct_marker, .mtq_wrong_marker{
		display: none;
	}
	.sidebar_wrapper > :last-child{
		margin: unset !important;
		margin-left: 5px !important;
		margin-top: 20px !important;
		top: 70px !important;
	}
	.darkMode-wrap{
		bottom:1% !important;
	}
	#secondary .textwidget{
		margin-left: auto;
		margin-right: 0;
		text-align: right;
	}
	#secondary .widget_text:last-child{
		top: 70px !important;
	}
	@media(max-width:768px){
		#scrollTopBtn{
			display:none !important;
		}
	}
	.rightbar_loggedin_promo_cta{
		display:flex;
		cursor:pointer;
		margin-bottom:20px;
	}

	/* Carousel Ad CSS dont remove or change without permission */

	.ads-carousel-container {
      width: 300px;
      overflow: hidden;
      position: relative;
      min-width: 300px;
      max-width: 300px;
    }

    .ads-carousel-track {
      display: flex;
      transition: transform 0.5s ease-in-out;
      width: 900px; /* 3 slides * 300px */
    }

    .ads-slide {
		min-width: 300px;
		max-width: 300px;
		max-height: 250px;
		margin-bottom: 10px;
		overflow: hidden;

		flex-shrink: 0;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 24px;
		font-weight: bold;
		color: white;
	}

	/* ✅ Carousel dots container */
    .carousel-dots {
		display: flex !important;
		justify-content: center;
		margin: 10px 0px;
		visibility: hidden;
    }

	.show-flex-ad {
		visibility: visible;
	}


    /* ✅ Each dot */
    .dot {
		width: 6px;
		height: 6px;
		margin: 0 5px;
		border-radius: 50%;
		background-color: gray;
		transition: background-color 0.3s ease;
    }

    /* ✅ Active dot */
    .dot.active {
      	background-color: blue;
    }
</style>

<div id="secondary" class="widget-area">
	
	<!------------------------ text-15 (for Ads) ------------------------ -->
	<aside id="text-15" class="widget widget_text">
		<div class="textwidget">
					<div id="_GFG_ABP_Desktop_RightSideBar_ATF_300x600_2"></div>
			<div id="GFG_AD_Desktop_RightSideBar_ATF_300x250_2" style="min-width: 300px;margin-bottom:10px;"></div>
			<div class="ads-carousel-container">
				<div class="ads-carousel-track" id="adsCarouselTrack">
					<div id="GFG_AD_Desktop_RightSideBar_Carousel_AD1_300x250" class="ads-slide"></div>
					<div id="GFG_AD_Desktop_RightSideBar_Carousel_AD2_300x250" class="ads-slide"></div>
					<div id="GFG_AD_Desktop_RightSideBar_Carousel_AD3_300x250" class="ads-slide"></div>
				</div>
			</div>

			<!-- ✅ Dots -->
			<div class="carousel-dots" id="carouselDots">
				<div class="dot active"></div>
				<div class="dot"></div>
				<div class="dot"></div>
			</div>
			<div id="GFG_AD_Desktop_RightSideBar_ATF_300x600" style="min-width: 300px; min-height: 600px;margin-bottom:10px;"></div>
					</div>
	</aside>

	<!------------------------ text-16 (For Ads)------------------------ -->
	<aside id="text-16" class="widget widget_text">
		<div class="textwidget">
					<div id="_GFG_ABP_Desktop_RightSideBar_MTF_300x600"></div>
			<div id="GFG_AD_Desktop_RightSideBar_MTF_300x250" style="min-width: 300px;"></div>
			<div id="_GFG_ABP_Desktop_RightSideBar_BTF_300x600"></div>
			<div id="_GFG_ABP_Desktop_RightSideBar_BTF_300x600_3"></div>
				</div>
	</aside>
	<!-- ---------------------- courses section ------------------------- -->
	    <!-- <script>
        var rightBarExploreMoreList = ``
	</script> -->

	<!-------------------------------- Text-18 (explore more section + ads) --------------------------->
	<aside id="text-18" class="widget widget_text" style="position: sticky; top: 70px;">
		<div class="textwidget">
					<div id="GFG_AD_Desktop_RightSideBar_BTF_Sticky_300x250" style="min-width: 300px;margin-bottom:10px"></div>
			<div id="GFG_AD_Desktop_RightSideBar_Docked_160x600" style="min-width: 160px;"></div><div id="GFG_AD_Desktop_RightSideBar_BTFdocked_300x600" style="min-width: 300px;"></div>
			</div></aside>

	<!-------------------------- Text -20 (For maintaining some CSS) ---------------------- -->
	<aside id="text-20" class="widget widget_text">
		<div class="textwidget">
		 <!-- Please do not delete this div -->
		</div>
	</aside>
</div>

                <div id="user-personal-note" style="display: none;"></div>
        </div>
    </div>
    <section class="disqus-section">
        <div class="article-page_flex">
            <div class="leftBar">
            </div>
        </div>
    </section>
</div>

<div id="video-popup" style="display:none"></div>

<link rel="stylesheet" href="./Quick Sort - GeeksforGeeks_files/articleList.min.css">
<script async="" type="text/javascript" src="./Quick Sort - GeeksforGeeks_files/gfg-carousel.min.js.descarga"></script>
<script>
    var commentConfig = function () {
    this.identifier = 'gfg_' + post_type + '_' + post_id;
    this.title = encodeURIComponent(post_title);
    this.domain = 'gfg';
    this.pageURL = encodeURIComponent($(location).attr('href').replace('www.cdn.geeksforgeeks.org', 'www.geeksforgeeks.org'));
    this.mode = (getThemeFromCookie() === 'gfgThemeDark') ? 'dark' : 'light';
};
$(function () {
    if($('.main_wrapper').length){
        var main_offset = $('.main_wrapper').offset().top;
    }
    var width = $(".main_wrapper").innerWidth() + 10;

    jQuery("#comment").on("click", function () {

        jQuery(this).hide();
    });

    $(document).on("click", "[data-gfg-action='loadComments']", function (e) {
        if ($("#comment-system").length === 0) {
            var commentSectionTemplate = ` <div class="disqus--viewer">
                                                <div style="height:100%" class="comment-section" hidden>
                                                    <div style="height:100%">
                                                        <div style="height:100%" id="comment-system"></div>
                                                    </div>
                                                </div>
                                            </div`;
            $(commentSectionTemplate).insertBefore(".article--recommended");
        }
        loadComments();
    });
});

function loadComments() {
    if ($("iframe[id*='discuss-iframe']").length < 1) {
        (function () {
            var d = document,
                s = d.createElement("script");
            s.src = commentSysUrl;
            (d.head || d.body).appendChild(s);
        })();

    }

    if (!$('.comment-section').is(':visible')) {
        $('.comment-section').show();
    }
}
function improveArticleCall() {
    $('.improve-modal--overlay').show();
    $('.improve-modal--improvement').show();
    $('.locked-status--impove-modal').css("display", "none");
    $('.improve-modal--improvement').attr("status", "unlocked");
    $('.unlocked-status--improve-modal-content').css("display", "block");
}
function showDropdown() {
    document.getElementById("myDropdown").classList.toggle("show");
}

// Close the dropdown if the user clicks outside of it
$(window).click(function (e) {
    if ($('.three_dot_dropdown_content').hasClass("show") && !(e.target.matches('.dropbtn') || (e.target.closest('#myDropdown') && e.target.closest('#myDropdown').matches('#myDropdown')))) {
        $('.three_dot_dropdown_content').removeClass("show");
    }
});


function suggestionArticleCall() {
    $('.improve-modal--overlay').show();
    $('.improve-modal--improvement').css("display", "none");
    $('.thank-you-message').css("display","none");  
    $('.improve-modal--suggestion').show();
    $('#suggestion-section-textarea').show();
    if(suggestEditorInstance !== null){
        suggestEditorInstance.setEditorValue("");
    }
    $('.suggestion-section').css('display', 'block');
    jQuery('.suggest-bottom-btn').css("display","block");
    $('.suggest-bottom-btn').html("Suggest changes");
    $('.left-arrow-icon_wrapper').hide();
    $('.locked-status--impove-modal').css("display", "none");
    $('.improve-modal--improvement').attr("status", "unlocked");
    $('.unlocked-status--improve-modal-content').css("display", "block");
    return;
}
$(document).ready(function() {
    var isfollowingApiCall = false;
    if ($('.follow-btn').length) {
        var articleRecommendedTop = $(".article--recommended").offset().top;
        var articleRecommendedBottom = articleRecommendedTop + $(".article--recommended").outerHeight();
        $(window).scroll(function() {
            var top_of_element = $(".article--recommended").offset().top;
            var bottom_of_element = $(".article--recommended").offset().top + $(".article--recommended").outerHeight();
            var bottom_of_screen = $(window).scrollTop() + $(window).innerHeight();
            var top_of_screen = $(window).scrollTop();
            if ((bottom_of_screen > top_of_element && top_of_screen < bottom_of_element) || 
                (bottom_of_screen > articleRecommendedTop && top_of_screen < articleRecommendedBottom) ||
                (top_of_screen > articleRecommendedBottom)) {
                if (!isfollowingApiCall) {
                    isfollowingApiCall = true;
                    setTimeout(function(){
                        if (loginData && loginData.isLoggedIn) {
                            if (loginData.userName !== $('#followAuthor').val()) {
                                is_following();
                            } else {
                                $('.profileCard-profile-picture').css('background-color', '#E7E7E7');
                            }
                        } else {
                            $('.follow-btn').removeClass('hideIt');
                        }
                    }, 3000);
                }
            }
        });
    }
    
    $(".accordion-header").click(function() {
        var arrowIcon = $(this).find('.bottom-arrow-icon');
        arrowIcon.toggleClass('rotate180');
    });

});

window.isReportArticle = false;
function report_article(){
    if (!loginData || !loginData.isLoggedIn) {
        const loginModalButton = $('.login-modal-btn')
            if (loginModalButton.length) {
                loginModalButton.click();
            }
    return;
}

    if(!window.isReportArticle){
            //to add loader
            $('.report-loader').addClass('spinner');
            jQuery('#report_modal_content').load(gfgSiteUrl+'wp-content/themes/iconic-one/report-modal.php', {
                PRACTICE_API_URL: practiceAPIURL,
                PRACTICE_URL:practiceURL
            },function(responseTxt, statusTxt, xhr){
                if(statusTxt == "error"){
                    alert("Error: " + xhr.status + ": " + xhr.statusText);
                }
            });
    }else{
        window.scrollTo({ top: 0, behavior: 'smooth' });
        $("#report_modal_content").show();
    }
} 

function closeShareModal() {
    const shareOption = document.querySelector('[data-gfg-action="share-article"]');
    shareOption.classList.remove("hover_share_menu");
    let shareModal = document.querySelector(".hover__share-modal-container");
    shareModal && shareModal.remove();
}

function openShareModal() {
    closeShareModal(); // Remove existing modal if any

    let shareModal = document.querySelector(".three_dot_dropdown_share");
    shareModal.appendChild(Object.assign(document.createElement("div"), { className: "hover__share-modal-container" }));

    document.querySelector(".hover__share-modal-container").append(
        Object.assign(document.createElement('div'), { className: "share__modal" }),
    );

    document.querySelector(".share__modal").append(Object.assign(document.createElement('h1'), { className: "share__modal-heading" }, { textContent: "Share to" }));
    const socialOptions = ["LinkedIn", "WhatsApp","Twitter", "Copy Link"];

    socialOptions.forEach((socialOption) => {
        const socialContainer = Object.assign(document.createElement('div'), { className: "social__container" });
        const icon = Object.assign(document.createElement("div"), { className: `share__icon share__${socialOption.split(" ").join("")}-icon` });
        const socialText = Object.assign(document.createElement("span"), { className: "share__option-text" }, { textContent: `${socialOption}` });
        const shareLink = (socialOption === "Copy Link") ? 
            Object.assign(document.createElement('div'), { role: "button", className: "link-container CopyLink" }) : 
            Object.assign(document.createElement('a'), { className: "link-container" });

       
        if (socialOption === "LinkedIn") {
            shareLink.setAttribute('href', `https://www.linkedin.com/sharing/share-offsite/?url=${window.location.href}`);
            shareLink.setAttribute('target', '_blank');
        }
        if (socialOption === "WhatsApp") {
            shareLink.setAttribute('href', `https://api.whatsapp.com/send?text=${window.location.href}`); 
            shareLink.setAttribute('target', "_blank");
        }
        if (socialOption === "Twitter") {
            shareLink.setAttribute('href', `https://twitter.com/intent/tweet?url=${window.location.href}`); 
            shareLink.setAttribute('target', "_blank");
        }

        shareLink.append(icon, socialText);
        socialContainer.append(shareLink);
        document.querySelector(".share__modal").appendChild(socialContainer);

        //adding copy url functionality
        if(socialOption === "Copy Link") {
            shareLink.addEventListener("click", function() {
                var tempInput = document.createElement("input");
                tempInput.value = window.location.href; 
                document.body.appendChild(tempInput); 
                tempInput.select();
                tempInput.setSelectionRange(0, 99999); // For mobile devices
                document.execCommand('copy');
                document.body.removeChild(tempInput);
                this.querySelector(".share__option-text").textContent = "Copied"
            })
        }
    });
    // document.querySelector(".hover__share-modal-container").addEventListener("mouseover", () => document.querySelector('[data-gfg-action="share-article"]').classList.add("hover_share_menu"));
}
function toggleLikeElementVisibility(selector, show) {
    document.querySelector(`.${selector}`).style.display = show ? "block" : "none";
}

function closeKebabMenu(){
    document.getElementById("myDropdown").classList.toggle("show");
}

</script>
<!-- Script for the new design of similar read  -->
<script>
$(document).ready(function() {

    $("#showMoreTagsBtn").click(function() {
        $('.articles-hidden-tags').show();
        $(this).hide();
    });

    $("#showMorePracticeTagsBtn").click(function() {
        $(".practice-tags li:nth-child(n+5)").show();
        $(this).hide();
    });
});
</script>
<!-- Script end for similar read -->

<style>
        .grecaptcha-badge {
            visibility: hidden !important;
        }
        .thank-you-message {
            height: 100%;
            display:flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        .thank-you-message-content {
            margin-top: 17px;
            font: 400 20px var(--font-secondary);
            color: var(--improve-modal-text);
            line-height: 180%;
            text-align: center;
        }
        
        .thank-you-message-content h2{
          font-family: var(--font-secondary);
        }
        .all-footer-information{
          width: 100% !important;
          height: fit-content;
        }
        .footer-wrapper_links-list{
           margin-block-start: 0em !important;
           width: 16% !important; 
           padding-inline-start: 18px !important;
        }
        .link-head{
          margin-bottom: 0px;
        }
        .footer-wrapper_branding{
          height: fit-content;
        }
        .footer-wrapper_branding-social{
          height: fit-content;
        }
       .advertise-block{
           display: block  !important;
          }
        @media only screen and (max-width:1340px) {
              .footer-wrapper_links-list{
              overflow-wrap: break-word;
          }
        }
        @media screen and (min-width: 991px)  {
              .all-footer-information{
                padding-left:15px;
                height: fit-content;
            }
              .footer-wrapper_branding-app{
                display: flex !important;
                margin: 22px 0 0 20px;
          }
        }
        @media only screen and (max-width:980px) {
          .footer-wrapper_branding-address{
               padding-top: 10px;
          }
        }
        @media (max-width: 750px) {
            .thank-you-message-content{
                font-size: 14px;
                line-height: 170%;
            }
        }
        @media only screen and (max-width:991px) {
          .footer-wrapper_branding-app-wrapper{
               display: block !important;
               margin: auto !important;
               max-height: none !important;
            }
        }
        @media (min-width: 991px) and (max-width: 1046px) {
          .footer-wrapper_branding-app-wrapper{
               display: block !important;
               max-height: none !important;
            }
          .footer-wrapper_branding-app{
            margin: 22px 0 0 6px !important;
            }
        }

        /* CSS variable meant to handle the dark and light mode icon for three 90 event in header courses dropdown */
        :root{
          --three90headericon : url('https://media.geeksforgeeks.org/auth-dashboard-uploads/three90daylogocompressed.svg');
          --three90headericonposition : 0px -40px;
          --three90leftbarimggrid : url('https://media.geeksforgeeks.org/auth-dashboard-uploads/three90leftbarspritecompressed.svg');
          --three90leftbarimgposition : -5px -55px;
          --three90leftbarbgcolour : #b3abd0;
        }

        body[data-dark-mode="true"]{
          --three90leftbarimgposition : -6px 1px;
          --three90headericonposition : 0px 0px;
          --three90leftbarbgcolour: #8c82b9;
        }

        .three90leftbarimg{
          margin-left: -5px;
          height: 30px;
          background-image: var(--three90leftbarimggrid);
          background-repeat: no-repeat;
          background-position: var(--three90leftbarimgposition);
          background-size: 212px;
        }

        .courseTabShimmer{
          position: absolute;
          height: 110%;
          width: 0;
          opacity: .7;
          -webkit-animation: courseShimmer 2s cubic-bezier(0,0,.07,.61) infinite;
          animation: courseShimmer 2s cubic-bezier(0,0,.07,.61) infinite;
          box-shadow: 0 0 25px 5px #dddcdc;
          -webkit-transform: rotate(90deg);
          transform: rotate(90deg);
          padding:0px !important;
          border:unset !important;
        }

        @keyframes courseShimmer{
          0% {
              left: 0;
          }
          55% {
              left: 100%;
          }
          99% {
              left: 110%;
          }
        }

</style>


	</div><!-- #main .wrapper -->
  <div id="displayModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
      <!-- <div class="upper-box">
        <h3 style="font: normal normal bold 18px/31px var(--font-primary); color: var(--color-black);">Improve your Coding Skills with Practice</h3>
        <button class="upper-box-btn"><a style="color: white !important;" href="https://practice.geeksforgeeks.org/explore?page=1&sortBy=submissions">Try It!</a></button>
      </div> -->
      <div class="modal-content">
        <div class="error-message"></div>
        <!-- <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" data-modal="displayModal">&times;</button>
          <h2 class="modal-title" id="dmTitle"></h2>
        </div> -->
        <div class="modal-body" id="dmBody">
            <div id="modal-dm-content"></div>
              <div class="modal-overlay" aria-hidden="true">
                <span class="loader__animation"></span>
              </div>
            <!-- body -->
        </div>
      </div>
    </div>
  </div>  
  <div id="displayModalBackdrop" class="backdrop"></div>
  <!-- Footer start -->
  <footer class="gfg-footer" id="gfg-footer">
      <div class="footer-wrapper">
          <div class="footer-wrapper_branding">
              <a class="footer-wrapper_branding-anchor" aria-label="GeeksforGeeks Logo" href="https://www.geeksforgeeks.org/">
                <img loading="lazy" style="height: 32px; width: 230px; max-width: fit-content;" class="footer-wrapper_branding-nlogo" src="./Quick Sort - GeeksforGeeks_files/gfgFooterLogo.png" alt="geeksforgeeks-footer-logo">
              </a>
              <div class="footer-wrapper_branding-address">
                  <div class="address_section">
                    <div class="address-icon-wrapper">
                      <i class="gfg-icon gfg-icon_pin"></i> 
                    <div class="address_div">
                     
                      <div class="address_name">Corporate &amp; Communications Address:</div>
                                            <div class="footer-address">
                      A-143, 7th Floor, Sovereign Corporate Tower, Sector- 136, Noida, Uttar Pradesh (201305)                    </div>
                    </div>
                  </div>
                     
                      <div class="address-icon-wrapper">
                      <i class="gfg-icon gfg-icon_pin"></i>  
                      <div class="address_div">
                        <div class="address_name">Registered Address:</div>
                        K 061, Tower K, Gulshan Vivante Apartment, Sector 137, Noida, Gautam Buddh Nagar, Uttar Pradesh, 201305                      </div>
                    </div>
                                      </div>
              </div>
              <div class="footer-wrapper_branding-app-wrapper" style="display:flex;
              flex-direction:row;
              gap:12px;
              align-items:inherit;
              max-height:53px;">
              <!-- Social Icons -->
              <div class="footer-wrapper_branding-social">
                  <a href="https://in.linkedin.com/company/geeksforgeeks" rel="noopener noreferrer" aria-label="GeeksforGeeks LinkedIn" target="_blank">
                      <div class="linkedin"></div>
                  </a>
                  <a href="https://www.instagram.com/geeks_for_geeks/" rel="noopener noreferrer" aria-label="GeeksforGeeks Instagram" target="_blank">
                      <div class="instagram"></div>
                  </a>
                  <a href="https://twitter.com/geeksforgeeks" rel="noopener noreferrer" aria-label="GeeksforGeeks Twitter" target="_blank">
                      <div class="twitter"></div>
                  </a>
                  <a href="https://www.facebook.com/geeksforgeeks.org/" rel="noopener noreferrer" aria-label="GeeksforGeeks Facebook" target="_blank">
                      <div class="facebook"></div>
                  </a>
                  <a href="https://www.youtube.com/geeksforgeeksvideos" rel="noopener noreferrer" aria-label="GeeksforGeeks YouTube" target="_blank">
                      <div class="youtube"></div>
                  </a>
              </div>
              <div class="footer-wrapper_branding-app">
                <a aria-label="GeeksforGeeks App Link" href="https://geeksforgeeksapp.page.link/gfg-app" target="_blank"><img src="./Quick Sort - GeeksforGeeks_files/googleplay.png" alt="GFG App on Play Store" id="gplay" loading="lazy"></a>
                <a aria-label="GeeksforGeeks App Link" href="https://geeksforgeeksapp.page.link/gfg-app" target="_blank"><img src="./Quick Sort - GeeksforGeeks_files/appstore.png" alt="GFG App on App Store" id="appstore" loading="lazy"></a>
              </div>
            </div>
          </div>
        <div class="all-footer-information">
          <div class="footer-wrapper_links" style="justify-content: space-between; text-align: -webkit-left;"><ul class="footer-wrapper_links-list"><li>Company</li><li><a href="https://www.geeksforgeeks.org/about/">About Us</a></li><li><a href="https://www.geeksforgeeks.org/legal/">Legal</a></li><li><a href="https://www.geeksforgeeks.org/legal/privacy-policy/">Privacy Policy</a></li><li><a href="https://www.geeksforgeeks.org/about/contact-us/">Contact Us</a></li><li><a href="https://www.geeksforgeeks.org/advertise-with-us/">Advertise with us</a></li><li><a href="https://www.geeksforgeeks.org/gfg-corporate-solution/">GFG Corporate Solution</a></li><li><a href="https://www.geeksforgeeks.org/campus-training-program/">Campus Training Program</a></li></ul><ul class="footer-wrapper_links-list"><li>Explore</li><li><a href="https://www.geeksforgeeks.org/problem-of-the-day">POTD</a></li><li><a href="https://practice.geeksforgeeks.org/events/rec/job-a-thon/">Job-A-Thon</a></li><li><a href="https://www.geeksforgeeks.org/category/blogs/?type=recent">Blogs</a></li><li><a href="https://www.geeksforgeeks.org/nation-skill-up/">Nation Skill Up</a></li></ul><ul class="footer-wrapper_links-list"><li>Tutorials</li><li><a href="https://www.geeksforgeeks.org/computer-science-fundamentals/programming-language-tutorials/">Programming Languages</a></li><li><a href="https://www.geeksforgeeks.org/dsa/dsa-tutorial-learn-data-structures-and-algorithms/">DSA</a></li><li><a href="https://www.geeksforgeeks.org/web-tech/web-technology/">Web Technology</a></li><li><a href="https://www.geeksforgeeks.org/machine-learning/ai-ml-and-data-science-tutorial-learn-ai-ml-and-data-science/">AI, ML &amp; Data Science</a></li><li><a href="https://www.geeksforgeeks.org/devops/devops-tutorial/">DevOps</a></li><li><a href="https://www.geeksforgeeks.org/gate/gate-exam-tutorial/">CS Core Subjects</a></li><li><a href="https://www.geeksforgeeks.org/aptitude/interview-corner/">Interview Preparation</a></li><li><a href="https://www.geeksforgeeks.org/websites-apps/software-and-tools-a-to-z-list/">Software and Tools</a></li></ul><ul class="footer-wrapper_links-list"><li>Courses</li><li><a href="https://www.geeksforgeeks.org/courses/category/machine-learning-data-science">IBM Certification</a></li><li><a href="https://www.geeksforgeeks.org/courses/category/dsa-placements">DSA and Placements</a></li><li><a href="https://www.geeksforgeeks.org/courses/category/development-testing">Web Development</a></li><li><a href="https://www.geeksforgeeks.org/courses/category/programming-languages">Programming Languages</a></li><li><a href="https://www.geeksforgeeks.org/courses/category/cloud-devops">DevOps &amp; Cloud</a></li><li><a href="https://www.geeksforgeeks.org/courses/category/gate">GATE</a></li><li><a href="https://www.geeksforgeeks.org/courses/category/trending-technologies/">Trending Technologies</a></li></ul><ul class="footer-wrapper_links-list"><li>Videos</li><li><a href="https://www.geeksforgeeks.org/videos/category/sde-sheet/">DSA</a></li><li><a href="https://www.geeksforgeeks.org/videos/category/python/">Python</a></li><li><a href="https://www.geeksforgeeks.org/videos/category/java-w6y5f4/">Java</a></li><li><a href="https://www.geeksforgeeks.org/videos/category/c/">C++</a></li><li><a href="https://www.geeksforgeeks.org/videos/category/web-development/">Web Development</a></li><li><a href="https://www.geeksforgeeks.org/videos/category/data-science/">Data Science</a></li><li><a href="https://www.geeksforgeeks.org/videos/category/cs-subjects/">CS Subjects</a></li></ul><ul class="footer-wrapper_links-list"><li>Preparation Corner</li><li><a href="https://www.geeksforgeeks.org/interview-prep/interview-corner/">Interview Corner</a></li><li><a href="https://www.geeksforgeeks.org/aptitude/aptitude-questions-and-answers/">Aptitude</a></li><li><a href="https://www.geeksforgeeks.org/aptitude/puzzles/">Puzzles</a></li><li><a href="https://www.geeksforgeeks.org/courses/gfg-160-series">GfG 160</a></li><li><a href="https://www.geeksforgeeks.org/system-design/system-design-tutorial/">System Design</a></li></ul></div>        </div> 
      </div>
            <!-- Jobs Fair 2024 related CSS changes -->

<style>
  :root{
    --home-jobs-section-jf-logo: url('https://media.geeksforgeeks.org/auth-dashboard-uploads/JobFair2024Logo.svg');
  }

  body[data-dark-mode="true"]
  {
    --home-jobs-section-jf-logo: url('https://media.geeksforgeeks.org/auth-dashboard-uploads/JobFair2024LogoDark.svg');
  }

  .hp_job_section_jf_logo, .job-a-thon-jf-sticky-header-logo{
    background: var(--home-jobs-section-jf-logo);
    height: 50px;
    background-repeat: no-repeat;
    width: 105px;
    background-size: 100px;
  }

  @keyframes challenge {
	0%{
		transform: scale(1);
	}
	50%{
		transform: scale(1.03);
	}
	100%{
		transform: scale(1);
	}
  }

  .job-a-thon-jf-sticky-header-logo{
    height: 45px;
  }

</style>

<!-- ---------------------------------- -->
      <div class="footer-strip">
          <div class="copyright">
              <a href="https://www.geeksforgeeks.org/" rel="noopener noreferrer" target="_blank">@GeeksforGeeks, Sanchhaya Education Private Limited</a><span>, <a href="https://www.geeksforgeeks.org/copyright-information/">All rights reserved</a></span>
          </div>
          <div class="social-links">
          </div>
      </div>
  </footer>
<!-- #page -->
<script type="text/javascript" src="./Quick Sort - GeeksforGeeks_files/wp-embed.min.js.descarga"></script>

<!-- Cookie Consent Div-->
<!-- <div class="cookie-consent hide-consent">
    <span class="cookie-text">
        We use cookies to ensure you have the best browsing experience on our website. By using our site, you
        acknowledge that you have read and understood our
        <a href="https://www.geeksforgeeks.org/cookie-policy/" target="_blank"><u>Cookie Policy</u></a> &
        <a href="https://www.geeksforgeeks.org/privacy-policy/" target="_blank"><u>Privacy Policy</u></a>
                &nbsp;Cookies are not collected in the GeeksforGeeks mobile applications.
            </span>
    <button class="consent-btn">
        Got It !
    </button>
</div> -->
<!-- Cookie Consent Div ends -->

<!--Light Box Div starts-->
<div class="lightbox-target">
   <img id="lightbox-image" src="https://www.geeksforgeeks.org/dsa/quick-sort-algorithm/" alt="Lightbox">
   <span class="lightbox-close"></span>
</div>
<!--Light Box Div ends-->

<!-- <link rel="stylesheet" href="https://use.typekit.net/mrg0hpc.css"/> -->
<link href="./Quick Sort - GeeksforGeeks_files/css2" rel="stylesheet">
<script>
  if(post_slug.includes('premium-plans-payment/') || post_slug.includes('premium-plans/')){
    $('.darkMode-wrap').remove();
    $('.toggle-darkMode').remove(); 
  }

function setGoogleRecaptcha() {
    var captchaSiteKey = '6LdMFNUZAAAAAIuRtzg0piOT-qXCbDF-iQiUi9KY';
    grecaptcha.ready(function() {
        grecaptcha.execute(captchaSiteKey).then(function(token) {
            document.getElementById('g-recaptcha-response-suggestion-form').value = token;
            suggestionCall();
        });
    });
}

</script>

        <div class="improve-modal--overlay" style="display: none;">
            <div class="improve-modal--improvement" status="locked">
                <div class="improve-modal--improve-header">
                    <div class="improve-header-fst-child">Improvement</div>
                    <div class="improve-header-sec-child">
                        <i class="gfg-icon improve-cross-icon"></i>
                    </div>
                </div>
                <div class="locked-status--impove-modal">
                    <div class="improve-modal--improve-content error-message"></div>                    
                    <div class="improve-modal--improve-bottom">
                        <button class="improve-bottom-btn" type="button">Suggest changes</button>
                    </div>
                </div>
                <div class="unlocked-status--improve-modal-content">
                  <div class="suggest-change_wrapper">
                    <div class="suggest-change-content_wrapper">
                      <div class="suggest-change">Suggest Changes</div>
                      <div class="suggest-changes-about">Help us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.</div>
                    </div>
                    <div class="suggest-change-icon_wrapper">
                      <img loading="lazy" class="suggest-change-icon" src="./Quick Sort - GeeksforGeeks_files/suggestChangeIcon.png" alt="geeksforgeeks-suggest-icon">
                    </div>
                  </div>
                  <div class="create-improvement_wrapper">
                    <div class="create-improvement-content_wrapper">
                      <div class="create-improvement">Create Improvement</div>
                      <div class="create-improvements-about">Enhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.</div>
                    </div>
                    <div class="create-improvement-icon_wrapper">
                    <img loading="lazy" class="create-improvement-icon" src="./Quick Sort - GeeksforGeeks_files/createImprovementIcon.png" alt="geeksforgeeks-improvement-icon">
                    </div>
                  </div>
                  <div class="error-status"></div>
                </div>
            </div>
            <div class="improve-modal--suggestion" style="display: none;">
                <!-- Header of improve-modal--improvement and improve-modal--suggestion have same CSS rule that's why I use same class name -->
                <div class="improve-modal--improve-header">
                  <div class="left-arrow-icon_suggest_wrapper">
                    <div class="left-arrow-icon_wrapper">
                      <i class="gfg-icon improve-left-arrow-icon"></i>
                    </div>
                    <div class="improve-header-fst-child">Suggest Changes</div>
                  </div>
                  <div class="improve-header-sec-child">
                        <i class="gfg-icon improve-cross-icon"></i>
                  </div>
                </div>
                <div class="suggestion-modal-section">
                        <div class="suggestion-section">min 4 words, max Words Limit:1000</div>
                        <div id="suggestion-section-textarea">
                        </div>
                        <input type="hidden" name="g-recaptcha-suggestion-response" id="g-recaptcha-response-suggestion-form">
                        <div class="thank-you-message" style="text-align: center; display:none">
                              <h2>Thank You!</h2>
                              <div class="thank-you-message-content">Your suggestions are valuable to us.</div>
                        </div>
                </div> 
                <!-- Button of improve-modal--improvement and improve-modal--suggestion have same CSS rule that's why I use same class name -->
                <div class="improve-modal--improve-bottom suggestion-btn">
                    <p><span id="suggestion-modal-alert" style="display: none;"></span></p>
                    <button class="suggest-bottom-btn" type="button"></button>
                </div>
            </div>
            <a href="https://www.geeksforgeeks.org/dsa/quick-sort-algorithm/#" style="visibility:hidden" class="create-improvement-redirection-to-write" target="_blank"></a>
        </div>
        <script>
            //code to add text editor on click in suggestion modal in improvements
            let suggestEditorInstance=null; //global variable to access editor instance
            let editorLoaded = false;
            $('.suggest-change_wrapper,.improve_dot_dropdown_inner_div, .locked-status--impove-modal .improve-bottom-btn ,#user-personal-note ').one('click',function() {
            //editor already loaded then return
            if(editorLoaded){
            return;
            }
            // if($('.spinner-loading-overlay:eq(0)').length){
            // $('.spinner-loading-overlay:eq(0)').remove();
            // }
            // $('body').append('<div class="spinner-loading-overlay"></div>');
            // $('.spinner-loading-overlay').show();
            let script = document.createElement('script');
            script.src = 'https://assets.geeksforgeeks.org/v2/editor-prod/static/js/bundle.min.js';
            script.defer = true
            document.head.appendChild(script);
            script.onload = function() {
            suggestionModalEditor() //to add editor in suggestion modal
            if(loginData && loginData.premiumConsent){
              personalNoteEditor() //to load editor in personal note
            }
            }
            script.onerror = function() {
            if($('.editorError').length){
            $('.editorError').remove();
            }
            var messageDiv = $('<div class="editorError"></div>').text('Editor not loaded due to some issues');
            $('#suggestion-section-textarea').append(messageDiv);
            $('.suggest-bottom-btn').hide();
            $('.suggestion-section').hide();
            editorLoaded = false;
            }
            });
            //suggestion modal editor
            function suggestionModalEditor(){
            // editor params
            const params = {
            data: undefined,
            plugins: ["BOLD", "ITALIC", "UNDERLINE", "PREBLOCK"],
            }
            // loading editor
            try {
            suggestEditorInstance = new GFGEditorWrapper("suggestion-section-textarea", params, { appNode: true })
            suggestEditorInstance._createEditor("")
            $('.spinner-loading-overlay:eq(0)').remove();
            editorLoaded = true;
            }
            catch (error) {
            $('.spinner-loading-overlay:eq(0)').remove();
            editorLoaded = false;
            }
            }
            //personal note editor
            function personalNoteEditor(){
            // editor params
            const params = {
            data: undefined,
            plugins: ["UNDO", "REDO", "BOLD", "ITALIC", "NUMBERED_LIST", "BULLET_LIST", "TEXTALIGNMENTDROPDOWN"],
            placeholderText: "Description to be......",
            }
            // loading editor
            try {
            let notesEditorInstance = new GFGEditorWrapper("pn-editor", params, { appNode: true })
            notesEditorInstance._createEditor(loginData&&loginData.user_personal_note?loginData.user_personal_note:"")
            $('.spinner-loading-overlay:eq(0)').remove();
            editorLoaded = true;
            }
            catch (error) {
            $('.spinner-loading-overlay:eq(0)').remove();
            editorLoaded = false;
            }
}

            var lockedCasesHtml = `<span class="improve-modal--improve-content-modified"></span><span>You can suggest the changes for now and it will be under 'My Suggestions' Tab on Write.</span><br><br><span>You will be notified via email once the article is available for improvement. Thank you for your valuable feedback!</span>`;
            var badgesRequiredHtml = `<span>It seems that you do not meet the eligibility criteria to create improvements for this article, as only users who have earned specific badges are permitted to do so.</span><br><br><span>However, you can still create improvements through the <a href="https://write.geeksforgeeks.org/pick-improvements/pick" target='_blank'>Pick for Improvement</a> section.</span>`;
            jQuery('.improve-header-sec-child').on('click', function(){
                jQuery('.improve-modal--overlay').hide();
                $('.improve-modal--suggestion').hide();
                jQuery('#suggestion-modal-alert').hide();
            });

            $('.suggest-change_wrapper, .locked-status--impove-modal .improve-bottom-btn').on('click',function(){ // when suggest changes option is clicked
              $('.ContentEditable__root').text("");
              $('.suggest-bottom-btn').html("Suggest changes");
              $('.thank-you-message').css("display","none");  
              $('.improve-modal--improvement').hide();
              $('.improve-modal--suggestion').show();
              $('#suggestion-section-textarea').show();
              jQuery('#suggestion-modal-alert').hide();
              if(suggestEditorInstance !== null){
                suggestEditorInstance.setEditorValue("");
                }
              $('.suggestion-section').css('display', 'block');
              jQuery('.suggest-bottom-btn').css("display","block");
            });

            $('.create-improvement_wrapper').on('click',function(){  // when create improvement option clicked then improvement reason will be shown
              if(loginData && loginData.isLoggedIn) {
                $('body').append('<div class="spinner-loading-overlay"></div>');
                $('.spinner-loading-overlay').show();
                jQuery.ajax({
                  url: writeApiUrl + 'create-improvement-post/?v=1',
                  type: "POST",
                  contentType: 'application/json; charset=utf-8',
                  dataType: 'json',
                  xhrFields: {
                    withCredentials: true
                  },
                  data: JSON.stringify({
                    gfg_id: post_id
                  }),
                  success:function(result) {
                    $('.spinner-loading-overlay:eq(0)').remove();
                    $('.improve-modal--overlay').hide();
                    $('.unlocked-status--improve-modal-content').css("display","none");
                    $('.create-improvement-redirection-to-write').attr('href',writeUrl + 'improve-post/' + `${result.id}` + '/', '_blank');
                    $('.create-improvement-redirection-to-write')[0].click();
                  },
                  error:function(e) {
                    showErrorMessage(e.responseJSON,e.status)
                  },
                });
              }
              else {
               if(loginData && !loginData.isLoggedIn) {
                   $('.improve-modal--overlay').hide();
                if ($('.header-main__wrapper').find('.header-main__signup.login-modal-btn').length) {
                $('.header-main__wrapper').find('.header-main__signup.login-modal-btn').click();
                 }
                return;
                }
              }
            });
            $('.left-arrow-icon_wrapper').on('click',function(){
              if($('.improve-modal--suggestion').is(":visible"))
              $('.improve-modal--suggestion').hide();
              else{
              }

              $('.improve-modal--improvement').show();
            });
            const showErrorMessage = (result,statusCode) => {
                if(!result)
                return;
                $('.spinner-loading-overlay:eq(0)').remove();
                if(statusCode == 403) {
                    $('.improve-modal--improve-content.error-message').html(result.message);
                    jQuery('.improve-modal--overlay').show();
                    jQuery('.improve-modal--improvement').show();
                    $('.locked-status--impove-modal').css("display","block");
                    $('.unlocked-status--improve-modal-content').css("display","none");
                    $('.improve-modal--improvement').attr("status","locked");
                    return;
                }
                            }
            function suggestionCall() {   
                var editorValue = suggestEditorInstance.getValue();
                var suggest_val = $(".ContentEditable__root").find("[data-lexical-text='true']").map(function() {
                                    return $(this).text().trim();
                                    }).get().join(' ');
                suggest_val = suggest_val.replace(/\s+/g, ' ').trim();     
                var array_String= suggest_val.split(" ") //array of words
                var gCaptchaToken = $("#g-recaptcha-response-suggestion-form").val();
                var error_msg = false;
                if(suggest_val != "" && array_String.length >=4){
                    if(editorValue.length <= 2000){
                        var payload = {
                                    "gfg_post_id" : `${post_id}`,
                                    "suggestion" : `${editorValue}`,
                                }
                        if(!loginData || !loginData.isLoggedIn)                  // User is not logged in
                        payload["g-recaptcha-token"] = gCaptchaToken
                        jQuery.ajax({
                            type:'post',
                            url:  "https://apiwrite.geeksforgeeks.org/suggestions/auth/create/",
                            xhrFields: {
                                withCredentials: true
                            },
                            crossDomain: true,
                            contentType:'application/json',
                            data: JSON.stringify(payload),
                            success:function(data) {
                                if(!loginData || !loginData.isLoggedIn) {
                                  grecaptcha.reset();
                                }
                                jQuery('.spinner-loading-overlay:eq(0)').remove();
                                jQuery('.suggest-bottom-btn').css("display","none");
                                $('#suggestion-section-textarea').hide()
                                $('.thank-you-message').css('display', 'flex');
                                $('.suggestion-section').css('display', 'none');
                                jQuery('#suggestion-modal-alert').hide();
                            },
                            error:function(data) {
                                if(!loginData || !loginData.isLoggedIn) {
                                  grecaptcha.reset();
                                }
                                jQuery('.spinner-loading-overlay:eq(0)').remove();
                                jQuery('#suggestion-modal-alert').html("Something went wrong.");
                                jQuery('#suggestion-modal-alert').show();
                                error_msg = true;
                            }
                        });
                    }
                    else{
                        jQuery('.spinner-loading-overlay:eq(0)').remove();
                        jQuery('#suggestion-modal-alert').html("Minimum 4 Words and Maximum Words limit is 1000.");
                        jQuery('#suggestion-modal-alert').show();
                        jQuery('.ContentEditable__root').focus();
                        error_msg = true;
                    }
                }
                else{
                    jQuery('.spinner-loading-overlay:eq(0)').remove();
                    jQuery('#suggestion-modal-alert').html("Enter atleast four words !");
                    jQuery('#suggestion-modal-alert').show();
                    jQuery('.ContentEditable__root').focus();
                    error_msg = true;
                }
                if(error_msg){
                    setTimeout(() => {
                        jQuery('.ContentEditable__root').focus();
                        jQuery('#suggestion-modal-alert').hide();
                    }, 3000);
                }
            }
            
            document.querySelector('.suggest-bottom-btn').addEventListener('click', function(){
              jQuery('body').append('<div class="spinner-loading-overlay"></div>');
              jQuery('.spinner-loading-overlay').show();
              if(loginData && loginData.isLoggedIn) {
                 suggestionCall();
                 return;
              }
              // script for grecaptcha loaded in loginmodal.html and call function to set the token
              setGoogleRecaptcha();
            });
            $('.improvement-bottom-btn.create-improvement-btn').click(function() {  //create improvement button is clicked
              $('body').append('<div class="spinner-loading-overlay"></div>');
              $('.spinner-loading-overlay').show();
              // send this option via create-improvement-post api
              jQuery.ajax({
                url: writeApiUrl + 'create-improvement-post/?v=1',
                type: "POST",
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                xhrFields: {
                  withCredentials: true
                },
                data: JSON.stringify({
                  gfg_id: post_id
                }),
                success:function(result) {
                  $('.spinner-loading-overlay:eq(0)').remove();
                  $('.improve-modal--overlay').hide();
                  $('.create-improvement-redirection-to-write').attr('href',writeUrl + 'improve-post/' + `${result.id}` + '/', '_blank');
                  $('.create-improvement-redirection-to-write')[0].click();
                },
                error:function(e) {
                  showErrorMessage(e.responseJSON,e.status);
                },
              });
            });
        </script>
    <script>
var AdblockPlus = new function() {
     this.detect = function(px, callback) {
         var detected = false;
         var checksRemain = 2;
         var error1 = false;
         var error2 = false;
         if (typeof callback != "function") return;
         px += "?ch=*&rn=*";

         function beforeCheck(callback, timeout) {
             if (checksRemain == 0 || timeout > 1E3) callback(checksRemain == 0 && detected);
             else setTimeout(function() {
                 beforeCheck(callback, timeout * 2)
             }, timeout * 2)
         }

         function checkImages() {
             if (--checksRemain) return;
             detected = !error1 && error2
         }
         var random = Math.random() * 11;
         var img1 = new Image;
         img1.onload = checkImages;
         img1.onerror = function() {
             error1 = true;
             checkImages()
         };
         img1.src = px.replace(/\*/, 1).replace(/\*/, random);
         var img2 = new Image;
         img2.onload = checkImages;
         img2.onerror = function() {
             error2 = true;
             checkImages()
         };
         img2.src = px.replace(/\*/, 2).replace(/\*/, random);
         beforeCheck(callback, 250)
     }
 };

/*
AdblockPlus.detect("https://cdnads.geeksforgeeks.org/res/px.gif", function(abp){
    window.googletag = window.googletag || {cmd: []};
    window.abp=abp;
    var elms = [...document.querySelectorAll('div[id^=_GFG_ABP_]')];
    const units=elms.map(elem=>elem.id)
    if(abp) {
        for(let curr_unit of units) {
            const iframe = document.createElement('iframe');
            iframe.setAttribute('src',"https://aa.geeksforgeeks.org/iframe.html?code="+curr_unit.substr(1))
            const elem = document.getElementById(curr_unit)
            const div = document.createElement('div');
            div.setAttribute('id',curr_unit.substr(1))
            let sizes = curr_unit.split("_");
            sizes = sizes.filter(val => val.includes('x'));
            let [width, height] = sizes[0].split("x");
            iframe.style.width = `${+width+20}px`
            iframe.style.height = `${+height+20}px`
            if(elem) {
                elem.appendChild(iframe);
            }
        }
        var gfgAdDivs = [...document.querySelectorAll('div[id^=GFG_AD_]')];
        gfgAdDivs.forEach(gfgDiv => document.getElementById(gfgDiv.id).removeAttribute("style"));
        jQuery('#secondary .widget_text:last-child').css({"position": "unset"});
    }
});*/
    AdblockPlus.detect("https://cdnads.geeksforgeeks.org/res/px.gif", function(abp){
    window.googletag = window.googletag || {cmd: []};
    window.abp=abp;
    var elms = [...document.querySelectorAll('div[id^=_GFG_ABP_]')];
    //const units=elms.map(elem=>elem.id)
    const units = elms
      .filter(elem => !(window.innerWidth < 1500 && elem.id === "_GFG_ABP_Incontent_728x90"))
      .map(elem => elem.id);
    if(abp) {
        isAdBlockerPresent = true;
        for(let curr_unit of units) {
            const iframe = document.createElement('iframe');
            iframe.addEventListener("load", () => {
              iframe.contentWindow.postMessage(JSON.stringify({host: window.location.host,category: window.arrPostCatName,parentWidth: window.innerWidth}),'https://aa.geeksforgeeks.org');
            });
            iframe.setAttribute('src',"https://aa.geeksforgeeks.org/iframe.html?code="+curr_unit.substr(1))
            const elem = document.getElementById(curr_unit)
            const div = document.createElement('div');
            div.setAttribute('id',curr_unit.substr(1))
            let sizes = curr_unit.split("_");
            sizes = sizes.filter(val => val.includes('x'));
            let [width, height] = sizes[0].split("x");
            iframe.style.width = `${+width+20}px`
            iframe.style.height = `${+height+20}px`
            if(elem) {
                elem.appendChild(iframe);
            }
        }
        var gfgAdDivs = [...document.querySelectorAll('div[id^=GFG_AD_]')];
        gfgAdDivs.forEach(gfgDiv => document.getElementById(gfgDiv.id).removeAttribute("style"));
        jQuery('#secondary .widget_text:last-child').css({"position": "unset"});
    }
    else{
      try {
        var isAdblockEnabled = t =>
            fetch(
                new Request('https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js', {
                    method: 'HEAD',
                    mode: 'no-cors'
                })
            ).catch(t);
          isAdblockEnabled(() => {
            // here goes modal pop-up code
            isAdBlockerPresent = true;
          });
      } catch (err) {console.error(err);}
    }
});

  function closeAdBlockPopupModal(){
    const modal = document.getElementById("adBlockerModal");
    $('body').removeClass('body-for-ad-blocker');
    $('#adBlockerModal').remove()
    localStorage.setItem('gfgAdBlockPopup',new Date())
  }
  function showAdblockerModal(){
    let randomNumberForButtonText = Math.round(Math.random()); 
    let currTime = new Date();
    let lastTime = new Date(localStorage.getItem('gfgAdBlockPopup'));
    if(((currTime-lastTime)/(1000*60*60))<1)
    {
      return;
    }
    const adBlockerModal = `<div id="adBlockerModal" class="ad-blocker-modal">
      <div id="ad-blocker-modal-overlay">
        <div id="ad-blocker-outer-div">
          <div id="ad-blocker-div">
          <p id="ad-blocker-div-warning" style="margin-bottom: 30px;">It seems that you are using an ad blocker.<br><span style="font-size: 22px;font-weight: normal;">Please disable it to support us!</span></p>
              <div id="ad-blocker-div-btns">
                  <button id="ad-blocker-div-button1" onclick="handleAdBlockerClick('disabled')">
                      I disabled my ad blocker
                  </button>
                  <a href="https://www.geeksforgeeks.org/geeksforgeeks-premium-subscription" target="_blank">
                      <button
                          id="ad-blocker-div-button2"
                          style="
                              background: linear-gradient(45deg, #f0bd36, #bf873f);
                              border: 1px solid transparent;
                              color: white;
                          "
                      >
                          ${randomNumberForButtonText === 1 ? "Go Ad-Free with Premium" : "Upgrade for No Ads"}
                      </button>
                  </a>
              </div>
              <div id="ad-blocker-div-continue-premium-promo-text">
                  "For an ad-free experience and exclusive features, subscribe to our Premium Plan!"<br>
              </div>
              <div id="ad-blocker-div-continue-btn-div">
                  <a id="ad-blocker-div-continue-btn" href="#" onclick="closeAdBlockPopupModal()">Continue without supporting</a>
              </div>
          </div>
        </div>
      </div>
    </div>`;
    $('body').append(adBlockerModal);
    $('body').addClass('body-for-ad-blocker');
    const modal = document.getElementById("adBlockerModal");
    modal.style.display = "block";
  }
  function handleAdBlockerClick(type){
      if(type == 'disabled'){
        window.location.reload();
      }
      else if(type == 'info'){
        document.getElementById("ad-blocker-div").style.display = "none";
        document.getElementById("ad-blocker-info-div").style.display = "flex";
        handleAdBlockerIconClick(0);
      }
  }
  var lastSelected= null;
  //Mapping of name and video URL with the index.
  const adBlockerVideoMap = [
    ['Ad Block Plus','https://media.geeksforgeeks.org/auth-dashboard-uploads/abp-blocker-min.mp4'],
    ['Ad Block','https://media.geeksforgeeks.org/auth-dashboard-uploads/Ad-block-min.mp4'],
    ['uBlock Origin','https://media.geeksforgeeks.org/auth-dashboard-uploads/ub-blocke-min.mp4'],
    ['uBlock','https://media.geeksforgeeks.org/auth-dashboard-uploads/U-blocker-min.mp4'],
  ]
  function handleAdBlockerIconClick(currSelected){
    const videocontainer = document.getElementById('ad-blocker-info-div-gif');
    const videosource = document.getElementById('ad-blocker-info-div-gif-src');
    if(lastSelected != null){
      document.getElementById("ad-blocker-info-div-icons-"+lastSelected).style.backgroundColor = "white";  
      document.getElementById("ad-blocker-info-div-icons-"+lastSelected).style.borderColor = "#D6D6D6";
    }
    document.getElementById("ad-blocker-info-div-icons-"+currSelected).style.backgroundColor = "#D9D9D9";
    document.getElementById("ad-blocker-info-div-icons-"+currSelected).style.borderColor = "#848484";
    document.getElementById('ad-blocker-info-div-name-span').innerHTML = adBlockerVideoMap[currSelected][0]
    videocontainer.pause();
    videosource.setAttribute('src', adBlockerVideoMap[currSelected][1]);
    videocontainer.load();
    videocontainer.play();
    lastSelected = currSelected;
  }
</script>
<!-- <script async src="https://www.googleoptimize.com/optimize.js?id=OPT-5PGZ8MN"></script> -->

<style>
/* Temporary CSS for Three90 pop up modal (START)*/
    .three90popup__container {
      width: 100vw;
      height: 100vh; 
      position: fixed;
      top:0px;
      background: var(--job-tab-faded-background);
      z-index: 1024;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .three90modal__wrapper{
      background-color: white;
      max-width: 350px;
      display: flex;
      flex-direction: column;
      border-radius: 10px;
      overflow: hidden;

    }
    .three90modal__message-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      font-family: var(--font-primary);
    }
    .three90modal__subheading {
      margin-top: 20px;
      font-size: 22px;
      font-weight: 600;
    }
    .three90modal__text-message {
      margin-top: 20px;
      font-size: 15px;
      font-weight: 400;
      text-align: center;
      padding: 0 5px;
    }
    .three90__modal__button-wrapper {
      width: 100%;
      padding: 20px 0px;
      display: flex;
      justify-content: space-evenly;
    }
    .three90__modal__button-wrapper > button {
      width: 105px;
      height: 35px;
      border-radius: 13px;
      border:none;
      font-weight: 600;
      cursor: pointer;
    } 
    #three90__modal-close-btn:hover {
      background-color: #cacbcd;
    }
    #three90__modal-explore-btn {
      background-color: #0a0727;
      color: white
    }

    @media screen and (max-width: 441px) {
      .three90modal__wrapper {
        max-width: 300px;
      }
    }

  /* Temporary CSS for Three90 pop up modal (END)*/
</style>

<script type="text/javascript">
    const coursePromotionCities = JSON.parse(`{"NCR":{"LOCATIONS":["Noida","Greater Noida","Ghaziabad","Faridabad","Delhi","New Delhi"],"COURSES":[{"name":"Data Science Course","url":"https:\/\/www.geeksforgeeks.org\/courses\/data-science-classroom-program?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"Data Analytics Course","url":"https:\/\/www.geeksforgeeks.org\/courses\/complete-data-analytics-program?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"Complete Backend Development Course","url":"https:\/\/www.geeksforgeeks.org\/courses\/complete-java-backend-development-program?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"DSA for Interview Preparation","url":"https:\/\/www.geeksforgeeks.org\/courses\/dsa-interview-preparation-classroom?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"MERN Full Stack Web Development Course","url":"https:\/\/www.geeksforgeeks.org\/courses\/mern-full-stack-development-classroom?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"All Courses","url":"https:\/\/www.geeksforgeeks.org\/courses\/offline-courses?city=noida?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"}]},"NON_NCR":{"Bengaluru":[{"name":"Data Science Course","url":"https:\/\/www.geeksforgeeks.org\/courses\/data-science-classroom-program?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"Complete Data Analytics Program","url":"https:\/\/www.geeksforgeeks.org\/courses\/complete-data-analytics-program?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"Complete Backend Development Course","url":"https:\/\/www.geeksforgeeks.org\/courses\/complete-java-backend-development-program?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"DSA For Interview Preparation","url":"https:\/\/www.geeksforgeeks.org\/courses\/dsa-interview-preparation-classroom?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"MERN Full Stack Web Development Course","url":"https:\/\/www.geeksforgeeks.org\/courses\/mern-full-stack-development-classroom?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"All Courses","url":"https:\/\/www.geeksforgeeks.org\/courses\/offline-courses?city=bengaluru?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"}],"Pune":[{"name":"Data Analytics Course","url":"https:\/\/www.geeksforgeeks.org\/courses\/complete-data-analytics-program?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"DSA For Interview Preparation","url":"https:\/\/www.geeksforgeeks.org\/courses\/dsa-interview-preparation-classroom?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"MERN Full Stack Web Development Course","url":"https:\/\/www.geeksforgeeks.org\/courses\/mern-full-stack-development-classroom?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"All Courses","url":"https:\/\/www.geeksforgeeks.org\/courses\/offline-courses?city=pune?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"}],"Hyderabad":[{"name":"Complete Data Analytics Program","url":"https:\/\/www.geeksforgeeks.org\/courses\/complete-data-analytics-program?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"Complete Backend Development Course","url":"https:\/\/www.geeksforgeeks.org\/courses\/complete-java-backend-development-program?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"DSA for Interview Preparation","url":"https:\/\/www.geeksforgeeks.org\/courses\/dsa-interview-preparation-classroom?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"MERN Full Stack Web Development Course","url":"https:\/\/www.geeksforgeeks.org\/courses\/mern-full-stack-development-classroom?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"},{"name":"All Courses","url":"https:\/\/www.geeksforgeeks.org\/courses\/offline-courses?city=hyderabad?itm_source=geeksforgeeks&itm_medium=main_header&itm_campaign=courses"}]}}`);
    const offlineCourseTermMapper = JSON.parse(`{"ALL_TERMIDS":["2058","6263","2628","1745","1789","2601","2057","5037","2971","2023","2162","2795"],"COURSE_TERMID_MAP":{"JAVA":["2058"],"DATA_ANALYTICS":["1745","1789","2601","2057","5037","2971","2023","2162","2795"],"DSA":["6263"],"MERN":["2628"]}}`);
</script>

<script async="" src="./Quick Sort - GeeksforGeeks_files/event-promotion.min.js.descarga"></script>
  
<!-- gfg tabs compatablity bundled js -->

<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-KDVRCT5');</script>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async="" src="./Quick Sort - GeeksforGeeks_files/js"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
//  gtag('config', 'AW-474915276');
  gtag('config', 'G-DWCCJLKX3X');
  gtag('config', 'AW-796001856');
</script>

<!-- fancybar ad code start -->
<div id="GFG_AD_Desktop_Stickyunit_1x1" style="display: none; justify-content: center; align-items: center; flex-wrap: wrap; position: fixed; bottom: 0px; z-index: 1024; gap: 1.5em; height: 90px; width: 100%; background: rgb(202, 202, 202);"><div id="GFG_AD_Desktop_Stickyunit_1x1_1" style="height: 90px;"></div><div id="GFG_AD_Desktop_Stickyunit_1x1_2" style="height: 90px;"></div></div>
<!-- fancybar ad code ends -->
<!-- <div id="GFG_AD_gfg_mobile_320x50"></div> -->
<style>
    :root {
        --com-extra-icons-mobile-image: url(https://media.geeksforgeeks.org/auth-dashboard-uploads/Com-Extra-Icons13.svg);
        --write-experience-card-1: #ECF5F5;
        --write-experience-card-icon-1: #21898C;
        --write-experience-card-2: #EAF2F7;
        --write-experience-card-icon-2: #3079AC;
        --write-experience-card-3: #FDEFE6;
        --write-experience-card-icon-3: #F5A572;
        --write-experience-card-4: #F1F8F5;
        --write-experience-card-icon-4: #91C4AD;
        --write-experience-card-5: #EEE7FF;
        --write-experience-card-icon-5: #8B72C9;
        --write-experience-card-6: #F2F8E6;
        --write-experience-card-icon-6: #78C57F;
        --editor-button-text-color: #6E6E73;
        --write-modal-background: #fefefe;
        --experience-sidebar: #000;
        --left-bar-background: #FFFFFF;
        --write-redirect-container:#EAF2F7;
        --write-redirect-container-hover:#d6e7f2;
        
    }

    /* Dark Mode */
    body[data-dark-mode="true"] {
        --write-modal-background: #161c23;
        --experience-sidebar: #000;
        --left-bar-background: #F0F3F5;
    }

    .popup-main {
        padding: 20px 18px 20px 18px;
        border-radius: 8px;
    }

    .popup-main .popup-heading {
        display: flex;
        align-items: center;
        color: #E9E9EA;
        margin-bottom: 10px;
        justify-content: space-between;
    }

    .popup-main .close-icon {
        background-image: var(--com-extra-icons-mobile-image);background-position: -15px -1651px;height: 22px;width: 22px;transform: scale(1);
        margin-bottom: 12px;
        cursor: pointer;
    }

    .popup-main .experience-card {
        color: #000;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 16px;
        /* margin-bottom:10px; */
    }

    .popup-main a:hover,
    .popup-main a:active,
    .popup-main a:visited {
        color: inherit;
        text-decoration: none;
    }

    .popup-main .exp-card1,
    .popup-main .exp-card2,
    .popup-main .exp-card3,
    .popup-main .exp-card4,
    .popup-main .exp-card5,
    .popup-main .exp-card6 {
        display: flex;
        align-items: center;
        border-radius: 10px;
        cursor: pointer;
    }

    .popup-main .exp-card1 .icon1,
    .popup-main .exp-card2 .icon2,
    .popup-main .exp-card3 .icon3,
    .popup-main .exp-card4 .icon4,
    .popup-main .exp-card5 .icon5,
    .popup-main .exp-card6 .icon6 {
        width: 80px;
        height: 80px;
        border-radius: 10px 0px 0px 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: var(--write-experience-card-icon-1);
    }

    .popup-main .exp-card1 .icon1,
    .popup-main .exp-card2 .icon2,
    .popup-main .exp-card3 .icon3,
    .popup-main .exp-card4 .icon4,
    .popup-main .exp-card5 .icon5,
    .popup-main .exp-card6 .icon6 {
        width: 80px;
        height: 80px;
        border-radius: 10px 0px 0px 10px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .popup-main .exp-card1 .icon1 {
        background: var(--write-experience-card-icon-1);
    }

    .popup-main .exp-card2 .icon2 {
        background: var(--write-experience-card-icon-2);
    }

    .popup-main .exp-card3 .icon3 {
        background: var(--write-experience-card-icon-3);
    }

    .popup-main .exp-card4 .icon4 {
        background: var(--write-experience-card-icon-4);
    }

    .popup-main .exp-card5 .icon5 {
        background: var(--write-experience-card-icon-5);
    }

    .popup-main .exp-card6 .icon6 {
        background: var(--write-experience-card-icon-6);
    }

    .popup-main .exp-card6 .icon6-image {
        background-image: url(https://media.geeksforgeeks.org/auth-dashboard-uploads/compass.svg);
        width: 46px;
        height: 30px;
        background-size: 30px;
        background-repeat: no-repeat;
        background-position: center;
    }

    .popup-main .exp-card1 .icon1-image {
        background-image: var(--com-extra-icons-mobile-image);
        width: 46px;
        height: 28px;
        background-position: -4px -812px;
    }

    .popup-main .exp-card2 .icon2-image {
        background-image: var(--com-extra-icons-mobile-image);
        width: 46px;
        height: 28px;
        background-position: -4px -888px;
    }

    .popup-main .exp-card3 .icon3-image {
        background-image: var(--com-extra-icons-mobile-image);
        width: 46px;
        height: 28px;
        background-position: -4px -848px;
    }

    .popup-main .exp-card4 .icon4-image {
        background-image: url(https://media.geeksforgeeks.org/auth-dashboard-uploads/competitive.svg);
        width: 46px;
        height: 30px;
        background-size: 30px;
        background-repeat: no-repeat;
        background-position: center;
    }

    .popup-main .exp-card5 .icon5-image {
        background-image: var(--com-extra-icons-mobile-image);
        width: 46px;
        height: 33px;
        background-position: -4px -1217px;
    }


    .popup-main .exp-card1 .exp-card1-text,
    .popup-main .exp-card2 .exp-card2-text,
    .popup-main .exp-card3 .exp-card3-text,
    .popup-main .exp-card4 .exp-card4-text,
    .popup-main .exp-card5 .exp-card5-text,
    .popup-main .exp-card6 .exp-card6-text {
        display: flex;
        align-items: center;
        border-radius: 0px 10px 10px 0px;
        height: 80px;
        width: calc(100% - 80px);
    }

    .popup-main .exp-card1 {
        justify-content: flex-start;
        background: var(--write-experience-card-1);
    }

    .popup-main .exp-card2 {
        justify-content: flex-start;
        background: var(--write-experience-card-2);
    }

    .popup-main .exp-card3 {
        justify-content: flex-start;
        background: var(--write-experience-card-3);
    }

    .popup-main .exp-card4 {
        justify-content: flex-start;
        background: var(--write-experience-card-4);
    }

    .popup-main .exp-card5 {
        justify-content: flex-start;
        background: var(--write-experience-card-5);
    }

    .popup-main .exp-card6 {
        justify-content: flex-start;
        background: var(--write-experience-card-6);
    }

    .popup-main span {
        font-family: var(--font-primary);
        font-size: 14px;
        font-style: normal;
        font-weight: 500;
        line-height: normal;
        padding-left: 5px;
        padding-right: 5px;
    }

    #popup {
        display: none;
        background-color: var(--write-modal-background);
        padding: 20px;
        text-align: center;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1026;
        width: min(650px, calc(100% - 20px));
    }
    .link-container-write{
        display:flex;
        flex-direction:column;
    }
    .link-container-write > a {
        margin:7px 0px;
    }
    .phrase__container{
        color:var(--color-gfg);
        border-radius: 6px;
        width: 100%;
        background-color:var(--write-redirect-container);
        padding: 15px;
        text-align: justify;
        font-size:14px;
    }
    .phrase__container:hover {
        color:var(--color-gfg) !important;
        background-color:var(--write-redirect-container-hover);
    }
</style>
<div class="popup-container">
        <div id="popup" accesskey="" class="popup-main">
            <div class="popup-heading">
                <h2>What kind of Experience do you want to share?</h2>
                <div class="close-icon share-experience-modal-close"></div>
            </div>
            <!-- <span class="description"style="color: #BEBEC2;">Tell us your type of experiences which can help other fellow Geeks for their future events and preparations.</span> -->
            <div class="experience-card">
                <a class="exp-card5" href="https://write.geeksforgeeks.org/posts-new?cid=e8fc46fe-75e7-4a4b-be3c-0c862d655ed0" target="_blank">
                    <div class="icon5">
                        <div class="icon5-image"></div>
                    </div>
                    <div class="exp-card5-text">
                        <span style="color: #000;">Interview Experiences</span>
                    </div>
                </a>
                <a class="exp-card1" href="https://write.geeksforgeeks.org/posts-new?cid=82536bdb-84e6-4661-87c3-e77c3ac04ede" target="_blank">
                    <div class="icon1">
                        <div class="icon1-image"></div>
                    </div>
                    <div class="exp-card1-text">
                        <span style="color: #000;">Admission Experiences</span>
                    </div>
                </a>
                <a class="exp-card6" href="https://write.geeksforgeeks.org/posts-new?cid=5219b0b2-7671-40a0-9bda-503e28a61c31" target="_blank">
                    <div class="icon6">
                        <div class="icon6-image"></div>
                    </div>
                    <div class="exp-card6-text">
                        <span style="color: #000;">Career Journeys</span>
                    </div>
                </a>
                <a class="exp-card2" href="https://write.geeksforgeeks.org/posts-new?cid=22ae3354-15b6-4dd4-a5b4-5c7a105b8a8f" target="_blank">
                    <div class="icon2">
                        <div class="icon2-image"></div>
                    </div>
                    <div class="exp-card2-text">
                        <span style="color: #000;">Work Experiences</span>
                    </div>
                </a>
                <a class="exp-card3" href="https://write.geeksforgeeks.org/posts-new?cid=c5e1ac90-9490-440a-a5fa-6180c87ab8ae" target="_blank">
                    <div class="icon3">
                        <div class="icon3-image"></div>
                    </div>
                    <div class="exp-card3-text">
                        <span style="color: #000;">Campus Experiences</span>
                    </div>
                </a>
                <a class="exp-card4" href="https://write.geeksforgeeks.org/posts-new?cid=5ebb8fe9-b980-4891-af07-f2d62a9735f2" target="_blank">
                    <div class="icon4">
                        <div class="icon4-image"></div>
                    </div>
                    <div class="exp-card4-text">
                        <span style="color: #000;">Competitive Exam Experiences</span>
                    </div>
                </a>
            </div>
        <!--    <div class="link-container-write">
                <a href="https://write.geeksforgeeks.org/pick-article?taxonomy=10261&page=1">
                    <div role="span" class="phrase__container">
                        Can't choose a topic to write? click here for suggested topics
                    </div>
                </a>
                <a href="https://write.geeksforgeeks.org/posts-new">
                    <div role="span" class="phrase__container">
                       Write and publish your own Article
                    </div>
                </a>
            </div> -->
        </div>
        <div id="overlay" onclick="toggleExperiencePopup()" style="display: block;min-height: 100vh;min-width: 100vw;position: fixed;top: 0;bottom: 0;right: 0;left: 0;display: none;justify-content: center;align-items: center;background: rgba(0,0,0,.702);z-index: 1025 !important;backdrop-filter: blur(4px); -webkit-backdrop-filter: blur(4px);word-break: keep-all;"></div>
    </div>

    <script>
        $('.share-experience-modal').click(function(e){
            e.preventDefault();
            var link = $(this).attr('href');
            toggleExperiencePopup(link);
        });
        function toggleExperiencePopup(link) {
            var popup = document.getElementById("popup");
            var overlay = document.getElementById("overlay");

            if (window.innerWidth < 992) {
                window.location.href = link;
            } else {
                popup.style.display = (popup.style.display === "block") ? "none" : "block";
                overlay.style.display = (overlay.style.display === "block") ? "none" : "block";
            }
        }
        $('.share-experience-modal-close').click(function(e){
            var popup = document.getElementById("popup");
            popup.style.display = 'none';
            var overlay = document.getElementById("overlay");
            overlay.style.display = 'none';
        });
</script>
<!-- Chat bot is being shown for these category articles (8 -> linked-list 9172 -> AI-ML-DS, 1789 -> python  4667 -> math)  -->









<iframe marginwidth="0" marginheight="0" scrolling="no" frameborder="0" id="10c629d0e57b6d8" width="0" height="0" src="./Quick Sort - GeeksforGeeks_files/saved_resource(2).html" name="__pb_locator__" style="display: none; height: 0px; width: 0px; border: 0px;"></iframe><div class="modal-container">


    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Modal | GeeksforGeeks</title>

    <style>
        .login-modal-div {
            display: none;
        }
    </style>

    <link rel="stylesheet" href="./Quick Sort - GeeksforGeeks_files/login-modal-revamp.min.css">
    <script src="./Quick Sort - GeeksforGeeks_files/api.js.descarga" async="" defer=""></script>
    <!-- Below script for invisible recaptcha in suggest changes -->
    <script src="./Quick Sort - GeeksforGeeks_files/api(1).js.descarga" async="" defer=""></script>  
    <link rel="stylesheet" href="./Quick Sort - GeeksforGeeks_files/typeahead.min.css">



    <div id="googleApi"></div>
    <div class="spinner-loading-overlay"></div>
    <div class="login-modal-div">
        <div class="modal-content white-bg">
            <div class="close-div"><span class="close"></span></div>
            <div class="modal-header">
                <div class="login-div">
                    <div style="border-top: 0px;">
                        <div class="modalTitle">
                        <h1 class="modalTitleValue">Log in</h1>
                        <p>New user ?<button class="registerBtn">Register Now</button></p>
                        </div>
                        <div class="socialSignIn">
                        <div class="socialContainer">
                            <button id="glogin" class="loginBtn btnGoogle socialAuthBtn mainBtn"><span><span class="ibtnGoogle"></span><span>Continue with Google</span></span></button>
                            <div class="socialBtnWrapper"><button id="fblogin" class="loginBtn btnFacebook socialAuthBtn roundedBtn"><span><span></span></span></button><button id="inlogin" class="loginBtn btnLinkedin socialAuthBtn roundedBtn"><span><span></span></span></button><button id="gitlogin" class="loginBtn btnGithub socialAuthBtn roundedBtn"><span><span></span></span></button><button id="openpasslogin" class="loginBtn btnOpenpass socialAuthBtn roundedBtn"><span><span></span></span></button></div>
                        </div>
                        <div class="socialDivider" style="margin-top: 20px;"><span>or</span></div>
                        </div>
                        <div class="content-login">
                            <form method="POST" class="login-form signin-form" id="Login">
                                <input type="hidden" name="reqType" value="Login">
                                <div class="modal-form-group">
                                <div class="extra"></div>
                                </div>
                                <label class="loginInputLabel" style="display: flex; color: rgb(14, 14, 18); font-weight: 500; font-size: 16px; font-family: &#39;Source Sans 3&#39;; margin-bottom: 8px; cursor: default;">
                                    Username or Email
                                </label>
                                <div class="modal-form-group">
                                <input name="user" id="luser" required="required" type="text" class="modal-form-input" placeholder="Username or email">
                                </div>
                                <label class="loginInputLabel" style="display: flex; color: rgb(14, 14, 18); font-weight: 500; font-size: 16px; font-family: Source Sans 3; margin-bottom: 8px;cursor: default;">Password</label>
                                <div class="modal-form-group">
                                <input name="pass" id="password" type="password" required="required" class="modal-form-input" placeholder="Enter Password">
                                </div>
                                <div class="modal-form-group left">
                                <input name="rem" type="hidden" value="false">
                                <input name="to" type="hidden" class="signin-to-input" value="https://www.geeksforgeeks.org/dsa/quick-sort-algorithm/">
                                <input name="rem" type="checkbox" checked="">
                                <label class="modal-form-label" for="remember">Remember me</label>
                                <p class="pull-right forgot-link">Forgot Password</p>
                                </div>
                            <div class="modal-form-group left" style="display:none;">
                                <center><div id="loginCaptcha"><div style="width: 304px; height: 78px;"><div><iframe title="reCAPTCHA" width="304" height="78" role="presentation" name="a-bvxaf0rifaoa" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation" src="./Quick Sort - GeeksforGeeks_files/anchor.html"></iframe></div><textarea id="g-recaptcha-response" name="g-recaptcha-response" class="g-recaptcha-response" style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea></div><iframe style="display: none;" src="./Quick Sort - GeeksforGeeks_files/saved_resource(3).html"></iframe></div></center>
                            </div>
                                <button class="btn btn-green signin-button" style="margin: 32px 0px 12px;background-color: rgb(16, 108, 80);border-radius: 8px;background-image: none;display: flex;justify-content: center;align-items: center;gap: 10px;font-family: Source Sans 3;" type="submit">Sign In</button>
                            </form>
                        </div>
                        <div>
                        <div class="privPolicy">By creating this account, you agree to our<a href="https://www.geeksforgeeks.org/privacy-policy/" target="_blank" rel="noreferrer" style="color: rgb(29, 29, 31);"> Privacy Policy</a> &amp;<a href="https://www.geeksforgeeks.org/legal/privacy-policy/#:~:text=the%20appropriate%20measures.-,COOKIE%20POLICY,-A%20cookie%20is" target="_blank" rel="noreferrer" style="color: rgb(29, 29, 31);"> Cookie Policy.</a></div>
                        </div>
                    </div>
                </div>
                <div class="register-div">
                    <div style="border-top: 0px;">
                        <div class="modalTitleSignUp">
                        <h1 class="modalTitleValue">Create Account</h1>
                        <p>Already have an account ?<button class="signinBtn">Log in</button></p>
                        </div>
                        <div class="socialSignIn">
                            <div class="socialContainer">
                                <button id="gsignup" class="loginBtn btnGoogle socialAuthBtn mainBtn"><span><span class="ibtnGoogle"></span><span>Continue with Google</span></span></button>
                                <div class="socialBtnWrapper"><button id="fbsignup" class="loginBtn btnFacebook socialAuthBtn roundedBtn"><span><span></span></span></button><button id="insignup" class="loginBtn btnLinkedin socialAuthBtn roundedBtn"><span><span></span></span></button><button id="gitsignup" class="loginBtn btnGithub socialAuthBtn roundedBtn"><span><span></span></span></button><button id="openpasslogin-signup" class="loginBtn btnOpenpass socialAuthBtn roundedBtn"><span><span></span></span></button></div>
                            </div>
                            <div class="socialDivider" style="margin-top: 20px;"><span>or</span></div>
                        </div>
                        <div class="content-register">
                            <form method="POST" class="login-form signup-form" id="Register">
                                <input type="hidden" name="reqType" value="Register">
                                <div class="modal-form-group">
                                <div class="extra"></div>
                                </div>
                                <label style="display: flex; color: rgb(14, 14, 18); font-weight: 500; font-size: 16px; font-family: Source Sans 3; margin-bottom: 8px;cursor: default;">Username or Email</label>
                                <div class="modal-form-group">
                                <input name="email" id="email" type="email" required="required" class="modal-form-input" placeholder="Username or Email">
                                </div>
                                <label style="display: flex; color: rgb(14, 14, 18); font-weight: 500; font-size: 16px; font-family: Source Sans 3; margin-bottom: 8px;cursor: default;">Password</label>
                                <div class="modal-form-group">
                                <input name="pass" id="reg-password" type="password" required="required" class="modal-form-input" placeholder="Enter Password">
                                </div>
                                <label style="display: flex; color: rgb(14, 14, 18); font-weight: 500; font-size: 16px; font-family: Source Sans 3; margin-bottom: 8px; margin-top: 15px;cursor: default;">Institution / Organization</label>
                                <div class="modal-form-group">
                                <span class="twitter-typeahead" style="position: relative; display: inline-block;"><input autocomplete="off" type="text" class="modal-form-input typeahead tt-hint" readonly="" spellcheck="false" tabindex="-1" dir="ltr" style="position: absolute; top: 0px; left: 0px; border-color: transparent; box-shadow: none; opacity: 1; background: none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255);"><input name="institute" id="organization" autocomplete="off" required="required" type="text" class="modal-form-input typeahead tt-input" placeholder="Enter Institution / Organization name" spellcheck="false" dir="auto" aria-activedescendant="" aria-owns="organization_listbox" role="combobox" aria-readonly="true" aria-autocomplete="list" style="position: relative; vertical-align: top; background-color: transparent;"><span role="status" aria-live="polite" style="position: absolute; padding: 0px; border: 0px; height: 1px; width: 1px; margin-bottom: -1px; margin-right: -1px; overflow: hidden; clip: rect(0px, 0px, 0px, 0px); white-space: nowrap;"></span><pre aria-hidden="true" style="position: absolute; visibility: hidden; white-space: pre; font-family: &quot;Source Sans 3&quot;, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: 400; word-spacing: 0px; letter-spacing: 0px; text-indent: 0px; text-rendering: auto; text-transform: none;"></pre><div role="listbox" class="tt-menu" style="position: absolute; top: 100%; left: 0px; z-index: 100; display: none;"><div role="presentation" class="tt-dataset tt-dataset-0"></div></div></span>
                                </div>
                                <div class="modal-form-group">
                                    <input type="hidden" name="g-recaptcha-response" id="g-recaptcha-response-signup-form">
                                </div>
                            <input name="to" type="hidden" class="signup-to-input" value="https://www.geeksforgeeks.org/dsa/quick-sort-algorithm/">
                                <button class="btn btn-green signup-button" style="margin: 32px 0px 12px;background-color: rgb(16, 108, 80);border-radius: 8px;background-image: none;display: flex;justify-content: center;align-items: center;gap: 10px;font-family: Source Sans 3;" type="submit">Sign Up</button>
                            </form>
                        </div> 
                </div>
                </div>
                <div class="forgot-div">
                    <form class="login-form forgot-form" id="Forgot">
                    <input type="hidden" name="reqType" value="Forgot">
                    <div class="modal-form-group">
                        <div class="extra"></div>
                    </div>
                    <div class="modal-form-group">
                        <p class="left">*Please enter your email address or userHandle.</p>
                    </div>
                    <div class="modal-form-group">
                        <input name="user" id="fuser" type="text" class="modal-form-input" required="required" placeholder="Username/Email">
                    </div>
                    <div class="modal-form-group">
                        <input type="hidden" name="g-recaptcha-response" id="g-recaptcha-response-forgot-form">
                    </div>
                    <div class="modal-form-group left">
                        <a class="login-link">Back to Login</a>
                    </div>
                    <button class="btn btn-green center reset-button" style="margin: 32px 0px 12px;background-color: rgb(16, 108, 80);border-radius: 8px;background-image: none;display: flex;justify-content: center;align-items: center;gap: 10px;font-family: Source Sans 3;" type="submit">Reset Password</button>
                    </form> 
                </div>
            </div>
        </div>
    </div>

    <script>

    //google captch initialization for register/forgot section.
    var captchaSiteKey = '6LexF0sUAAAAADiQjz9BMiSrqplrItl-tWYDSfWa';
    var registerWidgetId;
    var loginWidgetId;
    var onloadCallback = function() {
        // Renders the HTML element with id 'example1' as a reCAPTCHA widget.
        // The id of the reCAPTCHA widget is assigned to 'widgetId1'.
        // registerWidgetId = grecaptcha.render('registerCaptcha', {
        //     'sitekey' : captchaSiteKey,
        // });
        loginWidgetId = grecaptcha.render('loginCaptcha', {
            'sitekey' : captchaSiteKey,
        });
    };

    </script>
    <script src="./Quick Sort - GeeksforGeeks_files/login-modal-revamp.min.js.descarga"></script>


</div><div><div class="grecaptcha-badge" data-style="bottomright" style="width: 256px; height: 60px; display: block; transition: right 0.3s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;"><div class="grecaptcha-logo"><iframe title="reCAPTCHA" width="256" height="60" role="presentation" name="a-92ssdhpikqhe" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation" src="./Quick Sort - GeeksforGeeks_files/anchor(1).html"></iframe></div><div class="grecaptcha-error"></div><textarea id="g-recaptcha-response-100000" name="g-recaptcha-response" class="g-recaptcha-response" style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea></div></div><div style="background-color: rgb(255, 255, 255); border: 1px solid rgb(204, 204, 204); box-shadow: rgba(0, 0, 0, 0.2) 2px 2px 3px; position: absolute; transition: visibility linear 0.3s, opacity 0.3s linear; opacity: 0; visibility: hidden; z-index: 2000000000; left: 0px; top: -10000px;"><div style="width: 100%; height: 100%; position: fixed; top: 0px; left: 0px; z-index: 2000000000; background-color: rgb(255, 255, 255); opacity: 0.05;"></div><div class="g-recaptcha-bubble-arrow" style="border: 11px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 2000000000;"></div><div class="g-recaptcha-bubble-arrow" style="border: 10px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -10px; z-index: 2000000000;"></div><div style="z-index: 2000000000; position: relative;"><iframe title="el desafío de recaptcha caduca dentro de dos minutos" name="c-bvxaf0rifaoa" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation" src="./Quick Sort - GeeksforGeeks_files/bframe.html" style="width: 100%; height: 100%;"></iframe></div></div></body><grammarly-desktop-integration data-grammarly-shadow-root="true"><template shadowrootmode="open"><style>
      div.grammarly-desktop-integration {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
        -moz-user-select: none;
        -webkit-user-select: none;
        -ms-user-select:none;
        user-select:none;
      }

      div.grammarly-desktop-integration:before {
        content: attr(data-content);
      }
    </style><div aria-label="grammarly-integration" role="group" tabindex="-1" class="grammarly-desktop-integration" data-content="{&quot;mode&quot;:&quot;full&quot;,&quot;isActive&quot;:true,&quot;isUserDisabled&quot;:false}"></div></template></grammarly-desktop-integration><iframe sandbox="allow-scripts allow-same-origin" id="163502eacc3bf36d8" frameborder="0" allowtransparency="true" marginheight="0" marginwidth="0" width="0" hspace="0" vspace="0" height="0" style="height:0px;width:0px;display:none;" scrolling="no" src="./Quick Sort - GeeksforGeeks_files/user_sync.html">
    </iframe><iframe sandbox="allow-scripts allow-same-origin" id="164754a5dca60d8a8" frameborder="0" allowtransparency="true" marginheight="0" marginwidth="0" width="0" hspace="0" vspace="0" height="0" style="height:0px;width:0px;display:none;" scrolling="no" src="./Quick Sort - GeeksforGeeks_files/ixmatch.html">
    </iframe><iframe sandbox="allow-scripts allow-same-origin" id="165e6967cc9e4c338" frameborder="0" allowtransparency="true" marginheight="0" marginwidth="0" width="0" hspace="0" vspace="0" height="0" style="height:0px;width:0px;display:none;" scrolling="no" src="./Quick Sort - GeeksforGeeks_files/async_usersync.html">
    </iframe><iframe sandbox="allow-scripts allow-same-origin" id="16652df5f82066ea8" frameborder="0" allowtransparency="true" marginheight="0" marginwidth="0" width="0" hspace="0" vspace="0" height="0" style="height:0px;width:0px;display:none;" scrolling="no" src="./Quick Sort - GeeksforGeeks_files/iframe.html">
    </iframe><iframe sandbox="allow-scripts allow-same-origin" id="167e9e2dabb57478" frameborder="0" allowtransparency="true" marginheight="0" marginwidth="0" width="0" hspace="0" vspace="0" height="0" style="height:0px;width:0px;display:none;" scrolling="no" src="./Quick Sort - GeeksforGeeks_files/saved_resource(4).html">
    </iframe><iframe sandbox="allow-scripts allow-same-origin" id="168ad86f02d76516" frameborder="0" allowtransparency="true" marginheight="0" marginwidth="0" width="0" hspace="0" vspace="0" height="0" style="height:0px;width:0px;display:none;" scrolling="no" src="./Quick Sort - GeeksforGeeks_files/sync.html">
    </iframe><iframe sandbox="allow-scripts allow-same-origin" id="169518a3e2bdc6d48" frameborder="0" allowtransparency="true" marginheight="0" marginwidth="0" width="0" hspace="0" vspace="0" height="0" style="height:0px;width:0px;display:none;" scrolling="no" src="./Quick Sort - GeeksforGeeks_files/pd.html">
    </iframe><iframe sandbox="allow-scripts allow-same-origin" id="1708cfbace1ee39e8" frameborder="0" allowtransparency="true" marginheight="0" marginwidth="0" width="0" hspace="0" vspace="0" height="0" style="height:0px;width:0px;display:none;" scrolling="no" src="./Quick Sort - GeeksforGeeks_files/sync(1).html">
    </iframe></html>